
tempAdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d0c  08004d0c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d14  08004d14  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004d1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000090  08004dac  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08004dac  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a11c  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c76  00000000  00000000  0002a21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  0002be98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000692  00000000  00000000  0002c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177d2  00000000  00000000  0002cdd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b358  00000000  00000000  000445a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093437  00000000  00000000  0004f8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b18  00000000  00000000  000e2d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e584c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c74 	.word	0x08004c74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08004c74 	.word	0x08004c74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <Kalman>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adcValue;
double Kalman(double measurement) {
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	ed87 0b00 	vstr	d0, [r7]
 static double R = 0.25;//pow(0.5, 2);
 static double K = 1.0;
 static double X = 20.0;

 // Kalman Simple Filter
 P = P + varP;
 8000d72:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <Kalman+0xe4>)
 8000d74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d78:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <Kalman+0xe8>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fa85 	bl	800028c <__adddf3>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4931      	ldr	r1, [pc, #196]	; (8000e4c <Kalman+0xe4>)
 8000d88:	e9c1 2300 	strd	r2, r3, [r1]
 K = P / (P + R);
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <Kalman+0xe4>)
 8000d8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <Kalman+0xe4>)
 8000d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d98:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <Kalman+0xec>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	f7ff fa75 	bl	800028c <__adddf3>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4620      	mov	r0, r4
 8000da8:	4629      	mov	r1, r5
 8000daa:	f7ff fd4f 	bl	800084c <__aeabi_ddiv>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4929      	ldr	r1, [pc, #164]	; (8000e58 <Kalman+0xf0>)
 8000db4:	e9c1 2300 	strd	r2, r3, [r1]
 X = (K * measurement) + (1 - K) * X;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <Kalman+0xf0>)
 8000dba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dc2:	f7ff fc19 	bl	80005f8 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4614      	mov	r4, r2
 8000dcc:	461d      	mov	r5, r3
 8000dce:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <Kalman+0xf0>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f04f 0000 	mov.w	r0, #0
 8000dd8:	4920      	ldr	r1, [pc, #128]	; (8000e5c <Kalman+0xf4>)
 8000dda:	f7ff fa55 	bl	8000288 <__aeabi_dsub>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <Kalman+0xf8>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff fc04 	bl	80005f8 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4620      	mov	r0, r4
 8000df6:	4629      	mov	r1, r5
 8000df8:	f7ff fa48 	bl	800028c <__adddf3>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4917      	ldr	r1, [pc, #92]	; (8000e60 <Kalman+0xf8>)
 8000e02:	e9c1 2300 	strd	r2, r3, [r1]
 P = (1 - K) * P;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <Kalman+0xf0>)
 8000e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0c:	f04f 0000 	mov.w	r0, #0
 8000e10:	4912      	ldr	r1, [pc, #72]	; (8000e5c <Kalman+0xf4>)
 8000e12:	f7ff fa39 	bl	8000288 <__aeabi_dsub>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <Kalman+0xe4>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fbe8 	bl	80005f8 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <Kalman+0xe4>)
 8000e2e:	e9c1 2300 	strd	r2, r3, [r1]

 return X;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <Kalman+0xf8>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000e40:	eef0 0a67 	vmov.f32	s1, s15
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000010 	.word	0x20000010
 8000e58:	20000018 	.word	0x20000018
 8000e5c:	3ff00000 	.word	0x3ff00000
 8000e60:	20000020 	.word	0x20000020

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6a:	f000 fb8b 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6e:	f000 f89d 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e72:	f000 f98d 	bl	8001190 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e76:	f000 f901 	bl	800107c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e7a:	f000 f95f 	bl	800113c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
initUart(&huart2);
 8000e7e:	4843      	ldr	r0, [pc, #268]	; (8000f8c <main+0x128>)
 8000e80:	f000 fb30 	bl	80014e4 <initUart>
printf("start temperature with ADC example\n");
 8000e84:	4842      	ldr	r0, [pc, #264]	; (8000f90 <main+0x12c>)
 8000e86:	f003 f88b 	bl	8003fa0 <puts>
	  //AD변환
	   static uint16_t ValueArray[100] = {0,};
	   static uint8_t valuePosition = 0;


		  HAL_ADC_Start(&hadc1);
 8000e8a:	4842      	ldr	r0, [pc, #264]	; (8000f94 <main+0x130>)
 8000e8c:	f000 fc30 	bl	80016f0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8000e90:	210a      	movs	r1, #10
 8000e92:	4840      	ldr	r0, [pc, #256]	; (8000f94 <main+0x130>)
 8000e94:	f000 fd13 	bl	80018be <HAL_ADC_PollForConversion>
		  adcValue -= ValueArray[valuePosition];
 8000e98:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <main+0x134>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a3f      	ldr	r2, [pc, #252]	; (8000f9c <main+0x138>)
 8000e9e:	7812      	ldrb	r2, [r2, #0]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4a3f      	ldr	r2, [pc, #252]	; (8000fa0 <main+0x13c>)
 8000ea4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000ea8:	1a9b      	subs	r3, r3, r2
 8000eaa:	4a3b      	ldr	r2, [pc, #236]	; (8000f98 <main+0x134>)
 8000eac:	6013      	str	r3, [r2, #0]
		  uint16_t tempValue = 4095 -  HAL_ADC_GetValue(&hadc1);
 8000eae:	4839      	ldr	r0, [pc, #228]	; (8000f94 <main+0x130>)
 8000eb0:	f000 fd90 	bl	80019d4 <HAL_ADC_GetValue>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000ebc:	330f      	adds	r3, #15
 8000ebe:	80fb      	strh	r3, [r7, #6]
		  //HAL_ADC_Stop(&hadc1);


		  HAL_ADC_Start(&hadc1);
 8000ec0:	4834      	ldr	r0, [pc, #208]	; (8000f94 <main+0x130>)
 8000ec2:	f000 fc15 	bl	80016f0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 0);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4832      	ldr	r0, [pc, #200]	; (8000f94 <main+0x130>)
 8000eca:	f000 fcf8 	bl	80018be <HAL_ADC_PollForConversion>
		  uint16_t cdsValue = 4095 - HAL_ADC_GetValue(&hadc1);
 8000ece:	4831      	ldr	r0, [pc, #196]	; (8000f94 <main+0x130>)
 8000ed0:	f000 fd80 	bl	80019d4 <HAL_ADC_GetValue>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000edc:	330f      	adds	r3, #15
 8000ede:	80bb      	strh	r3, [r7, #4]
		  HAL_ADC_Stop(&hadc1);
 8000ee0:	482c      	ldr	r0, [pc, #176]	; (8000f94 <main+0x130>)
 8000ee2:	f000 fcb9 	bl	8001858 <HAL_ADC_Stop>

		  adcValue -= ValueArray[valuePosition];
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <main+0x134>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a2c      	ldr	r2, [pc, #176]	; (8000f9c <main+0x138>)
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4a2b      	ldr	r2, [pc, #172]	; (8000fa0 <main+0x13c>)
 8000ef2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000ef6:	1a9b      	subs	r3, r3, r2
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <main+0x134>)
 8000efa:	6013      	str	r3, [r2, #0]
		  ValueArray[valuePosition] = tempValue;
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <main+0x138>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <main+0x13c>)
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		  adcValue += ValueArray[valuePosition];
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <main+0x138>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <main+0x13c>)
 8000f12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <main+0x134>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <main+0x134>)
 8000f20:	6013      	str	r3, [r2, #0]
		  valuePosition++;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <main+0x138>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <main+0x138>)
 8000f2c:	701a      	strb	r2, [r3, #0]
		  valuePosition %= 100;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <main+0x138>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <main+0x140>)
 8000f34:	fba2 1203 	umull	r1, r2, r2, r3
 8000f38:	0952      	lsrs	r2, r2, #5
 8000f3a:	2164      	movs	r1, #100	; 0x64
 8000f3c:	fb01 f202 	mul.w	r2, r1, r2
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <main+0x138>)
 8000f46:	701a      	strb	r2, [r3, #0]




	  //uart전송
	  printf("%d\t%d\t%d\t%d\n", cdsValue, tempValue, adcValue/100,(int)Kalman((double)tempValue));
 8000f48:	88bc      	ldrh	r4, [r7, #4]
 8000f4a:	88fd      	ldrh	r5, [r7, #6]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <main+0x134>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <main+0x140>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	095e      	lsrs	r6, r3, #5
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fad2 	bl	8000504 <__aeabi_ui2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	ec43 2b10 	vmov	d0, r2, r3
 8000f68:	f7ff fefe 	bl	8000d68 <Kalman>
 8000f6c:	ec53 2b10 	vmov	r2, r3, d0
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fd52 	bl	8000a1c <__aeabi_d2iz>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4633      	mov	r3, r6
 8000f7e:	462a      	mov	r2, r5
 8000f80:	4621      	mov	r1, r4
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <main+0x144>)
 8000f84:	f002 ffa6 	bl	8003ed4 <iprintf>
  {
 8000f88:	e77f      	b.n	8000e8a <main+0x26>
 8000f8a:	bf00      	nop
 8000f8c:	200000f4 	.word	0x200000f4
 8000f90:	08004c8c 	.word	0x08004c8c
 8000f94:	200000ac 	.word	0x200000ac
 8000f98:	2000013c 	.word	0x2000013c
 8000f9c:	20000140 	.word	0x20000140
 8000fa0:	20000144 	.word	0x20000144
 8000fa4:	51eb851f 	.word	0x51eb851f
 8000fa8:	08004cb0 	.word	0x08004cb0

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2230      	movs	r2, #48	; 0x30
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 f8d0 	bl	8004160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <SystemClock_Config+0xc8>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a26      	ldr	r2, [pc, #152]	; (8001074 <SystemClock_Config+0xc8>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <SystemClock_Config+0xc8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <SystemClock_Config+0xcc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <SystemClock_Config+0xcc>)
 8000ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <SystemClock_Config+0xcc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001010:	2310      	movs	r3, #16
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001018:	2300      	movs	r3, #0
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800101c:	2308      	movs	r3, #8
 800101e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001020:	2364      	movs	r3, #100	; 0x64
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001024:	2302      	movs	r3, #2
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001028:	2304      	movs	r3, #4
 800102a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fa33 	bl	800249c <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800103c:	f000 f8c2 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2302      	movs	r3, #2
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2103      	movs	r1, #3
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fc95 	bl	800298c <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001068:	f000 f8ac 	bl	80011c4 <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3750      	adds	r7, #80	; 0x50
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_ADC1_Init+0xb4>)
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <MX_ADC1_Init+0xb8>)
 8001092:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_ADC1_Init+0xb4>)
 8001096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800109a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <MX_ADC1_Init+0xb4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010be:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010d8:	2201      	movs	r2, #1
 80010da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	4814      	ldr	r0, [pc, #80]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010de:	f000 fac3 	bl	8001668 <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010e8:	f000 f86c 	bl	80011c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80010f4:	2304      	movs	r3, #4
 80010f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010fe:	f000 fc77 	bl	80019f0 <HAL_ADC_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001108:	f000 f85c 	bl	80011c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800110c:	2301      	movs	r3, #1
 800110e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001110:	2302      	movs	r3, #2
 8001112:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0xb4>)
 800111a:	f000 fc69 	bl	80019f0 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001124:	f000 f84e 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000ac 	.word	0x200000ac
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_USART2_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001174:	f001 fdea 	bl	8002d4c <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f000 f821 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000f4 	.word	0x200000f4
 800118c:	40004400 	.word	0x40004400

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_GPIO_Init+0x30>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <MX_GPIO_Init+0x30>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_GPIO_Init+0x30>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	e7fe      	b.n	80011cc <Error_Handler+0x8>
	...

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_MspInit+0x4c>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_MspInit+0x4c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_ADC_MspInit+0x7c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d127      	bne.n	8001292 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800127a:	2303      	movs	r3, #3
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_ADC_MspInit+0x84>)
 800128e:	f000 ff81 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40012000 	.word	0x40012000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_UART_MspInit+0x94>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d133      	bne.n	8001332 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001302:	230c      	movs	r3, #12
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001312:	2307      	movs	r3, #7
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <HAL_UART_MspInit+0x9c>)
 800131e:	f000 ff39 	bl	8002194 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2026      	movs	r0, #38	; 0x26
 8001328:	f000 fe6b 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800132c:	2026      	movs	r0, #38	; 0x26
 800132e:	f000 fe84 	bl	800203a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40004400 	.word	0x40004400
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 f948 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <USART2_IRQHandler+0x10>)
 80013a2:	f001 fdaf 	bl	8002f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000f4 	.word	0x200000f4

080013b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e00a      	b.n	80013d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c2:	f3af 8000 	nop.w
 80013c6:	4601      	mov	r1, r0
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60ba      	str	r2, [r7, #8]
 80013ce:	b2ca      	uxtb	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf0      	blt.n	80013c2 <_read+0x12>
  }

  return len;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001412:	605a      	str	r2, [r3, #4]
  return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_isatty>:

int _isatty(int file)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f002 feba 	bl	80041fc <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20020000 	.word	0x20020000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	2000020c 	.word	0x2000020c
 80014bc:	20000368 	.word	0x20000368

080014c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <initUart>:

#include "uart.h"

UART_HandleTypeDef *huart;

void initUart(UART_HandleTypeDef *inHuart)  {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	huart = inHuart;
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <initUart+0x1c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000210 	.word	0x20000210

08001504 <_write>:

int _write(int file, char *p, int len) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *)p, len, len);
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <_write+0x28>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	b29a      	uxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	f001 fc66 	bl	8002dec <HAL_UART_Transmit>
	return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000210 	.word	0x20000210

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001534:	f7ff ffc4 	bl	80014c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153a:	490d      	ldr	r1, [pc, #52]	; (8001570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001550:	4c0a      	ldr	r4, [pc, #40]	; (800157c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f002 fe53 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff fc7f 	bl	8000e64 <main>
  bx  lr    
 8001566:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001574:	08004d1c 	.word	0x08004d1c
  ldr r2, =_sbss
 8001578:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800157c:	20000364 	.word	0x20000364

08001580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <HAL_Init+0x40>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_Init+0x40>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_Init+0x40>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 fd1d 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	200f      	movs	r0, #15
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fe0a 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fd35 	bl	8002056 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 fcfd 	bl	8002002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000028 	.word	0x20000028
 8001620:	20000030 	.word	0x20000030
 8001624:	2000002c 	.word	0x2000002c

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000030 	.word	0x20000030
 800164c:	20000214 	.word	0x20000214

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000214 	.word	0x20000214

08001668 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e033      	b.n	80016e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fdca 	bl	8001220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ae:	f023 0302 	bic.w	r3, r3, #2
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 faca 	bl	8001c54 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	f043 0201 	orr.w	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
 80016d6:	e001      	b.n	80016dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_ADC_Start+0x1a>
 8001706:	2302      	movs	r3, #2
 8001708:	e097      	b.n	800183a <HAL_ADC_Start+0x14a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d018      	beq.n	8001752 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001730:	4b45      	ldr	r3, [pc, #276]	; (8001848 <HAL_ADC_Start+0x158>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a45      	ldr	r2, [pc, #276]	; (800184c <HAL_ADC_Start+0x15c>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0c9a      	lsrs	r2, r3, #18
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001744:	e002      	b.n	800174c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3b01      	subs	r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d15f      	bne.n	8001820 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800178a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800179e:	d106      	bne.n	80017ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	f023 0206 	bic.w	r2, r3, #6
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
 80017ac:	e002      	b.n	80017b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_ADC_Start+0x160>)
 80017be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10f      	bne.n	80017f6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d129      	bne.n	8001838 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	e020      	b.n	8001838 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <HAL_ADC_Start+0x164>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d11b      	bne.n	8001838 <HAL_ADC_Start+0x148>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d114      	bne.n	8001838 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	e00b      	b.n	8001838 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f043 0210 	orr.w	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000028 	.word	0x20000028
 800184c:	431bde83 	.word	0x431bde83
 8001850:	40012300 	.word	0x40012300
 8001854:	40012000 	.word	0x40012000

08001858 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_ADC_Stop+0x16>
 800186a:	2302      	movs	r3, #2
 800186c:	e021      	b.n	80018b2 <HAL_ADC_Stop+0x5a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018da:	d113      	bne.n	8001904 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ea:	d10b      	bne.n	8001904 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f043 0220 	orr.w	r2, r3, #32
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e063      	b.n	80019cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001904:	f7ff fea4 	bl	8001650 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800190a:	e021      	b.n	8001950 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001912:	d01d      	beq.n	8001950 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <HAL_ADC_PollForConversion+0x6c>
 800191a:	f7ff fe99 	bl	8001650 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d212      	bcs.n	8001950 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b02      	cmp	r3, #2
 8001936:	d00b      	beq.n	8001950 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f043 0204 	orr.w	r2, r3, #4
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e03d      	b.n	80019cc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b02      	cmp	r3, #2
 800195c:	d1d6      	bne.n	800190c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f06f 0212 	mvn.w	r2, #18
 8001966:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d123      	bne.n	80019ca <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001986:	2b00      	cmp	r3, #0
 8001988:	d11f      	bne.n	80019ca <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d111      	bne.n	80019ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d105      	bne.n	80019ca <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1c>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e113      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x244>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	d925      	bls.n	8001a68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68d9      	ldr	r1, [r3, #12]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b1e      	subs	r3, #30
 8001a32:	2207      	movs	r2, #7
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	400a      	ands	r2, r1
 8001a40:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68d9      	ldr	r1, [r3, #12]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	4603      	mov	r3, r0
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4403      	add	r3, r0
 8001a5a:	3b1e      	subs	r3, #30
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	e022      	b.n	8001aae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6919      	ldr	r1, [r3, #16]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	400a      	ands	r2, r1
 8001a8a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6919      	ldr	r1, [r3, #16]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4403      	add	r3, r0
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d824      	bhi.n	8001b00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b05      	subs	r3, #5
 8001ac8:	221f      	movs	r2, #31
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3b05      	subs	r3, #5
 8001af2:	fa00 f203 	lsl.w	r2, r0, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	635a      	str	r2, [r3, #52]	; 0x34
 8001afe:	e04c      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d824      	bhi.n	8001b52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b23      	subs	r3, #35	; 0x23
 8001b1a:	221f      	movs	r2, #31
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43da      	mvns	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	400a      	ands	r2, r1
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	3b23      	subs	r3, #35	; 0x23
 8001b44:	fa00 f203 	lsl.w	r2, r0, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b50:	e023      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b41      	subs	r3, #65	; 0x41
 8001b64:	221f      	movs	r2, #31
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	400a      	ands	r2, r1
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b41      	subs	r3, #65	; 0x41
 8001b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <HAL_ADC_ConfigChannel+0x250>)
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <HAL_ADC_ConfigChannel+0x254>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d10f      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1d8>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b12      	cmp	r3, #18
 8001bae:	d10b      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_ADC_ConfigChannel+0x254>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12b      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x23a>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_ADC_ConfigChannel+0x258>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d003      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x1f4>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b11      	cmp	r3, #17
 8001be2:	d122      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_ADC_ConfigChannel+0x258>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d111      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_ADC_ConfigChannel+0x25c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_ADC_ConfigChannel+0x260>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	0c9a      	lsrs	r2, r3, #18
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c1c:	e002      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f9      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40012300 	.word	0x40012300
 8001c44:	40012000 	.word	0x40012000
 8001c48:	10000012 	.word	0x10000012
 8001c4c:	20000028 	.word	0x20000028
 8001c50:	431bde83 	.word	0x431bde83

08001c54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5c:	4b79      	ldr	r3, [pc, #484]	; (8001e44 <ADC_Init+0x1f0>)
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	021a      	lsls	r2, r3, #8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6899      	ldr	r1, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <ADC_Init+0x1f4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d022      	beq.n	8001d32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6899      	ldr	r1, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	e00f      	b.n	8001d52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d50:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0202 	bic.w	r2, r2, #2
 8001d60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6899      	ldr	r1, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7e1b      	ldrb	r3, [r3, #24]
 8001d6c:	005a      	lsls	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01b      	beq.n	8001db8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d8e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6859      	ldr	r1, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	3b01      	subs	r3, #1
 8001dac:	035a      	lsls	r2, r3, #13
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	e007      	b.n	8001dc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	051a      	lsls	r2, r3, #20
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6899      	ldr	r1, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e0a:	025a      	lsls	r2, r3, #9
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6899      	ldr	r1, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	029a      	lsls	r2, r3, #10
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40012300 	.word	0x40012300
 8001e48:	0f000001 	.word	0x0f000001

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	; (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb8:	d301      	bcc.n	8001fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <SysTick_Config+0x40>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f7ff ff8e 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff29 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002014:	f7ff ff3e 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8002018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f7ff ff8e 	bl	8001f40 <NVIC_EncodePriority>
 8002024:	4602      	mov	r2, r0
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff5d 	bl	8001eec <__NVIC_SetPriority>
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff31 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffa2 	bl	8001fa8 <SysTick_Config>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff fae8 	bl	8001650 <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d008      	beq.n	80020a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e052      	b.n	8002146 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0216 	bic.w	r2, r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <HAL_DMA_Abort+0x62>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0208 	bic.w	r2, r2, #8
 80020de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f0:	e013      	b.n	800211a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f2:	f7ff faad 	bl	8001650 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d90c      	bls.n	800211a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2203      	movs	r2, #3
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e015      	b.n	8002146 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1e4      	bne.n	80020f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	223f      	movs	r2, #63	; 0x3f
 800212e:	409a      	lsls	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d004      	beq.n	800216c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e00c      	b.n	8002186 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2205      	movs	r2, #5
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e159      	b.n	8002464 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b0:	2201      	movs	r2, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f040 8148 	bne.w	800245e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d005      	beq.n	80021e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d130      	bne.n	8002248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 0201 	and.w	r2, r3, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b03      	cmp	r3, #3
 8002252:	d017      	beq.n	8002284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d123      	bne.n	80022d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	08da      	lsrs	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3208      	adds	r2, #8
 8002298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	69b9      	ldr	r1, [r7, #24]
 80022d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80a2 	beq.w	800245e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b57      	ldr	r3, [pc, #348]	; (800247c <HAL_GPIO_Init+0x2e8>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a56      	ldr	r2, [pc, #344]	; (800247c <HAL_GPIO_Init+0x2e8>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b54      	ldr	r3, [pc, #336]	; (800247c <HAL_GPIO_Init+0x2e8>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002336:	4a52      	ldr	r2, [pc, #328]	; (8002480 <HAL_GPIO_Init+0x2ec>)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a49      	ldr	r2, [pc, #292]	; (8002484 <HAL_GPIO_Init+0x2f0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d019      	beq.n	8002396 <HAL_GPIO_Init+0x202>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a48      	ldr	r2, [pc, #288]	; (8002488 <HAL_GPIO_Init+0x2f4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0x1fe>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a47      	ldr	r2, [pc, #284]	; (800248c <HAL_GPIO_Init+0x2f8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_GPIO_Init+0x1fa>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a46      	ldr	r2, [pc, #280]	; (8002490 <HAL_GPIO_Init+0x2fc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x1f6>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a45      	ldr	r2, [pc, #276]	; (8002494 <HAL_GPIO_Init+0x300>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_GPIO_Init+0x1f2>
 8002382:	2304      	movs	r3, #4
 8002384:	e008      	b.n	8002398 <HAL_GPIO_Init+0x204>
 8002386:	2307      	movs	r3, #7
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x204>
 800238a:	2303      	movs	r3, #3
 800238c:	e004      	b.n	8002398 <HAL_GPIO_Init+0x204>
 800238e:	2302      	movs	r3, #2
 8002390:	e002      	b.n	8002398 <HAL_GPIO_Init+0x204>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_GPIO_Init+0x204>
 8002396:	2300      	movs	r3, #0
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f002 0203 	and.w	r2, r2, #3
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	4093      	lsls	r3, r2
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a8:	4935      	ldr	r1, [pc, #212]	; (8002480 <HAL_GPIO_Init+0x2ec>)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b6:	4b38      	ldr	r3, [pc, #224]	; (8002498 <HAL_GPIO_Init+0x304>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023da:	4a2f      	ldr	r2, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x304>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e0:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_GPIO_Init+0x304>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002404:	4a24      	ldr	r2, [pc, #144]	; (8002498 <HAL_GPIO_Init+0x304>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_GPIO_Init+0x304>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800242e:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_GPIO_Init+0x304>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_GPIO_Init+0x304>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_GPIO_Init+0x304>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3301      	adds	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b0f      	cmp	r3, #15
 8002468:	f67f aea2 	bls.w	80021b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40013800 	.word	0x40013800
 8002484:	40020000 	.word	0x40020000
 8002488:	40020400 	.word	0x40020400
 800248c:	40020800 	.word	0x40020800
 8002490:	40020c00 	.word	0x40020c00
 8002494:	40021000 	.word	0x40021000
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e267      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d075      	beq.n	80025a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ba:	4b88      	ldr	r3, [pc, #544]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d00c      	beq.n	80024e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4b85      	ldr	r3, [pc, #532]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d112      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4b7e      	ldr	r3, [pc, #504]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05b      	beq.n	80025a4 <HAL_RCC_OscConfig+0x108>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d157      	bne.n	80025a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e242      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x74>
 8002502:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a75      	ldr	r2, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b70      	ldr	r3, [pc, #448]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6f      	ldr	r2, [pc, #444]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6c      	ldr	r2, [pc, #432]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002534:	4b69      	ldr	r3, [pc, #420]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a68      	ldr	r2, [pc, #416]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b66      	ldr	r3, [pc, #408]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff f87c 	bl	8001650 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff f878 	bl	8001650 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e207      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0xc0>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff f868 	bl	8001650 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002584:	f7ff f864 	bl	8001650 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1f3      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	4b51      	ldr	r3, [pc, #324]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0xe8>
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b44      	ldr	r3, [pc, #272]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d116      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e1c7      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4937      	ldr	r1, [pc, #220]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	e03a      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260c:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_RCC_OscConfig+0x244>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7ff f81d 	bl	8001650 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261a:	f7ff f819 	bl	8001650 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e1a8      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4925      	ldr	r1, [pc, #148]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCC_OscConfig+0x244>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fffc 	bl	8001650 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fff8 	bl	8001650 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e187      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d036      	beq.n	80026f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_RCC_OscConfig+0x248>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe ffdc 	bl	8001650 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe ffd8 	bl	8001650 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e167      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_OscConfig+0x240>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x200>
 80026ba:	e01b      	b.n	80026f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_OscConfig+0x248>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7fe ffc5 	bl	8001650 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	e00e      	b.n	80026e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ca:	f7fe ffc1 	bl	8001650 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d907      	bls.n	80026e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e150      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
 80026dc:	40023800 	.word	0x40023800
 80026e0:	42470000 	.word	0x42470000
 80026e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b88      	ldr	r3, [pc, #544]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ea      	bne.n	80026ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8097 	beq.w	8002830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b81      	ldr	r3, [pc, #516]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b7d      	ldr	r3, [pc, #500]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a7c      	ldr	r2, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b7a      	ldr	r3, [pc, #488]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b77      	ldr	r3, [pc, #476]	; (8002910 <HAL_RCC_OscConfig+0x474>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b74      	ldr	r3, [pc, #464]	; (8002910 <HAL_RCC_OscConfig+0x474>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a73      	ldr	r2, [pc, #460]	; (8002910 <HAL_RCC_OscConfig+0x474>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe ff81 	bl	8001650 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe ff7d 	bl	8001650 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e10c      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_OscConfig+0x474>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x2ea>
 8002778:	4b64      	ldr	r3, [pc, #400]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a63      	ldr	r2, [pc, #396]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
 8002784:	e01c      	b.n	80027c0 <HAL_RCC_OscConfig+0x324>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x30c>
 800278e:	4b5f      	ldr	r3, [pc, #380]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a5e      	ldr	r2, [pc, #376]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	4b5c      	ldr	r3, [pc, #368]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a5b      	ldr	r2, [pc, #364]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0x324>
 80027a8:	4b58      	ldr	r3, [pc, #352]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a57      	ldr	r2, [pc, #348]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	4b55      	ldr	r3, [pc, #340]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a54      	ldr	r2, [pc, #336]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d015      	beq.n	80027f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe ff42 	bl	8001650 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe ff3e 	bl	8001650 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0cb      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	4b49      	ldr	r3, [pc, #292]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ee      	beq.n	80027d0 <HAL_RCC_OscConfig+0x334>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7fe ff2c 	bl	8001650 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe ff28 	bl	8001650 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0b5      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002812:	4b3e      	ldr	r3, [pc, #248]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ee      	bne.n	80027fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	4a38      	ldr	r2, [pc, #224]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a1 	beq.w	800297c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800283a:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCC_OscConfig+0x470>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b08      	cmp	r3, #8
 8002844:	d05c      	beq.n	8002900 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d141      	bne.n	80028d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_RCC_OscConfig+0x478>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fefc 	bl	8001650 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe fef8 	bl	8001650 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e087      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x470>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69da      	ldr	r2, [r3, #28]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	019b      	lsls	r3, r3, #6
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	3b01      	subs	r3, #1
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	491b      	ldr	r1, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x478>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe fed1 	bl	8001650 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe fecd 	bl	8001650 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e05c      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x416>
 80028d0:	e054      	b.n	800297c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_RCC_OscConfig+0x478>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe feba 	bl	8001650 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe feb6 	bl	8001650 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e045      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_OscConfig+0x470>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x444>
 80028fe:	e03d      	b.n	800297c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d107      	bne.n	8002918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e038      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000
 8002914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x4ec>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d028      	beq.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d121      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d11a      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002948:	4013      	ands	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800294e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002950:	4293      	cmp	r3, r2
 8002952:	d111      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	3b01      	subs	r3, #1
 8002962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800

0800298c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0cc      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b68      	ldr	r3, [pc, #416]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d90c      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0b8      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f8:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	494d      	ldr	r1, [pc, #308]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d044      	beq.n	8002aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d119      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e07f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4a:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e06f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e067      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4934      	ldr	r1, [pc, #208]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fde8 	bl	8001650 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fe fde4 	bl	8001650 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e04f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d20c      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e032      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4916      	ldr	r1, [pc, #88]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	490e      	ldr	r1, [pc, #56]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b12:	f000 f821 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	490a      	ldr	r1, [pc, #40]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fd48 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023c00 	.word	0x40023c00
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	08004cc0 	.word	0x08004cc0
 8002b50:	20000028 	.word	0x20000028
 8002b54:	2000002c 	.word	0x2000002c

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b5c:	b090      	sub	sp, #64	; 0x40
 8002b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	637b      	str	r3, [r7, #52]	; 0x34
 8002b64:	2300      	movs	r3, #0
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d00d      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x40>
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	f200 80a1 	bhi.w	8002cc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x34>
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b8a:	e09b      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b90:	e09b      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b92:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b96:	e098      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d028      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bc4:	fb03 f201 	mul.w	r2, r3, r1
 8002bc8:	2300      	movs	r3, #0
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	4a43      	ldr	r2, [pc, #268]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd2:	fba0 1202 	umull	r1, r2, r0, r2
 8002bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd8:	460a      	mov	r2, r1
 8002bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bde:	4413      	add	r3, r2
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	2200      	movs	r2, #0
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	61fa      	str	r2, [r7, #28]
 8002bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bf2:	f7fd ff3b 	bl	8000a6c <__aeabi_uldivmod>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfe:	e053      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	2200      	movs	r2, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	617a      	str	r2, [r7, #20]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c12:	f04f 0b00 	mov.w	fp, #0
 8002c16:	4652      	mov	r2, sl
 8002c18:	465b      	mov	r3, fp
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	0159      	lsls	r1, r3, #5
 8002c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c28:	0150      	lsls	r0, r2, #5
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	ebb2 080a 	subs.w	r8, r2, sl
 8002c32:	eb63 090b 	sbc.w	r9, r3, fp
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c4a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c4e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	00eb      	lsls	r3, r5, #3
 8002c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c60:	00e2      	lsls	r2, r4, #3
 8002c62:	4614      	mov	r4, r2
 8002c64:	461d      	mov	r5, r3
 8002c66:	eb14 030a 	adds.w	r3, r4, sl
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	eb45 030b 	adc.w	r3, r5, fp
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	028b      	lsls	r3, r1, #10
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c88:	4621      	mov	r1, r4
 8002c8a:	028a      	lsls	r2, r1, #10
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	2200      	movs	r2, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	60fa      	str	r2, [r7, #12]
 8002c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c9c:	f7fd fee6 	bl	8000a6c <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3740      	adds	r7, #64	; 0x40
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	017d7840 	.word	0x017d7840

08002ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000028 	.word	0x20000028

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d00:	f7ff fff0 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0a9b      	lsrs	r3, r3, #10
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4903      	ldr	r1, [pc, #12]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	08004cd0 	.word	0x08004cd0

08002d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d28:	f7ff ffdc 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	0b5b      	lsrs	r3, r3, #13
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	4903      	ldr	r1, [pc, #12]	; (8002d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	08004cd0 	.word	0x08004cd0

08002d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e042      	b.n	8002de4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fa98 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	; 0x24
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fd69 	bl	8003868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d175      	bne.n	8002ef8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_UART_Transmit+0x2c>
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e06e      	b.n	8002efa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2221      	movs	r2, #33	; 0x21
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe fc11 	bl	8001650 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	d108      	bne.n	8002e58 <HAL_UART_Transmit+0x6c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e003      	b.n	8002e60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e60:	e02e      	b.n	8002ec0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fb05 	bl	800347c <UART_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03a      	b.n	8002efa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e007      	b.n	8002eb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1cb      	bne.n	8002e62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2140      	movs	r1, #64	; 0x40
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fad1 	bl	800347c <UART_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e006      	b.n	8002efa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b0ba      	sub	sp, #232	; 0xe8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_UART_IRQHandler+0x66>
 8002f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fbc2 	bl	80036ec <UART_Receive_IT>
      return;
 8002f68:	e25b      	b.n	8003422 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80de 	beq.w	8003130 <HAL_UART_IRQHandler+0x22c>
 8002f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80d1 	beq.w	8003130 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_UART_IRQHandler+0xae>
 8002f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_UART_IRQHandler+0xd2>
 8002fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_UART_IRQHandler+0xf6>
 8002fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f043 0204 	orr.w	r2, r3, #4
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d011      	beq.n	800302a <HAL_UART_IRQHandler+0x126>
 8003006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f043 0208 	orr.w	r2, r3, #8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 81f2 	beq.w	8003418 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_UART_IRQHandler+0x14e>
 8003040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fb4d 	bl	80036ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_UART_IRQHandler+0x17a>
 8003076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d04f      	beq.n	800311e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa55 	bl	800352e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d141      	bne.n	8003116 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3314      	adds	r3, #20
 8003098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3314      	adds	r3, #20
 80030ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030ce:	e841 2300 	strex	r3, r2, [r1]
 80030d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1d9      	bne.n	8003092 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d013      	beq.n	800310e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	4a7e      	ldr	r2, [pc, #504]	; (80032e4 <HAL_UART_IRQHandler+0x3e0>)
 80030ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f82b 	bl	800214e <HAL_DMA_Abort_IT>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d016      	beq.n	800312c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003108:	4610      	mov	r0, r2
 800310a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310c:	e00e      	b.n	800312c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f99e 	bl	8003450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003114:	e00a      	b.n	800312c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f99a 	bl	8003450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	e006      	b.n	800312c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f996 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800312a:	e175      	b.n	8003418 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312c:	bf00      	nop
    return;
 800312e:	e173      	b.n	8003418 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 814f 	bne.w	80033d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8148 	beq.w	80033d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8141 	beq.w	80033d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	f040 80b6 	bne.w	80032e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8145 	beq.w	800341c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800319a:	429a      	cmp	r2, r3
 800319c:	f080 813e 	bcs.w	800341c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b2:	f000 8088 	beq.w	80032c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	330c      	adds	r3, #12
 80031de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80031e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1d9      	bne.n	80031b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3314      	adds	r3, #20
 8003222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003226:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800322a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800322e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e1      	bne.n	8003202 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3314      	adds	r3, #20
 8003244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800324e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3314      	adds	r3, #20
 800325e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800326a:	e841 2300 	strex	r3, r2, [r1]
 800326e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1e3      	bne.n	800323e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003296:	f023 0310 	bic.w	r3, r3, #16
 800329a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80032aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e3      	bne.n	8003284 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fed4 	bl	800206e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	4619      	mov	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f8c1 	bl	8003464 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032e2:	e09b      	b.n	800341c <HAL_UART_IRQHandler+0x518>
 80032e4:	080035f5 	.word	0x080035f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 808e 	beq.w	8003420 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8089 	beq.w	8003420 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003332:	647a      	str	r2, [r7, #68]	; 0x44
 8003334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e3      	bne.n	800330e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3314      	adds	r3, #20
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	623b      	str	r3, [r7, #32]
   return(result);
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3314      	adds	r3, #20
 8003366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800336a:	633a      	str	r2, [r7, #48]	; 0x30
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e3      	bne.n	8003346 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	60fb      	str	r3, [r7, #12]
   return(result);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0310 	bic.w	r3, r3, #16
 80033a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033b0:	61fa      	str	r2, [r7, #28]
 80033b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	617b      	str	r3, [r7, #20]
   return(result);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e3      	bne.n	800338c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f847 	bl	8003464 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033d6:	e023      	b.n	8003420 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HAL_UART_IRQHandler+0x4f4>
 80033e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f913 	bl	800361c <UART_Transmit_IT>
    return;
 80033f6:	e014      	b.n	8003422 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <HAL_UART_IRQHandler+0x51e>
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f953 	bl	80036bc <UART_EndTransmit_IT>
    return;
 8003416:	e004      	b.n	8003422 <HAL_UART_IRQHandler+0x51e>
    return;
 8003418:	bf00      	nop
 800341a:	e002      	b.n	8003422 <HAL_UART_IRQHandler+0x51e>
      return;
 800341c:	bf00      	nop
 800341e:	e000      	b.n	8003422 <HAL_UART_IRQHandler+0x51e>
      return;
 8003420:	bf00      	nop
  }
}
 8003422:	37e8      	adds	r7, #232	; 0xe8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348c:	e03b      	b.n	8003506 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d037      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7fe f8db 	bl	8001650 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	6a3a      	ldr	r2, [r7, #32]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <UART_WaitOnFlagUntilTimeout+0x30>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e03a      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d023      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b80      	cmp	r3, #128	; 0x80
 80034c2:	d020      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	d01d      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d116      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f81d 	bl	800352e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2208      	movs	r2, #8
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e00f      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d0b4      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800352e:	b480      	push	{r7}
 8003530:	b095      	sub	sp, #84	; 0x54
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800354c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	330c      	adds	r3, #12
 8003554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003556:	643a      	str	r2, [r7, #64]	; 0x40
 8003558:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800355c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e5      	bne.n	8003536 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3314      	adds	r3, #20
 8003570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	61fb      	str	r3, [r7, #28]
   return(result);
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800358a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e5      	bne.n	800356a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d119      	bne.n	80035da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f023 0310 	bic.w	r3, r3, #16
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035c6:	61ba      	str	r2, [r7, #24]
 80035c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6979      	ldr	r1, [r7, #20]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	613b      	str	r3, [r7, #16]
   return(result);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e5      	bne.n	80035a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035e8:	bf00      	nop
 80035ea:	3754      	adds	r7, #84	; 0x54
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7ff ff1e 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b21      	cmp	r3, #33	; 0x21
 800362e:	d13e      	bne.n	80036ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d114      	bne.n	8003664 <UART_Transmit_IT+0x48>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d110      	bne.n	8003664 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003656:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	1c9a      	adds	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	621a      	str	r2, [r3, #32]
 8003662:	e008      	b.n	8003676 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	1c59      	adds	r1, r3, #1
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6211      	str	r1, [r2, #32]
 800366e:	781a      	ldrb	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29b      	uxth	r3, r3
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4619      	mov	r1, r3
 8003684:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10f      	bne.n	80036aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003698:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fea3 	bl	8003428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08c      	sub	sp, #48	; 0x30
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b22      	cmp	r3, #34	; 0x22
 80036fe:	f040 80ae 	bne.w	800385e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370a:	d117      	bne.n	800373c <UART_Receive_IT+0x50>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d113      	bne.n	800373c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003714:	2300      	movs	r3, #0
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	b29b      	uxth	r3, r3
 8003726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372a:	b29a      	uxth	r2, r3
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	1c9a      	adds	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
 800373a:	e026      	b.n	800378a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d007      	beq.n	8003760 <UART_Receive_IT+0x74>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <UART_Receive_IT+0x82>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	e008      	b.n	8003780 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800377a:	b2da      	uxtb	r2, r3
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29b      	uxth	r3, r3
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4619      	mov	r1, r3
 8003798:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800379a:	2b00      	cmp	r3, #0
 800379c:	d15d      	bne.n	800385a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0220 	bic.w	r2, r2, #32
 80037ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d135      	bne.n	8003850 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	330c      	adds	r3, #12
 80037f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	613b      	str	r3, [r7, #16]
   return(result);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f023 0310 	bic.w	r3, r3, #16
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380a:	623a      	str	r2, [r7, #32]
 800380c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	69f9      	ldr	r1, [r7, #28]
 8003810:	6a3a      	ldr	r2, [r7, #32]
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	61bb      	str	r3, [r7, #24]
   return(result);
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e5      	bne.n	80037ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d10a      	bne.n	8003842 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fe0b 	bl	8003464 <HAL_UARTEx_RxEventCallback>
 800384e:	e002      	b.n	8003856 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fdf3 	bl	800343c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e002      	b.n	8003860 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e000      	b.n	8003860 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	3730      	adds	r7, #48	; 0x30
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386c:	b0c0      	sub	sp, #256	; 0x100
 800386e:	af00      	add	r7, sp, #0
 8003870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	68d9      	ldr	r1, [r3, #12]
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	ea40 0301 	orr.w	r3, r0, r1
 8003890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	431a      	orrs	r2, r3
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038c0:	f021 010c 	bic.w	r1, r1, #12
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038ce:	430b      	orrs	r3, r1
 80038d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	6999      	ldr	r1, [r3, #24]
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	ea40 0301 	orr.w	r3, r0, r1
 80038ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b8f      	ldr	r3, [pc, #572]	; (8003b34 <UART_SetConfig+0x2cc>)
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d005      	beq.n	8003908 <UART_SetConfig+0xa0>
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b8d      	ldr	r3, [pc, #564]	; (8003b38 <UART_SetConfig+0x2d0>)
 8003904:	429a      	cmp	r2, r3
 8003906:	d104      	bne.n	8003912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7ff fa0c 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 800390c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003910:	e003      	b.n	800391a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003912:	f7ff f9f3 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8003916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003924:	f040 810c 	bne.w	8003b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800393a:	4622      	mov	r2, r4
 800393c:	462b      	mov	r3, r5
 800393e:	1891      	adds	r1, r2, r2
 8003940:	65b9      	str	r1, [r7, #88]	; 0x58
 8003942:	415b      	adcs	r3, r3
 8003944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800394a:	4621      	mov	r1, r4
 800394c:	eb12 0801 	adds.w	r8, r2, r1
 8003950:	4629      	mov	r1, r5
 8003952:	eb43 0901 	adc.w	r9, r3, r1
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396a:	4690      	mov	r8, r2
 800396c:	4699      	mov	r9, r3
 800396e:	4623      	mov	r3, r4
 8003970:	eb18 0303 	adds.w	r3, r8, r3
 8003974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003978:	462b      	mov	r3, r5
 800397a:	eb49 0303 	adc.w	r3, r9, r3
 800397e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800398e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003996:	460b      	mov	r3, r1
 8003998:	18db      	adds	r3, r3, r3
 800399a:	653b      	str	r3, [r7, #80]	; 0x50
 800399c:	4613      	mov	r3, r2
 800399e:	eb42 0303 	adc.w	r3, r2, r3
 80039a2:	657b      	str	r3, [r7, #84]	; 0x54
 80039a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039ac:	f7fd f85e 	bl	8000a6c <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <UART_SetConfig+0x2d4>)
 80039b6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	011c      	lsls	r4, r3, #4
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80039d8:	415b      	adcs	r3, r3
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039e0:	4641      	mov	r1, r8
 80039e2:	eb12 0a01 	adds.w	sl, r2, r1
 80039e6:	4649      	mov	r1, r9
 80039e8:	eb43 0b01 	adc.w	fp, r3, r1
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a00:	4692      	mov	sl, r2
 8003a02:	469b      	mov	fp, r3
 8003a04:	4643      	mov	r3, r8
 8003a06:	eb1a 0303 	adds.w	r3, sl, r3
 8003a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	eb4b 0303 	adc.w	r3, fp, r3
 8003a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	18db      	adds	r3, r3, r3
 8003a30:	643b      	str	r3, [r7, #64]	; 0x40
 8003a32:	4613      	mov	r3, r2
 8003a34:	eb42 0303 	adc.w	r3, r2, r3
 8003a38:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a42:	f7fd f813 	bl	8000a6c <__aeabi_uldivmod>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2264      	movs	r2, #100	; 0x64
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	1acb      	subs	r3, r1, r3
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a62:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003a64:	fba3 2302 	umull	r2, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a70:	441c      	add	r4, r3
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a84:	4642      	mov	r2, r8
 8003a86:	464b      	mov	r3, r9
 8003a88:	1891      	adds	r1, r2, r2
 8003a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a8c:	415b      	adcs	r3, r3
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a94:	4641      	mov	r1, r8
 8003a96:	1851      	adds	r1, r2, r1
 8003a98:	6339      	str	r1, [r7, #48]	; 0x30
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	414b      	adcs	r3, r1
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003aac:	4659      	mov	r1, fp
 8003aae:	00cb      	lsls	r3, r1, #3
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	00ca      	lsls	r2, r1, #3
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	189b      	adds	r3, r3, r2
 8003ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ac8:	464b      	mov	r3, r9
 8003aca:	460a      	mov	r2, r1
 8003acc:	eb42 0303 	adc.w	r3, r2, r3
 8003ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ae8:	460b      	mov	r3, r1
 8003aea:	18db      	adds	r3, r3, r3
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aee:	4613      	mov	r3, r2
 8003af0:	eb42 0303 	adc.w	r3, r2, r3
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003afe:	f7fc ffb5 	bl	8000a6c <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	; 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	3332      	adds	r3, #50	; 0x32
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	f003 0207 	and.w	r2, r3, #7
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4422      	add	r2, r4
 8003b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b30:	e106      	b.n	8003d40 <UART_SetConfig+0x4d8>
 8003b32:	bf00      	nop
 8003b34:	40011000 	.word	0x40011000
 8003b38:	40011400 	.word	0x40011400
 8003b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b52:	4642      	mov	r2, r8
 8003b54:	464b      	mov	r3, r9
 8003b56:	1891      	adds	r1, r2, r2
 8003b58:	6239      	str	r1, [r7, #32]
 8003b5a:	415b      	adcs	r3, r3
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b62:	4641      	mov	r1, r8
 8003b64:	1854      	adds	r4, r2, r1
 8003b66:	4649      	mov	r1, r9
 8003b68:	eb43 0501 	adc.w	r5, r3, r1
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	00eb      	lsls	r3, r5, #3
 8003b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b7a:	00e2      	lsls	r2, r4, #3
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	4643      	mov	r3, r8
 8003b82:	18e3      	adds	r3, r4, r3
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b88:	464b      	mov	r3, r9
 8003b8a:	eb45 0303 	adc.w	r3, r5, r3
 8003b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bae:	4629      	mov	r1, r5
 8003bb0:	008b      	lsls	r3, r1, #2
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb8:	4621      	mov	r1, r4
 8003bba:	008a      	lsls	r2, r1, #2
 8003bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bc0:	f7fc ff54 	bl	8000a6c <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4b60      	ldr	r3, [pc, #384]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003bca:	fba3 2302 	umull	r2, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	011c      	lsls	r4, r3, #4
 8003bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003be4:	4642      	mov	r2, r8
 8003be6:	464b      	mov	r3, r9
 8003be8:	1891      	adds	r1, r2, r2
 8003bea:	61b9      	str	r1, [r7, #24]
 8003bec:	415b      	adcs	r3, r3
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	1851      	adds	r1, r2, r1
 8003bf8:	6139      	str	r1, [r7, #16]
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	414b      	adcs	r3, r1
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	00cb      	lsls	r3, r1, #3
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c16:	4651      	mov	r1, sl
 8003c18:	00ca      	lsls	r2, r1, #3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4642      	mov	r2, r8
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c28:	464b      	mov	r3, r9
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	eb42 0303 	adc.w	r3, r2, r3
 8003c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	008b      	lsls	r3, r1, #2
 8003c50:	4641      	mov	r1, r8
 8003c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c56:	4641      	mov	r1, r8
 8003c58:	008a      	lsls	r2, r1, #2
 8003c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c5e:	f7fc ff05 	bl	8000a6c <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	4b38      	ldr	r3, [pc, #224]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2264      	movs	r2, #100	; 0x64
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	1acb      	subs	r3, r1, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	4a33      	ldr	r2, [pc, #204]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	441c      	add	r4, r3
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	673b      	str	r3, [r7, #112]	; 0x70
 8003c92:	677a      	str	r2, [r7, #116]	; 0x74
 8003c94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c98:	4642      	mov	r2, r8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca8:	4641      	mov	r1, r8
 8003caa:	1851      	adds	r1, r2, r1
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	4649      	mov	r1, r9
 8003cb0:	414b      	adcs	r3, r1
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	00cb      	lsls	r3, r1, #3
 8003cc4:	4651      	mov	r1, sl
 8003cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cca:	4651      	mov	r1, sl
 8003ccc:	00ca      	lsls	r2, r1, #3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	189b      	adds	r3, r3, r2
 8003cd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cda:	464b      	mov	r3, r9
 8003cdc:	460a      	mov	r2, r1
 8003cde:	eb42 0303 	adc.w	r3, r2, r3
 8003ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	663b      	str	r3, [r7, #96]	; 0x60
 8003cee:	667a      	str	r2, [r7, #100]	; 0x64
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	008b      	lsls	r3, r1, #2
 8003d00:	4641      	mov	r1, r8
 8003d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d06:	4641      	mov	r1, r8
 8003d08:	008a      	lsls	r2, r1, #2
 8003d0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d0e:	f7fc fead 	bl	8000a6c <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003d18:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	2164      	movs	r1, #100	; 0x64
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	3332      	adds	r3, #50	; 0x32
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	f003 020f 	and.w	r2, r3, #15
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4422      	add	r2, r4
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d46:	46bd      	mov	sp, r7
 8003d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d4c:	51eb851f 	.word	0x51eb851f

08003d50 <std>:
 8003d50:	2300      	movs	r3, #0
 8003d52:	b510      	push	{r4, lr}
 8003d54:	4604      	mov	r4, r0
 8003d56:	e9c0 3300 	strd	r3, r3, [r0]
 8003d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d5e:	6083      	str	r3, [r0, #8]
 8003d60:	8181      	strh	r1, [r0, #12]
 8003d62:	6643      	str	r3, [r0, #100]	; 0x64
 8003d64:	81c2      	strh	r2, [r0, #14]
 8003d66:	6183      	str	r3, [r0, #24]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	305c      	adds	r0, #92	; 0x5c
 8003d6e:	f000 f9f7 	bl	8004160 <memset>
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <std+0x58>)
 8003d74:	6263      	str	r3, [r4, #36]	; 0x24
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <std+0x5c>)
 8003d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <std+0x60>)
 8003d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <std+0x64>)
 8003d80:	6323      	str	r3, [r4, #48]	; 0x30
 8003d82:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <std+0x68>)
 8003d84:	6224      	str	r4, [r4, #32]
 8003d86:	429c      	cmp	r4, r3
 8003d88:	d006      	beq.n	8003d98 <std+0x48>
 8003d8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003d8e:	4294      	cmp	r4, r2
 8003d90:	d002      	beq.n	8003d98 <std+0x48>
 8003d92:	33d0      	adds	r3, #208	; 0xd0
 8003d94:	429c      	cmp	r4, r3
 8003d96:	d105      	bne.n	8003da4 <std+0x54>
 8003d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da0:	f000 ba56 	b.w	8004250 <__retarget_lock_init_recursive>
 8003da4:	bd10      	pop	{r4, pc}
 8003da6:	bf00      	nop
 8003da8:	08003fb1 	.word	0x08003fb1
 8003dac:	08003fd3 	.word	0x08003fd3
 8003db0:	0800400b 	.word	0x0800400b
 8003db4:	0800402f 	.word	0x0800402f
 8003db8:	20000218 	.word	0x20000218

08003dbc <stdio_exit_handler>:
 8003dbc:	4a02      	ldr	r2, [pc, #8]	; (8003dc8 <stdio_exit_handler+0xc>)
 8003dbe:	4903      	ldr	r1, [pc, #12]	; (8003dcc <stdio_exit_handler+0x10>)
 8003dc0:	4803      	ldr	r0, [pc, #12]	; (8003dd0 <stdio_exit_handler+0x14>)
 8003dc2:	f000 b869 	b.w	8003e98 <_fwalk_sglue>
 8003dc6:	bf00      	nop
 8003dc8:	20000034 	.word	0x20000034
 8003dcc:	08004afd 	.word	0x08004afd
 8003dd0:	20000040 	.word	0x20000040

08003dd4 <cleanup_stdio>:
 8003dd4:	6841      	ldr	r1, [r0, #4]
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <cleanup_stdio+0x34>)
 8003dd8:	4299      	cmp	r1, r3
 8003dda:	b510      	push	{r4, lr}
 8003ddc:	4604      	mov	r4, r0
 8003dde:	d001      	beq.n	8003de4 <cleanup_stdio+0x10>
 8003de0:	f000 fe8c 	bl	8004afc <_fflush_r>
 8003de4:	68a1      	ldr	r1, [r4, #8]
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <cleanup_stdio+0x38>)
 8003de8:	4299      	cmp	r1, r3
 8003dea:	d002      	beq.n	8003df2 <cleanup_stdio+0x1e>
 8003dec:	4620      	mov	r0, r4
 8003dee:	f000 fe85 	bl	8004afc <_fflush_r>
 8003df2:	68e1      	ldr	r1, [r4, #12]
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <cleanup_stdio+0x3c>)
 8003df6:	4299      	cmp	r1, r3
 8003df8:	d004      	beq.n	8003e04 <cleanup_stdio+0x30>
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e00:	f000 be7c 	b.w	8004afc <_fflush_r>
 8003e04:	bd10      	pop	{r4, pc}
 8003e06:	bf00      	nop
 8003e08:	20000218 	.word	0x20000218
 8003e0c:	20000280 	.word	0x20000280
 8003e10:	200002e8 	.word	0x200002e8

08003e14 <global_stdio_init.part.0>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <global_stdio_init.part.0+0x30>)
 8003e18:	4c0b      	ldr	r4, [pc, #44]	; (8003e48 <global_stdio_init.part.0+0x34>)
 8003e1a:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <global_stdio_init.part.0+0x38>)
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	4620      	mov	r0, r4
 8003e20:	2200      	movs	r2, #0
 8003e22:	2104      	movs	r1, #4
 8003e24:	f7ff ff94 	bl	8003d50 <std>
 8003e28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	2109      	movs	r1, #9
 8003e30:	f7ff ff8e 	bl	8003d50 <std>
 8003e34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003e38:	2202      	movs	r2, #2
 8003e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e3e:	2112      	movs	r1, #18
 8003e40:	f7ff bf86 	b.w	8003d50 <std>
 8003e44:	20000350 	.word	0x20000350
 8003e48:	20000218 	.word	0x20000218
 8003e4c:	08003dbd 	.word	0x08003dbd

08003e50 <__sfp_lock_acquire>:
 8003e50:	4801      	ldr	r0, [pc, #4]	; (8003e58 <__sfp_lock_acquire+0x8>)
 8003e52:	f000 b9fe 	b.w	8004252 <__retarget_lock_acquire_recursive>
 8003e56:	bf00      	nop
 8003e58:	20000359 	.word	0x20000359

08003e5c <__sfp_lock_release>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	; (8003e64 <__sfp_lock_release+0x8>)
 8003e5e:	f000 b9f9 	b.w	8004254 <__retarget_lock_release_recursive>
 8003e62:	bf00      	nop
 8003e64:	20000359 	.word	0x20000359

08003e68 <__sinit>:
 8003e68:	b510      	push	{r4, lr}
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	f7ff fff0 	bl	8003e50 <__sfp_lock_acquire>
 8003e70:	6a23      	ldr	r3, [r4, #32]
 8003e72:	b11b      	cbz	r3, 8003e7c <__sinit+0x14>
 8003e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e78:	f7ff bff0 	b.w	8003e5c <__sfp_lock_release>
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <__sinit+0x28>)
 8003e7e:	6223      	str	r3, [r4, #32]
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <__sinit+0x2c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f5      	bne.n	8003e74 <__sinit+0xc>
 8003e88:	f7ff ffc4 	bl	8003e14 <global_stdio_init.part.0>
 8003e8c:	e7f2      	b.n	8003e74 <__sinit+0xc>
 8003e8e:	bf00      	nop
 8003e90:	08003dd5 	.word	0x08003dd5
 8003e94:	20000350 	.word	0x20000350

08003e98 <_fwalk_sglue>:
 8003e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e9c:	4607      	mov	r7, r0
 8003e9e:	4688      	mov	r8, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ea8:	f1b9 0901 	subs.w	r9, r9, #1
 8003eac:	d505      	bpl.n	8003eba <_fwalk_sglue+0x22>
 8003eae:	6824      	ldr	r4, [r4, #0]
 8003eb0:	2c00      	cmp	r4, #0
 8003eb2:	d1f7      	bne.n	8003ea4 <_fwalk_sglue+0xc>
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eba:	89ab      	ldrh	r3, [r5, #12]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d907      	bls.n	8003ed0 <_fwalk_sglue+0x38>
 8003ec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	d003      	beq.n	8003ed0 <_fwalk_sglue+0x38>
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4638      	mov	r0, r7
 8003ecc:	47c0      	blx	r8
 8003ece:	4306      	orrs	r6, r0
 8003ed0:	3568      	adds	r5, #104	; 0x68
 8003ed2:	e7e9      	b.n	8003ea8 <_fwalk_sglue+0x10>

08003ed4 <iprintf>:
 8003ed4:	b40f      	push	{r0, r1, r2, r3}
 8003ed6:	b507      	push	{r0, r1, r2, lr}
 8003ed8:	4906      	ldr	r1, [pc, #24]	; (8003ef4 <iprintf+0x20>)
 8003eda:	ab04      	add	r3, sp, #16
 8003edc:	6808      	ldr	r0, [r1, #0]
 8003ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee2:	6881      	ldr	r1, [r0, #8]
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	f000 fad9 	bl	800449c <_vfiprintf_r>
 8003eea:	b003      	add	sp, #12
 8003eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ef0:	b004      	add	sp, #16
 8003ef2:	4770      	bx	lr
 8003ef4:	2000008c 	.word	0x2000008c

08003ef8 <_puts_r>:
 8003ef8:	6a03      	ldr	r3, [r0, #32]
 8003efa:	b570      	push	{r4, r5, r6, lr}
 8003efc:	6884      	ldr	r4, [r0, #8]
 8003efe:	4605      	mov	r5, r0
 8003f00:	460e      	mov	r6, r1
 8003f02:	b90b      	cbnz	r3, 8003f08 <_puts_r+0x10>
 8003f04:	f7ff ffb0 	bl	8003e68 <__sinit>
 8003f08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f0a:	07db      	lsls	r3, r3, #31
 8003f0c:	d405      	bmi.n	8003f1a <_puts_r+0x22>
 8003f0e:	89a3      	ldrh	r3, [r4, #12]
 8003f10:	0598      	lsls	r0, r3, #22
 8003f12:	d402      	bmi.n	8003f1a <_puts_r+0x22>
 8003f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f16:	f000 f99c 	bl	8004252 <__retarget_lock_acquire_recursive>
 8003f1a:	89a3      	ldrh	r3, [r4, #12]
 8003f1c:	0719      	lsls	r1, r3, #28
 8003f1e:	d513      	bpl.n	8003f48 <_puts_r+0x50>
 8003f20:	6923      	ldr	r3, [r4, #16]
 8003f22:	b18b      	cbz	r3, 8003f48 <_puts_r+0x50>
 8003f24:	3e01      	subs	r6, #1
 8003f26:	68a3      	ldr	r3, [r4, #8]
 8003f28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	60a3      	str	r3, [r4, #8]
 8003f30:	b9e9      	cbnz	r1, 8003f6e <_puts_r+0x76>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	da2e      	bge.n	8003f94 <_puts_r+0x9c>
 8003f36:	4622      	mov	r2, r4
 8003f38:	210a      	movs	r1, #10
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f000 f87b 	bl	8004036 <__swbuf_r>
 8003f40:	3001      	adds	r0, #1
 8003f42:	d007      	beq.n	8003f54 <_puts_r+0x5c>
 8003f44:	250a      	movs	r5, #10
 8003f46:	e007      	b.n	8003f58 <_puts_r+0x60>
 8003f48:	4621      	mov	r1, r4
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f000 f8b0 	bl	80040b0 <__swsetup_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d0e7      	beq.n	8003f24 <_puts_r+0x2c>
 8003f54:	f04f 35ff 	mov.w	r5, #4294967295
 8003f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f5a:	07da      	lsls	r2, r3, #31
 8003f5c:	d405      	bmi.n	8003f6a <_puts_r+0x72>
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	059b      	lsls	r3, r3, #22
 8003f62:	d402      	bmi.n	8003f6a <_puts_r+0x72>
 8003f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f66:	f000 f975 	bl	8004254 <__retarget_lock_release_recursive>
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	da04      	bge.n	8003f7c <_puts_r+0x84>
 8003f72:	69a2      	ldr	r2, [r4, #24]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	dc06      	bgt.n	8003f86 <_puts_r+0x8e>
 8003f78:	290a      	cmp	r1, #10
 8003f7a:	d004      	beq.n	8003f86 <_puts_r+0x8e>
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	6022      	str	r2, [r4, #0]
 8003f82:	7019      	strb	r1, [r3, #0]
 8003f84:	e7cf      	b.n	8003f26 <_puts_r+0x2e>
 8003f86:	4622      	mov	r2, r4
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f000 f854 	bl	8004036 <__swbuf_r>
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d1c9      	bne.n	8003f26 <_puts_r+0x2e>
 8003f92:	e7df      	b.n	8003f54 <_puts_r+0x5c>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	250a      	movs	r5, #10
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	6022      	str	r2, [r4, #0]
 8003f9c:	701d      	strb	r5, [r3, #0]
 8003f9e:	e7db      	b.n	8003f58 <_puts_r+0x60>

08003fa0 <puts>:
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <puts+0xc>)
 8003fa2:	4601      	mov	r1, r0
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	f7ff bfa7 	b.w	8003ef8 <_puts_r>
 8003faa:	bf00      	nop
 8003fac:	2000008c 	.word	0x2000008c

08003fb0 <__sread>:
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb8:	f000 f8fc 	bl	80041b4 <_read_r>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	bfab      	itete	ge
 8003fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8003fc4:	181b      	addge	r3, r3, r0
 8003fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fca:	bfac      	ite	ge
 8003fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fce:	81a3      	strhlt	r3, [r4, #12]
 8003fd0:	bd10      	pop	{r4, pc}

08003fd2 <__swrite>:
 8003fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd6:	461f      	mov	r7, r3
 8003fd8:	898b      	ldrh	r3, [r1, #12]
 8003fda:	05db      	lsls	r3, r3, #23
 8003fdc:	4605      	mov	r5, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	4616      	mov	r6, r2
 8003fe2:	d505      	bpl.n	8003ff0 <__swrite+0x1e>
 8003fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe8:	2302      	movs	r3, #2
 8003fea:	2200      	movs	r2, #0
 8003fec:	f000 f8d0 	bl	8004190 <_lseek_r>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	4632      	mov	r2, r6
 8003ffe:	463b      	mov	r3, r7
 8004000:	4628      	mov	r0, r5
 8004002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004006:	f000 b8e7 	b.w	80041d8 <_write_r>

0800400a <__sseek>:
 800400a:	b510      	push	{r4, lr}
 800400c:	460c      	mov	r4, r1
 800400e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004012:	f000 f8bd 	bl	8004190 <_lseek_r>
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	bf15      	itete	ne
 800401c:	6560      	strne	r0, [r4, #84]	; 0x54
 800401e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004026:	81a3      	strheq	r3, [r4, #12]
 8004028:	bf18      	it	ne
 800402a:	81a3      	strhne	r3, [r4, #12]
 800402c:	bd10      	pop	{r4, pc}

0800402e <__sclose>:
 800402e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004032:	f000 b89d 	b.w	8004170 <_close_r>

08004036 <__swbuf_r>:
 8004036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004038:	460e      	mov	r6, r1
 800403a:	4614      	mov	r4, r2
 800403c:	4605      	mov	r5, r0
 800403e:	b118      	cbz	r0, 8004048 <__swbuf_r+0x12>
 8004040:	6a03      	ldr	r3, [r0, #32]
 8004042:	b90b      	cbnz	r3, 8004048 <__swbuf_r+0x12>
 8004044:	f7ff ff10 	bl	8003e68 <__sinit>
 8004048:	69a3      	ldr	r3, [r4, #24]
 800404a:	60a3      	str	r3, [r4, #8]
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	071a      	lsls	r2, r3, #28
 8004050:	d525      	bpl.n	800409e <__swbuf_r+0x68>
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	b31b      	cbz	r3, 800409e <__swbuf_r+0x68>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	1a98      	subs	r0, r3, r2
 800405c:	6963      	ldr	r3, [r4, #20]
 800405e:	b2f6      	uxtb	r6, r6
 8004060:	4283      	cmp	r3, r0
 8004062:	4637      	mov	r7, r6
 8004064:	dc04      	bgt.n	8004070 <__swbuf_r+0x3a>
 8004066:	4621      	mov	r1, r4
 8004068:	4628      	mov	r0, r5
 800406a:	f000 fd47 	bl	8004afc <_fflush_r>
 800406e:	b9e0      	cbnz	r0, 80040aa <__swbuf_r+0x74>
 8004070:	68a3      	ldr	r3, [r4, #8]
 8004072:	3b01      	subs	r3, #1
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	6022      	str	r2, [r4, #0]
 800407c:	701e      	strb	r6, [r3, #0]
 800407e:	6962      	ldr	r2, [r4, #20]
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	429a      	cmp	r2, r3
 8004084:	d004      	beq.n	8004090 <__swbuf_r+0x5a>
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	07db      	lsls	r3, r3, #31
 800408a:	d506      	bpl.n	800409a <__swbuf_r+0x64>
 800408c:	2e0a      	cmp	r6, #10
 800408e:	d104      	bne.n	800409a <__swbuf_r+0x64>
 8004090:	4621      	mov	r1, r4
 8004092:	4628      	mov	r0, r5
 8004094:	f000 fd32 	bl	8004afc <_fflush_r>
 8004098:	b938      	cbnz	r0, 80040aa <__swbuf_r+0x74>
 800409a:	4638      	mov	r0, r7
 800409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800409e:	4621      	mov	r1, r4
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 f805 	bl	80040b0 <__swsetup_r>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d0d5      	beq.n	8004056 <__swbuf_r+0x20>
 80040aa:	f04f 37ff 	mov.w	r7, #4294967295
 80040ae:	e7f4      	b.n	800409a <__swbuf_r+0x64>

080040b0 <__swsetup_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <__swsetup_r+0xac>)
 80040b4:	4605      	mov	r5, r0
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	460c      	mov	r4, r1
 80040ba:	b118      	cbz	r0, 80040c4 <__swsetup_r+0x14>
 80040bc:	6a03      	ldr	r3, [r0, #32]
 80040be:	b90b      	cbnz	r3, 80040c4 <__swsetup_r+0x14>
 80040c0:	f7ff fed2 	bl	8003e68 <__sinit>
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040ca:	0718      	lsls	r0, r3, #28
 80040cc:	d422      	bmi.n	8004114 <__swsetup_r+0x64>
 80040ce:	06d9      	lsls	r1, r3, #27
 80040d0:	d407      	bmi.n	80040e2 <__swsetup_r+0x32>
 80040d2:	2309      	movs	r3, #9
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040da:	81a3      	strh	r3, [r4, #12]
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	e034      	b.n	800414c <__swsetup_r+0x9c>
 80040e2:	0758      	lsls	r0, r3, #29
 80040e4:	d512      	bpl.n	800410c <__swsetup_r+0x5c>
 80040e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e8:	b141      	cbz	r1, 80040fc <__swsetup_r+0x4c>
 80040ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ee:	4299      	cmp	r1, r3
 80040f0:	d002      	beq.n	80040f8 <__swsetup_r+0x48>
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 f8b0 	bl	8004258 <_free_r>
 80040f8:	2300      	movs	r3, #0
 80040fa:	6363      	str	r3, [r4, #52]	; 0x34
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	2300      	movs	r3, #0
 8004106:	6063      	str	r3, [r4, #4]
 8004108:	6923      	ldr	r3, [r4, #16]
 800410a:	6023      	str	r3, [r4, #0]
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f043 0308 	orr.w	r3, r3, #8
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	b94b      	cbnz	r3, 800412c <__swsetup_r+0x7c>
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800411e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004122:	d003      	beq.n	800412c <__swsetup_r+0x7c>
 8004124:	4621      	mov	r1, r4
 8004126:	4628      	mov	r0, r5
 8004128:	f000 fd36 	bl	8004b98 <__smakebuf_r>
 800412c:	89a0      	ldrh	r0, [r4, #12]
 800412e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004132:	f010 0301 	ands.w	r3, r0, #1
 8004136:	d00a      	beq.n	800414e <__swsetup_r+0x9e>
 8004138:	2300      	movs	r3, #0
 800413a:	60a3      	str	r3, [r4, #8]
 800413c:	6963      	ldr	r3, [r4, #20]
 800413e:	425b      	negs	r3, r3
 8004140:	61a3      	str	r3, [r4, #24]
 8004142:	6923      	ldr	r3, [r4, #16]
 8004144:	b943      	cbnz	r3, 8004158 <__swsetup_r+0xa8>
 8004146:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800414a:	d1c4      	bne.n	80040d6 <__swsetup_r+0x26>
 800414c:	bd38      	pop	{r3, r4, r5, pc}
 800414e:	0781      	lsls	r1, r0, #30
 8004150:	bf58      	it	pl
 8004152:	6963      	ldrpl	r3, [r4, #20]
 8004154:	60a3      	str	r3, [r4, #8]
 8004156:	e7f4      	b.n	8004142 <__swsetup_r+0x92>
 8004158:	2000      	movs	r0, #0
 800415a:	e7f7      	b.n	800414c <__swsetup_r+0x9c>
 800415c:	2000008c 	.word	0x2000008c

08004160 <memset>:
 8004160:	4402      	add	r2, r0
 8004162:	4603      	mov	r3, r0
 8004164:	4293      	cmp	r3, r2
 8004166:	d100      	bne.n	800416a <memset+0xa>
 8004168:	4770      	bx	lr
 800416a:	f803 1b01 	strb.w	r1, [r3], #1
 800416e:	e7f9      	b.n	8004164 <memset+0x4>

08004170 <_close_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4d06      	ldr	r5, [pc, #24]	; (800418c <_close_r+0x1c>)
 8004174:	2300      	movs	r3, #0
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	602b      	str	r3, [r5, #0]
 800417c:	f7fd f935 	bl	80013ea <_close>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_close_r+0x1a>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_close_r+0x1a>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000354 	.word	0x20000354

08004190 <_lseek_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4d07      	ldr	r5, [pc, #28]	; (80041b0 <_lseek_r+0x20>)
 8004194:	4604      	mov	r4, r0
 8004196:	4608      	mov	r0, r1
 8004198:	4611      	mov	r1, r2
 800419a:	2200      	movs	r2, #0
 800419c:	602a      	str	r2, [r5, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	f7fd f94a 	bl	8001438 <_lseek>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_lseek_r+0x1e>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_lseek_r+0x1e>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	20000354 	.word	0x20000354

080041b4 <_read_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d07      	ldr	r5, [pc, #28]	; (80041d4 <_read_r+0x20>)
 80041b8:	4604      	mov	r4, r0
 80041ba:	4608      	mov	r0, r1
 80041bc:	4611      	mov	r1, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	602a      	str	r2, [r5, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7fd f8f4 	bl	80013b0 <_read>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_read_r+0x1e>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_read_r+0x1e>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000354 	.word	0x20000354

080041d8 <_write_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d07      	ldr	r5, [pc, #28]	; (80041f8 <_write_r+0x20>)
 80041dc:	4604      	mov	r4, r0
 80041de:	4608      	mov	r0, r1
 80041e0:	4611      	mov	r1, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	602a      	str	r2, [r5, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7fd f98c 	bl	8001504 <_write>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_write_r+0x1e>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_write_r+0x1e>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	20000354 	.word	0x20000354

080041fc <__errno>:
 80041fc:	4b01      	ldr	r3, [pc, #4]	; (8004204 <__errno+0x8>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000008c 	.word	0x2000008c

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4d0d      	ldr	r5, [pc, #52]	; (8004240 <__libc_init_array+0x38>)
 800420c:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 800420e:	1b64      	subs	r4, r4, r5
 8004210:	10a4      	asrs	r4, r4, #2
 8004212:	2600      	movs	r6, #0
 8004214:	42a6      	cmp	r6, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	4d0b      	ldr	r5, [pc, #44]	; (8004248 <__libc_init_array+0x40>)
 800421a:	4c0c      	ldr	r4, [pc, #48]	; (800424c <__libc_init_array+0x44>)
 800421c:	f000 fd2a 	bl	8004c74 <_init>
 8004220:	1b64      	subs	r4, r4, r5
 8004222:	10a4      	asrs	r4, r4, #2
 8004224:	2600      	movs	r6, #0
 8004226:	42a6      	cmp	r6, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004230:	4798      	blx	r3
 8004232:	3601      	adds	r6, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	f855 3b04 	ldr.w	r3, [r5], #4
 800423a:	4798      	blx	r3
 800423c:	3601      	adds	r6, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	08004d14 	.word	0x08004d14
 8004244:	08004d14 	.word	0x08004d14
 8004248:	08004d14 	.word	0x08004d14
 800424c:	08004d18 	.word	0x08004d18

08004250 <__retarget_lock_init_recursive>:
 8004250:	4770      	bx	lr

08004252 <__retarget_lock_acquire_recursive>:
 8004252:	4770      	bx	lr

08004254 <__retarget_lock_release_recursive>:
 8004254:	4770      	bx	lr
	...

08004258 <_free_r>:
 8004258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800425a:	2900      	cmp	r1, #0
 800425c:	d044      	beq.n	80042e8 <_free_r+0x90>
 800425e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004262:	9001      	str	r0, [sp, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f1a1 0404 	sub.w	r4, r1, #4
 800426a:	bfb8      	it	lt
 800426c:	18e4      	addlt	r4, r4, r3
 800426e:	f000 f8df 	bl	8004430 <__malloc_lock>
 8004272:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <_free_r+0x94>)
 8004274:	9801      	ldr	r0, [sp, #4]
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	b933      	cbnz	r3, 8004288 <_free_r+0x30>
 800427a:	6063      	str	r3, [r4, #4]
 800427c:	6014      	str	r4, [r2, #0]
 800427e:	b003      	add	sp, #12
 8004280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004284:	f000 b8da 	b.w	800443c <__malloc_unlock>
 8004288:	42a3      	cmp	r3, r4
 800428a:	d908      	bls.n	800429e <_free_r+0x46>
 800428c:	6825      	ldr	r5, [r4, #0]
 800428e:	1961      	adds	r1, r4, r5
 8004290:	428b      	cmp	r3, r1
 8004292:	bf01      	itttt	eq
 8004294:	6819      	ldreq	r1, [r3, #0]
 8004296:	685b      	ldreq	r3, [r3, #4]
 8004298:	1949      	addeq	r1, r1, r5
 800429a:	6021      	streq	r1, [r4, #0]
 800429c:	e7ed      	b.n	800427a <_free_r+0x22>
 800429e:	461a      	mov	r2, r3
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	b10b      	cbz	r3, 80042a8 <_free_r+0x50>
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	d9fa      	bls.n	800429e <_free_r+0x46>
 80042a8:	6811      	ldr	r1, [r2, #0]
 80042aa:	1855      	adds	r5, r2, r1
 80042ac:	42a5      	cmp	r5, r4
 80042ae:	d10b      	bne.n	80042c8 <_free_r+0x70>
 80042b0:	6824      	ldr	r4, [r4, #0]
 80042b2:	4421      	add	r1, r4
 80042b4:	1854      	adds	r4, r2, r1
 80042b6:	42a3      	cmp	r3, r4
 80042b8:	6011      	str	r1, [r2, #0]
 80042ba:	d1e0      	bne.n	800427e <_free_r+0x26>
 80042bc:	681c      	ldr	r4, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	6053      	str	r3, [r2, #4]
 80042c2:	440c      	add	r4, r1
 80042c4:	6014      	str	r4, [r2, #0]
 80042c6:	e7da      	b.n	800427e <_free_r+0x26>
 80042c8:	d902      	bls.n	80042d0 <_free_r+0x78>
 80042ca:	230c      	movs	r3, #12
 80042cc:	6003      	str	r3, [r0, #0]
 80042ce:	e7d6      	b.n	800427e <_free_r+0x26>
 80042d0:	6825      	ldr	r5, [r4, #0]
 80042d2:	1961      	adds	r1, r4, r5
 80042d4:	428b      	cmp	r3, r1
 80042d6:	bf04      	itt	eq
 80042d8:	6819      	ldreq	r1, [r3, #0]
 80042da:	685b      	ldreq	r3, [r3, #4]
 80042dc:	6063      	str	r3, [r4, #4]
 80042de:	bf04      	itt	eq
 80042e0:	1949      	addeq	r1, r1, r5
 80042e2:	6021      	streq	r1, [r4, #0]
 80042e4:	6054      	str	r4, [r2, #4]
 80042e6:	e7ca      	b.n	800427e <_free_r+0x26>
 80042e8:	b003      	add	sp, #12
 80042ea:	bd30      	pop	{r4, r5, pc}
 80042ec:	2000035c 	.word	0x2000035c

080042f0 <sbrk_aligned>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	4e0e      	ldr	r6, [pc, #56]	; (800432c <sbrk_aligned+0x3c>)
 80042f4:	460c      	mov	r4, r1
 80042f6:	6831      	ldr	r1, [r6, #0]
 80042f8:	4605      	mov	r5, r0
 80042fa:	b911      	cbnz	r1, 8004302 <sbrk_aligned+0x12>
 80042fc:	f000 fcaa 	bl	8004c54 <_sbrk_r>
 8004300:	6030      	str	r0, [r6, #0]
 8004302:	4621      	mov	r1, r4
 8004304:	4628      	mov	r0, r5
 8004306:	f000 fca5 	bl	8004c54 <_sbrk_r>
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	d00a      	beq.n	8004324 <sbrk_aligned+0x34>
 800430e:	1cc4      	adds	r4, r0, #3
 8004310:	f024 0403 	bic.w	r4, r4, #3
 8004314:	42a0      	cmp	r0, r4
 8004316:	d007      	beq.n	8004328 <sbrk_aligned+0x38>
 8004318:	1a21      	subs	r1, r4, r0
 800431a:	4628      	mov	r0, r5
 800431c:	f000 fc9a 	bl	8004c54 <_sbrk_r>
 8004320:	3001      	adds	r0, #1
 8004322:	d101      	bne.n	8004328 <sbrk_aligned+0x38>
 8004324:	f04f 34ff 	mov.w	r4, #4294967295
 8004328:	4620      	mov	r0, r4
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	20000360 	.word	0x20000360

08004330 <_malloc_r>:
 8004330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004334:	1ccd      	adds	r5, r1, #3
 8004336:	f025 0503 	bic.w	r5, r5, #3
 800433a:	3508      	adds	r5, #8
 800433c:	2d0c      	cmp	r5, #12
 800433e:	bf38      	it	cc
 8004340:	250c      	movcc	r5, #12
 8004342:	2d00      	cmp	r5, #0
 8004344:	4607      	mov	r7, r0
 8004346:	db01      	blt.n	800434c <_malloc_r+0x1c>
 8004348:	42a9      	cmp	r1, r5
 800434a:	d905      	bls.n	8004358 <_malloc_r+0x28>
 800434c:	230c      	movs	r3, #12
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	2600      	movs	r6, #0
 8004352:	4630      	mov	r0, r6
 8004354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004358:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800442c <_malloc_r+0xfc>
 800435c:	f000 f868 	bl	8004430 <__malloc_lock>
 8004360:	f8d8 3000 	ldr.w	r3, [r8]
 8004364:	461c      	mov	r4, r3
 8004366:	bb5c      	cbnz	r4, 80043c0 <_malloc_r+0x90>
 8004368:	4629      	mov	r1, r5
 800436a:	4638      	mov	r0, r7
 800436c:	f7ff ffc0 	bl	80042f0 <sbrk_aligned>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	4604      	mov	r4, r0
 8004374:	d155      	bne.n	8004422 <_malloc_r+0xf2>
 8004376:	f8d8 4000 	ldr.w	r4, [r8]
 800437a:	4626      	mov	r6, r4
 800437c:	2e00      	cmp	r6, #0
 800437e:	d145      	bne.n	800440c <_malloc_r+0xdc>
 8004380:	2c00      	cmp	r4, #0
 8004382:	d048      	beq.n	8004416 <_malloc_r+0xe6>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	4631      	mov	r1, r6
 8004388:	4638      	mov	r0, r7
 800438a:	eb04 0903 	add.w	r9, r4, r3
 800438e:	f000 fc61 	bl	8004c54 <_sbrk_r>
 8004392:	4581      	cmp	r9, r0
 8004394:	d13f      	bne.n	8004416 <_malloc_r+0xe6>
 8004396:	6821      	ldr	r1, [r4, #0]
 8004398:	1a6d      	subs	r5, r5, r1
 800439a:	4629      	mov	r1, r5
 800439c:	4638      	mov	r0, r7
 800439e:	f7ff ffa7 	bl	80042f0 <sbrk_aligned>
 80043a2:	3001      	adds	r0, #1
 80043a4:	d037      	beq.n	8004416 <_malloc_r+0xe6>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	442b      	add	r3, r5
 80043aa:	6023      	str	r3, [r4, #0]
 80043ac:	f8d8 3000 	ldr.w	r3, [r8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d038      	beq.n	8004426 <_malloc_r+0xf6>
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	42a2      	cmp	r2, r4
 80043b8:	d12b      	bne.n	8004412 <_malloc_r+0xe2>
 80043ba:	2200      	movs	r2, #0
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	e00f      	b.n	80043e0 <_malloc_r+0xb0>
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	1b52      	subs	r2, r2, r5
 80043c4:	d41f      	bmi.n	8004406 <_malloc_r+0xd6>
 80043c6:	2a0b      	cmp	r2, #11
 80043c8:	d917      	bls.n	80043fa <_malloc_r+0xca>
 80043ca:	1961      	adds	r1, r4, r5
 80043cc:	42a3      	cmp	r3, r4
 80043ce:	6025      	str	r5, [r4, #0]
 80043d0:	bf18      	it	ne
 80043d2:	6059      	strne	r1, [r3, #4]
 80043d4:	6863      	ldr	r3, [r4, #4]
 80043d6:	bf08      	it	eq
 80043d8:	f8c8 1000 	streq.w	r1, [r8]
 80043dc:	5162      	str	r2, [r4, r5]
 80043de:	604b      	str	r3, [r1, #4]
 80043e0:	4638      	mov	r0, r7
 80043e2:	f104 060b 	add.w	r6, r4, #11
 80043e6:	f000 f829 	bl	800443c <__malloc_unlock>
 80043ea:	f026 0607 	bic.w	r6, r6, #7
 80043ee:	1d23      	adds	r3, r4, #4
 80043f0:	1af2      	subs	r2, r6, r3
 80043f2:	d0ae      	beq.n	8004352 <_malloc_r+0x22>
 80043f4:	1b9b      	subs	r3, r3, r6
 80043f6:	50a3      	str	r3, [r4, r2]
 80043f8:	e7ab      	b.n	8004352 <_malloc_r+0x22>
 80043fa:	42a3      	cmp	r3, r4
 80043fc:	6862      	ldr	r2, [r4, #4]
 80043fe:	d1dd      	bne.n	80043bc <_malloc_r+0x8c>
 8004400:	f8c8 2000 	str.w	r2, [r8]
 8004404:	e7ec      	b.n	80043e0 <_malloc_r+0xb0>
 8004406:	4623      	mov	r3, r4
 8004408:	6864      	ldr	r4, [r4, #4]
 800440a:	e7ac      	b.n	8004366 <_malloc_r+0x36>
 800440c:	4634      	mov	r4, r6
 800440e:	6876      	ldr	r6, [r6, #4]
 8004410:	e7b4      	b.n	800437c <_malloc_r+0x4c>
 8004412:	4613      	mov	r3, r2
 8004414:	e7cc      	b.n	80043b0 <_malloc_r+0x80>
 8004416:	230c      	movs	r3, #12
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	4638      	mov	r0, r7
 800441c:	f000 f80e 	bl	800443c <__malloc_unlock>
 8004420:	e797      	b.n	8004352 <_malloc_r+0x22>
 8004422:	6025      	str	r5, [r4, #0]
 8004424:	e7dc      	b.n	80043e0 <_malloc_r+0xb0>
 8004426:	605b      	str	r3, [r3, #4]
 8004428:	deff      	udf	#255	; 0xff
 800442a:	bf00      	nop
 800442c:	2000035c 	.word	0x2000035c

08004430 <__malloc_lock>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__malloc_lock+0x8>)
 8004432:	f7ff bf0e 	b.w	8004252 <__retarget_lock_acquire_recursive>
 8004436:	bf00      	nop
 8004438:	20000358 	.word	0x20000358

0800443c <__malloc_unlock>:
 800443c:	4801      	ldr	r0, [pc, #4]	; (8004444 <__malloc_unlock+0x8>)
 800443e:	f7ff bf09 	b.w	8004254 <__retarget_lock_release_recursive>
 8004442:	bf00      	nop
 8004444:	20000358 	.word	0x20000358

08004448 <__sfputc_r>:
 8004448:	6893      	ldr	r3, [r2, #8]
 800444a:	3b01      	subs	r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	b410      	push	{r4}
 8004450:	6093      	str	r3, [r2, #8]
 8004452:	da08      	bge.n	8004466 <__sfputc_r+0x1e>
 8004454:	6994      	ldr	r4, [r2, #24]
 8004456:	42a3      	cmp	r3, r4
 8004458:	db01      	blt.n	800445e <__sfputc_r+0x16>
 800445a:	290a      	cmp	r1, #10
 800445c:	d103      	bne.n	8004466 <__sfputc_r+0x1e>
 800445e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004462:	f7ff bde8 	b.w	8004036 <__swbuf_r>
 8004466:	6813      	ldr	r3, [r2, #0]
 8004468:	1c58      	adds	r0, r3, #1
 800446a:	6010      	str	r0, [r2, #0]
 800446c:	7019      	strb	r1, [r3, #0]
 800446e:	4608      	mov	r0, r1
 8004470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004474:	4770      	bx	lr

08004476 <__sfputs_r>:
 8004476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004478:	4606      	mov	r6, r0
 800447a:	460f      	mov	r7, r1
 800447c:	4614      	mov	r4, r2
 800447e:	18d5      	adds	r5, r2, r3
 8004480:	42ac      	cmp	r4, r5
 8004482:	d101      	bne.n	8004488 <__sfputs_r+0x12>
 8004484:	2000      	movs	r0, #0
 8004486:	e007      	b.n	8004498 <__sfputs_r+0x22>
 8004488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800448c:	463a      	mov	r2, r7
 800448e:	4630      	mov	r0, r6
 8004490:	f7ff ffda 	bl	8004448 <__sfputc_r>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d1f3      	bne.n	8004480 <__sfputs_r+0xa>
 8004498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800449c <_vfiprintf_r>:
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a0:	460d      	mov	r5, r1
 80044a2:	b09d      	sub	sp, #116	; 0x74
 80044a4:	4614      	mov	r4, r2
 80044a6:	4698      	mov	r8, r3
 80044a8:	4606      	mov	r6, r0
 80044aa:	b118      	cbz	r0, 80044b4 <_vfiprintf_r+0x18>
 80044ac:	6a03      	ldr	r3, [r0, #32]
 80044ae:	b90b      	cbnz	r3, 80044b4 <_vfiprintf_r+0x18>
 80044b0:	f7ff fcda 	bl	8003e68 <__sinit>
 80044b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044b6:	07d9      	lsls	r1, r3, #31
 80044b8:	d405      	bmi.n	80044c6 <_vfiprintf_r+0x2a>
 80044ba:	89ab      	ldrh	r3, [r5, #12]
 80044bc:	059a      	lsls	r2, r3, #22
 80044be:	d402      	bmi.n	80044c6 <_vfiprintf_r+0x2a>
 80044c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044c2:	f7ff fec6 	bl	8004252 <__retarget_lock_acquire_recursive>
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	d501      	bpl.n	80044d0 <_vfiprintf_r+0x34>
 80044cc:	692b      	ldr	r3, [r5, #16]
 80044ce:	b99b      	cbnz	r3, 80044f8 <_vfiprintf_r+0x5c>
 80044d0:	4629      	mov	r1, r5
 80044d2:	4630      	mov	r0, r6
 80044d4:	f7ff fdec 	bl	80040b0 <__swsetup_r>
 80044d8:	b170      	cbz	r0, 80044f8 <_vfiprintf_r+0x5c>
 80044da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044dc:	07dc      	lsls	r4, r3, #31
 80044de:	d504      	bpl.n	80044ea <_vfiprintf_r+0x4e>
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	b01d      	add	sp, #116	; 0x74
 80044e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ea:	89ab      	ldrh	r3, [r5, #12]
 80044ec:	0598      	lsls	r0, r3, #22
 80044ee:	d4f7      	bmi.n	80044e0 <_vfiprintf_r+0x44>
 80044f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044f2:	f7ff feaf 	bl	8004254 <__retarget_lock_release_recursive>
 80044f6:	e7f3      	b.n	80044e0 <_vfiprintf_r+0x44>
 80044f8:	2300      	movs	r3, #0
 80044fa:	9309      	str	r3, [sp, #36]	; 0x24
 80044fc:	2320      	movs	r3, #32
 80044fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004502:	f8cd 800c 	str.w	r8, [sp, #12]
 8004506:	2330      	movs	r3, #48	; 0x30
 8004508:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80046bc <_vfiprintf_r+0x220>
 800450c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004510:	f04f 0901 	mov.w	r9, #1
 8004514:	4623      	mov	r3, r4
 8004516:	469a      	mov	sl, r3
 8004518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800451c:	b10a      	cbz	r2, 8004522 <_vfiprintf_r+0x86>
 800451e:	2a25      	cmp	r2, #37	; 0x25
 8004520:	d1f9      	bne.n	8004516 <_vfiprintf_r+0x7a>
 8004522:	ebba 0b04 	subs.w	fp, sl, r4
 8004526:	d00b      	beq.n	8004540 <_vfiprintf_r+0xa4>
 8004528:	465b      	mov	r3, fp
 800452a:	4622      	mov	r2, r4
 800452c:	4629      	mov	r1, r5
 800452e:	4630      	mov	r0, r6
 8004530:	f7ff ffa1 	bl	8004476 <__sfputs_r>
 8004534:	3001      	adds	r0, #1
 8004536:	f000 80a9 	beq.w	800468c <_vfiprintf_r+0x1f0>
 800453a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800453c:	445a      	add	r2, fp
 800453e:	9209      	str	r2, [sp, #36]	; 0x24
 8004540:	f89a 3000 	ldrb.w	r3, [sl]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80a1 	beq.w	800468c <_vfiprintf_r+0x1f0>
 800454a:	2300      	movs	r3, #0
 800454c:	f04f 32ff 	mov.w	r2, #4294967295
 8004550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004554:	f10a 0a01 	add.w	sl, sl, #1
 8004558:	9304      	str	r3, [sp, #16]
 800455a:	9307      	str	r3, [sp, #28]
 800455c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004560:	931a      	str	r3, [sp, #104]	; 0x68
 8004562:	4654      	mov	r4, sl
 8004564:	2205      	movs	r2, #5
 8004566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456a:	4854      	ldr	r0, [pc, #336]	; (80046bc <_vfiprintf_r+0x220>)
 800456c:	f7fb fe38 	bl	80001e0 <memchr>
 8004570:	9a04      	ldr	r2, [sp, #16]
 8004572:	b9d8      	cbnz	r0, 80045ac <_vfiprintf_r+0x110>
 8004574:	06d1      	lsls	r1, r2, #27
 8004576:	bf44      	itt	mi
 8004578:	2320      	movmi	r3, #32
 800457a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457e:	0713      	lsls	r3, r2, #28
 8004580:	bf44      	itt	mi
 8004582:	232b      	movmi	r3, #43	; 0x2b
 8004584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004588:	f89a 3000 	ldrb.w	r3, [sl]
 800458c:	2b2a      	cmp	r3, #42	; 0x2a
 800458e:	d015      	beq.n	80045bc <_vfiprintf_r+0x120>
 8004590:	9a07      	ldr	r2, [sp, #28]
 8004592:	4654      	mov	r4, sl
 8004594:	2000      	movs	r0, #0
 8004596:	f04f 0c0a 	mov.w	ip, #10
 800459a:	4621      	mov	r1, r4
 800459c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045a0:	3b30      	subs	r3, #48	; 0x30
 80045a2:	2b09      	cmp	r3, #9
 80045a4:	d94d      	bls.n	8004642 <_vfiprintf_r+0x1a6>
 80045a6:	b1b0      	cbz	r0, 80045d6 <_vfiprintf_r+0x13a>
 80045a8:	9207      	str	r2, [sp, #28]
 80045aa:	e014      	b.n	80045d6 <_vfiprintf_r+0x13a>
 80045ac:	eba0 0308 	sub.w	r3, r0, r8
 80045b0:	fa09 f303 	lsl.w	r3, r9, r3
 80045b4:	4313      	orrs	r3, r2
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	46a2      	mov	sl, r4
 80045ba:	e7d2      	b.n	8004562 <_vfiprintf_r+0xc6>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	1d19      	adds	r1, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	9103      	str	r1, [sp, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bfbb      	ittet	lt
 80045c8:	425b      	neglt	r3, r3
 80045ca:	f042 0202 	orrlt.w	r2, r2, #2
 80045ce:	9307      	strge	r3, [sp, #28]
 80045d0:	9307      	strlt	r3, [sp, #28]
 80045d2:	bfb8      	it	lt
 80045d4:	9204      	strlt	r2, [sp, #16]
 80045d6:	7823      	ldrb	r3, [r4, #0]
 80045d8:	2b2e      	cmp	r3, #46	; 0x2e
 80045da:	d10c      	bne.n	80045f6 <_vfiprintf_r+0x15a>
 80045dc:	7863      	ldrb	r3, [r4, #1]
 80045de:	2b2a      	cmp	r3, #42	; 0x2a
 80045e0:	d134      	bne.n	800464c <_vfiprintf_r+0x1b0>
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	1d1a      	adds	r2, r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	9203      	str	r2, [sp, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfb8      	it	lt
 80045ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80045f2:	3402      	adds	r4, #2
 80045f4:	9305      	str	r3, [sp, #20]
 80045f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80046cc <_vfiprintf_r+0x230>
 80045fa:	7821      	ldrb	r1, [r4, #0]
 80045fc:	2203      	movs	r2, #3
 80045fe:	4650      	mov	r0, sl
 8004600:	f7fb fdee 	bl	80001e0 <memchr>
 8004604:	b138      	cbz	r0, 8004616 <_vfiprintf_r+0x17a>
 8004606:	9b04      	ldr	r3, [sp, #16]
 8004608:	eba0 000a 	sub.w	r0, r0, sl
 800460c:	2240      	movs	r2, #64	; 0x40
 800460e:	4082      	lsls	r2, r0
 8004610:	4313      	orrs	r3, r2
 8004612:	3401      	adds	r4, #1
 8004614:	9304      	str	r3, [sp, #16]
 8004616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461a:	4829      	ldr	r0, [pc, #164]	; (80046c0 <_vfiprintf_r+0x224>)
 800461c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004620:	2206      	movs	r2, #6
 8004622:	f7fb fddd 	bl	80001e0 <memchr>
 8004626:	2800      	cmp	r0, #0
 8004628:	d03f      	beq.n	80046aa <_vfiprintf_r+0x20e>
 800462a:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <_vfiprintf_r+0x228>)
 800462c:	bb1b      	cbnz	r3, 8004676 <_vfiprintf_r+0x1da>
 800462e:	9b03      	ldr	r3, [sp, #12]
 8004630:	3307      	adds	r3, #7
 8004632:	f023 0307 	bic.w	r3, r3, #7
 8004636:	3308      	adds	r3, #8
 8004638:	9303      	str	r3, [sp, #12]
 800463a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463c:	443b      	add	r3, r7
 800463e:	9309      	str	r3, [sp, #36]	; 0x24
 8004640:	e768      	b.n	8004514 <_vfiprintf_r+0x78>
 8004642:	fb0c 3202 	mla	r2, ip, r2, r3
 8004646:	460c      	mov	r4, r1
 8004648:	2001      	movs	r0, #1
 800464a:	e7a6      	b.n	800459a <_vfiprintf_r+0xfe>
 800464c:	2300      	movs	r3, #0
 800464e:	3401      	adds	r4, #1
 8004650:	9305      	str	r3, [sp, #20]
 8004652:	4619      	mov	r1, r3
 8004654:	f04f 0c0a 	mov.w	ip, #10
 8004658:	4620      	mov	r0, r4
 800465a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800465e:	3a30      	subs	r2, #48	; 0x30
 8004660:	2a09      	cmp	r2, #9
 8004662:	d903      	bls.n	800466c <_vfiprintf_r+0x1d0>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0c6      	beq.n	80045f6 <_vfiprintf_r+0x15a>
 8004668:	9105      	str	r1, [sp, #20]
 800466a:	e7c4      	b.n	80045f6 <_vfiprintf_r+0x15a>
 800466c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004670:	4604      	mov	r4, r0
 8004672:	2301      	movs	r3, #1
 8004674:	e7f0      	b.n	8004658 <_vfiprintf_r+0x1bc>
 8004676:	ab03      	add	r3, sp, #12
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	462a      	mov	r2, r5
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <_vfiprintf_r+0x22c>)
 800467e:	a904      	add	r1, sp, #16
 8004680:	4630      	mov	r0, r6
 8004682:	f3af 8000 	nop.w
 8004686:	4607      	mov	r7, r0
 8004688:	1c78      	adds	r0, r7, #1
 800468a:	d1d6      	bne.n	800463a <_vfiprintf_r+0x19e>
 800468c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800468e:	07d9      	lsls	r1, r3, #31
 8004690:	d405      	bmi.n	800469e <_vfiprintf_r+0x202>
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	059a      	lsls	r2, r3, #22
 8004696:	d402      	bmi.n	800469e <_vfiprintf_r+0x202>
 8004698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800469a:	f7ff fddb 	bl	8004254 <__retarget_lock_release_recursive>
 800469e:	89ab      	ldrh	r3, [r5, #12]
 80046a0:	065b      	lsls	r3, r3, #25
 80046a2:	f53f af1d 	bmi.w	80044e0 <_vfiprintf_r+0x44>
 80046a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046a8:	e71c      	b.n	80044e4 <_vfiprintf_r+0x48>
 80046aa:	ab03      	add	r3, sp, #12
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	462a      	mov	r2, r5
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <_vfiprintf_r+0x22c>)
 80046b2:	a904      	add	r1, sp, #16
 80046b4:	4630      	mov	r0, r6
 80046b6:	f000 f879 	bl	80047ac <_printf_i>
 80046ba:	e7e4      	b.n	8004686 <_vfiprintf_r+0x1ea>
 80046bc:	08004cd8 	.word	0x08004cd8
 80046c0:	08004ce2 	.word	0x08004ce2
 80046c4:	00000000 	.word	0x00000000
 80046c8:	08004477 	.word	0x08004477
 80046cc:	08004cde 	.word	0x08004cde

080046d0 <_printf_common>:
 80046d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d4:	4616      	mov	r6, r2
 80046d6:	4699      	mov	r9, r3
 80046d8:	688a      	ldr	r2, [r1, #8]
 80046da:	690b      	ldr	r3, [r1, #16]
 80046dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bfb8      	it	lt
 80046e4:	4613      	movlt	r3, r2
 80046e6:	6033      	str	r3, [r6, #0]
 80046e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046ec:	4607      	mov	r7, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	b10a      	cbz	r2, 80046f6 <_printf_common+0x26>
 80046f2:	3301      	adds	r3, #1
 80046f4:	6033      	str	r3, [r6, #0]
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	0699      	lsls	r1, r3, #26
 80046fa:	bf42      	ittt	mi
 80046fc:	6833      	ldrmi	r3, [r6, #0]
 80046fe:	3302      	addmi	r3, #2
 8004700:	6033      	strmi	r3, [r6, #0]
 8004702:	6825      	ldr	r5, [r4, #0]
 8004704:	f015 0506 	ands.w	r5, r5, #6
 8004708:	d106      	bne.n	8004718 <_printf_common+0x48>
 800470a:	f104 0a19 	add.w	sl, r4, #25
 800470e:	68e3      	ldr	r3, [r4, #12]
 8004710:	6832      	ldr	r2, [r6, #0]
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	42ab      	cmp	r3, r5
 8004716:	dc26      	bgt.n	8004766 <_printf_common+0x96>
 8004718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800471c:	1e13      	subs	r3, r2, #0
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	bf18      	it	ne
 8004722:	2301      	movne	r3, #1
 8004724:	0692      	lsls	r2, r2, #26
 8004726:	d42b      	bmi.n	8004780 <_printf_common+0xb0>
 8004728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800472c:	4649      	mov	r1, r9
 800472e:	4638      	mov	r0, r7
 8004730:	47c0      	blx	r8
 8004732:	3001      	adds	r0, #1
 8004734:	d01e      	beq.n	8004774 <_printf_common+0xa4>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	6922      	ldr	r2, [r4, #16]
 800473a:	f003 0306 	and.w	r3, r3, #6
 800473e:	2b04      	cmp	r3, #4
 8004740:	bf02      	ittt	eq
 8004742:	68e5      	ldreq	r5, [r4, #12]
 8004744:	6833      	ldreq	r3, [r6, #0]
 8004746:	1aed      	subeq	r5, r5, r3
 8004748:	68a3      	ldr	r3, [r4, #8]
 800474a:	bf0c      	ite	eq
 800474c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004750:	2500      	movne	r5, #0
 8004752:	4293      	cmp	r3, r2
 8004754:	bfc4      	itt	gt
 8004756:	1a9b      	subgt	r3, r3, r2
 8004758:	18ed      	addgt	r5, r5, r3
 800475a:	2600      	movs	r6, #0
 800475c:	341a      	adds	r4, #26
 800475e:	42b5      	cmp	r5, r6
 8004760:	d11a      	bne.n	8004798 <_printf_common+0xc8>
 8004762:	2000      	movs	r0, #0
 8004764:	e008      	b.n	8004778 <_printf_common+0xa8>
 8004766:	2301      	movs	r3, #1
 8004768:	4652      	mov	r2, sl
 800476a:	4649      	mov	r1, r9
 800476c:	4638      	mov	r0, r7
 800476e:	47c0      	blx	r8
 8004770:	3001      	adds	r0, #1
 8004772:	d103      	bne.n	800477c <_printf_common+0xac>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477c:	3501      	adds	r5, #1
 800477e:	e7c6      	b.n	800470e <_printf_common+0x3e>
 8004780:	18e1      	adds	r1, r4, r3
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	2030      	movs	r0, #48	; 0x30
 8004786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800478a:	4422      	add	r2, r4
 800478c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004794:	3302      	adds	r3, #2
 8004796:	e7c7      	b.n	8004728 <_printf_common+0x58>
 8004798:	2301      	movs	r3, #1
 800479a:	4622      	mov	r2, r4
 800479c:	4649      	mov	r1, r9
 800479e:	4638      	mov	r0, r7
 80047a0:	47c0      	blx	r8
 80047a2:	3001      	adds	r0, #1
 80047a4:	d0e6      	beq.n	8004774 <_printf_common+0xa4>
 80047a6:	3601      	adds	r6, #1
 80047a8:	e7d9      	b.n	800475e <_printf_common+0x8e>
	...

080047ac <_printf_i>:
 80047ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	7e0f      	ldrb	r7, [r1, #24]
 80047b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047b4:	2f78      	cmp	r7, #120	; 0x78
 80047b6:	4691      	mov	r9, r2
 80047b8:	4680      	mov	r8, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	469a      	mov	sl, r3
 80047be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047c2:	d807      	bhi.n	80047d4 <_printf_i+0x28>
 80047c4:	2f62      	cmp	r7, #98	; 0x62
 80047c6:	d80a      	bhi.n	80047de <_printf_i+0x32>
 80047c8:	2f00      	cmp	r7, #0
 80047ca:	f000 80d4 	beq.w	8004976 <_printf_i+0x1ca>
 80047ce:	2f58      	cmp	r7, #88	; 0x58
 80047d0:	f000 80c0 	beq.w	8004954 <_printf_i+0x1a8>
 80047d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047dc:	e03a      	b.n	8004854 <_printf_i+0xa8>
 80047de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047e2:	2b15      	cmp	r3, #21
 80047e4:	d8f6      	bhi.n	80047d4 <_printf_i+0x28>
 80047e6:	a101      	add	r1, pc, #4	; (adr r1, 80047ec <_printf_i+0x40>)
 80047e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047ec:	08004845 	.word	0x08004845
 80047f0:	08004859 	.word	0x08004859
 80047f4:	080047d5 	.word	0x080047d5
 80047f8:	080047d5 	.word	0x080047d5
 80047fc:	080047d5 	.word	0x080047d5
 8004800:	080047d5 	.word	0x080047d5
 8004804:	08004859 	.word	0x08004859
 8004808:	080047d5 	.word	0x080047d5
 800480c:	080047d5 	.word	0x080047d5
 8004810:	080047d5 	.word	0x080047d5
 8004814:	080047d5 	.word	0x080047d5
 8004818:	0800495d 	.word	0x0800495d
 800481c:	08004885 	.word	0x08004885
 8004820:	08004917 	.word	0x08004917
 8004824:	080047d5 	.word	0x080047d5
 8004828:	080047d5 	.word	0x080047d5
 800482c:	0800497f 	.word	0x0800497f
 8004830:	080047d5 	.word	0x080047d5
 8004834:	08004885 	.word	0x08004885
 8004838:	080047d5 	.word	0x080047d5
 800483c:	080047d5 	.word	0x080047d5
 8004840:	0800491f 	.word	0x0800491f
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	1d1a      	adds	r2, r3, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004854:	2301      	movs	r3, #1
 8004856:	e09f      	b.n	8004998 <_printf_i+0x1ec>
 8004858:	6820      	ldr	r0, [r4, #0]
 800485a:	682b      	ldr	r3, [r5, #0]
 800485c:	0607      	lsls	r7, r0, #24
 800485e:	f103 0104 	add.w	r1, r3, #4
 8004862:	6029      	str	r1, [r5, #0]
 8004864:	d501      	bpl.n	800486a <_printf_i+0xbe>
 8004866:	681e      	ldr	r6, [r3, #0]
 8004868:	e003      	b.n	8004872 <_printf_i+0xc6>
 800486a:	0646      	lsls	r6, r0, #25
 800486c:	d5fb      	bpl.n	8004866 <_printf_i+0xba>
 800486e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004872:	2e00      	cmp	r6, #0
 8004874:	da03      	bge.n	800487e <_printf_i+0xd2>
 8004876:	232d      	movs	r3, #45	; 0x2d
 8004878:	4276      	negs	r6, r6
 800487a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487e:	485a      	ldr	r0, [pc, #360]	; (80049e8 <_printf_i+0x23c>)
 8004880:	230a      	movs	r3, #10
 8004882:	e012      	b.n	80048aa <_printf_i+0xfe>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	6820      	ldr	r0, [r4, #0]
 8004888:	1d19      	adds	r1, r3, #4
 800488a:	6029      	str	r1, [r5, #0]
 800488c:	0605      	lsls	r5, r0, #24
 800488e:	d501      	bpl.n	8004894 <_printf_i+0xe8>
 8004890:	681e      	ldr	r6, [r3, #0]
 8004892:	e002      	b.n	800489a <_printf_i+0xee>
 8004894:	0641      	lsls	r1, r0, #25
 8004896:	d5fb      	bpl.n	8004890 <_printf_i+0xe4>
 8004898:	881e      	ldrh	r6, [r3, #0]
 800489a:	4853      	ldr	r0, [pc, #332]	; (80049e8 <_printf_i+0x23c>)
 800489c:	2f6f      	cmp	r7, #111	; 0x6f
 800489e:	bf0c      	ite	eq
 80048a0:	2308      	moveq	r3, #8
 80048a2:	230a      	movne	r3, #10
 80048a4:	2100      	movs	r1, #0
 80048a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048aa:	6865      	ldr	r5, [r4, #4]
 80048ac:	60a5      	str	r5, [r4, #8]
 80048ae:	2d00      	cmp	r5, #0
 80048b0:	bfa2      	ittt	ge
 80048b2:	6821      	ldrge	r1, [r4, #0]
 80048b4:	f021 0104 	bicge.w	r1, r1, #4
 80048b8:	6021      	strge	r1, [r4, #0]
 80048ba:	b90e      	cbnz	r6, 80048c0 <_printf_i+0x114>
 80048bc:	2d00      	cmp	r5, #0
 80048be:	d04b      	beq.n	8004958 <_printf_i+0x1ac>
 80048c0:	4615      	mov	r5, r2
 80048c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048c6:	fb03 6711 	mls	r7, r3, r1, r6
 80048ca:	5dc7      	ldrb	r7, [r0, r7]
 80048cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048d0:	4637      	mov	r7, r6
 80048d2:	42bb      	cmp	r3, r7
 80048d4:	460e      	mov	r6, r1
 80048d6:	d9f4      	bls.n	80048c2 <_printf_i+0x116>
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d10b      	bne.n	80048f4 <_printf_i+0x148>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	07de      	lsls	r6, r3, #31
 80048e0:	d508      	bpl.n	80048f4 <_printf_i+0x148>
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	6861      	ldr	r1, [r4, #4]
 80048e6:	4299      	cmp	r1, r3
 80048e8:	bfde      	ittt	le
 80048ea:	2330      	movle	r3, #48	; 0x30
 80048ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048f4:	1b52      	subs	r2, r2, r5
 80048f6:	6122      	str	r2, [r4, #16]
 80048f8:	f8cd a000 	str.w	sl, [sp]
 80048fc:	464b      	mov	r3, r9
 80048fe:	aa03      	add	r2, sp, #12
 8004900:	4621      	mov	r1, r4
 8004902:	4640      	mov	r0, r8
 8004904:	f7ff fee4 	bl	80046d0 <_printf_common>
 8004908:	3001      	adds	r0, #1
 800490a:	d14a      	bne.n	80049a2 <_printf_i+0x1f6>
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	b004      	add	sp, #16
 8004912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	f043 0320 	orr.w	r3, r3, #32
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	4833      	ldr	r0, [pc, #204]	; (80049ec <_printf_i+0x240>)
 8004920:	2778      	movs	r7, #120	; 0x78
 8004922:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	6829      	ldr	r1, [r5, #0]
 800492a:	061f      	lsls	r7, r3, #24
 800492c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004930:	d402      	bmi.n	8004938 <_printf_i+0x18c>
 8004932:	065f      	lsls	r7, r3, #25
 8004934:	bf48      	it	mi
 8004936:	b2b6      	uxthmi	r6, r6
 8004938:	07df      	lsls	r7, r3, #31
 800493a:	bf48      	it	mi
 800493c:	f043 0320 	orrmi.w	r3, r3, #32
 8004940:	6029      	str	r1, [r5, #0]
 8004942:	bf48      	it	mi
 8004944:	6023      	strmi	r3, [r4, #0]
 8004946:	b91e      	cbnz	r6, 8004950 <_printf_i+0x1a4>
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	2310      	movs	r3, #16
 8004952:	e7a7      	b.n	80048a4 <_printf_i+0xf8>
 8004954:	4824      	ldr	r0, [pc, #144]	; (80049e8 <_printf_i+0x23c>)
 8004956:	e7e4      	b.n	8004922 <_printf_i+0x176>
 8004958:	4615      	mov	r5, r2
 800495a:	e7bd      	b.n	80048d8 <_printf_i+0x12c>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	6826      	ldr	r6, [r4, #0]
 8004960:	6961      	ldr	r1, [r4, #20]
 8004962:	1d18      	adds	r0, r3, #4
 8004964:	6028      	str	r0, [r5, #0]
 8004966:	0635      	lsls	r5, r6, #24
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	d501      	bpl.n	8004970 <_printf_i+0x1c4>
 800496c:	6019      	str	r1, [r3, #0]
 800496e:	e002      	b.n	8004976 <_printf_i+0x1ca>
 8004970:	0670      	lsls	r0, r6, #25
 8004972:	d5fb      	bpl.n	800496c <_printf_i+0x1c0>
 8004974:	8019      	strh	r1, [r3, #0]
 8004976:	2300      	movs	r3, #0
 8004978:	6123      	str	r3, [r4, #16]
 800497a:	4615      	mov	r5, r2
 800497c:	e7bc      	b.n	80048f8 <_printf_i+0x14c>
 800497e:	682b      	ldr	r3, [r5, #0]
 8004980:	1d1a      	adds	r2, r3, #4
 8004982:	602a      	str	r2, [r5, #0]
 8004984:	681d      	ldr	r5, [r3, #0]
 8004986:	6862      	ldr	r2, [r4, #4]
 8004988:	2100      	movs	r1, #0
 800498a:	4628      	mov	r0, r5
 800498c:	f7fb fc28 	bl	80001e0 <memchr>
 8004990:	b108      	cbz	r0, 8004996 <_printf_i+0x1ea>
 8004992:	1b40      	subs	r0, r0, r5
 8004994:	6060      	str	r0, [r4, #4]
 8004996:	6863      	ldr	r3, [r4, #4]
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	2300      	movs	r3, #0
 800499c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a0:	e7aa      	b.n	80048f8 <_printf_i+0x14c>
 80049a2:	6923      	ldr	r3, [r4, #16]
 80049a4:	462a      	mov	r2, r5
 80049a6:	4649      	mov	r1, r9
 80049a8:	4640      	mov	r0, r8
 80049aa:	47d0      	blx	sl
 80049ac:	3001      	adds	r0, #1
 80049ae:	d0ad      	beq.n	800490c <_printf_i+0x160>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	079b      	lsls	r3, r3, #30
 80049b4:	d413      	bmi.n	80049de <_printf_i+0x232>
 80049b6:	68e0      	ldr	r0, [r4, #12]
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	4298      	cmp	r0, r3
 80049bc:	bfb8      	it	lt
 80049be:	4618      	movlt	r0, r3
 80049c0:	e7a6      	b.n	8004910 <_printf_i+0x164>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4632      	mov	r2, r6
 80049c6:	4649      	mov	r1, r9
 80049c8:	4640      	mov	r0, r8
 80049ca:	47d0      	blx	sl
 80049cc:	3001      	adds	r0, #1
 80049ce:	d09d      	beq.n	800490c <_printf_i+0x160>
 80049d0:	3501      	adds	r5, #1
 80049d2:	68e3      	ldr	r3, [r4, #12]
 80049d4:	9903      	ldr	r1, [sp, #12]
 80049d6:	1a5b      	subs	r3, r3, r1
 80049d8:	42ab      	cmp	r3, r5
 80049da:	dcf2      	bgt.n	80049c2 <_printf_i+0x216>
 80049dc:	e7eb      	b.n	80049b6 <_printf_i+0x20a>
 80049de:	2500      	movs	r5, #0
 80049e0:	f104 0619 	add.w	r6, r4, #25
 80049e4:	e7f5      	b.n	80049d2 <_printf_i+0x226>
 80049e6:	bf00      	nop
 80049e8:	08004ce9 	.word	0x08004ce9
 80049ec:	08004cfa 	.word	0x08004cfa

080049f0 <__sflush_r>:
 80049f0:	898a      	ldrh	r2, [r1, #12]
 80049f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f6:	4605      	mov	r5, r0
 80049f8:	0710      	lsls	r0, r2, #28
 80049fa:	460c      	mov	r4, r1
 80049fc:	d458      	bmi.n	8004ab0 <__sflush_r+0xc0>
 80049fe:	684b      	ldr	r3, [r1, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	dc05      	bgt.n	8004a10 <__sflush_r+0x20>
 8004a04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	dc02      	bgt.n	8004a10 <__sflush_r+0x20>
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a12:	2e00      	cmp	r6, #0
 8004a14:	d0f9      	beq.n	8004a0a <__sflush_r+0x1a>
 8004a16:	2300      	movs	r3, #0
 8004a18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a1c:	682f      	ldr	r7, [r5, #0]
 8004a1e:	6a21      	ldr	r1, [r4, #32]
 8004a20:	602b      	str	r3, [r5, #0]
 8004a22:	d032      	beq.n	8004a8a <__sflush_r+0x9a>
 8004a24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	075a      	lsls	r2, r3, #29
 8004a2a:	d505      	bpl.n	8004a38 <__sflush_r+0x48>
 8004a2c:	6863      	ldr	r3, [r4, #4]
 8004a2e:	1ac0      	subs	r0, r0, r3
 8004a30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a32:	b10b      	cbz	r3, 8004a38 <__sflush_r+0x48>
 8004a34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a36:	1ac0      	subs	r0, r0, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a3e:	6a21      	ldr	r1, [r4, #32]
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b0      	blx	r6
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	d106      	bne.n	8004a58 <__sflush_r+0x68>
 8004a4a:	6829      	ldr	r1, [r5, #0]
 8004a4c:	291d      	cmp	r1, #29
 8004a4e:	d82b      	bhi.n	8004aa8 <__sflush_r+0xb8>
 8004a50:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <__sflush_r+0x108>)
 8004a52:	410a      	asrs	r2, r1
 8004a54:	07d6      	lsls	r6, r2, #31
 8004a56:	d427      	bmi.n	8004aa8 <__sflush_r+0xb8>
 8004a58:	2200      	movs	r2, #0
 8004a5a:	6062      	str	r2, [r4, #4]
 8004a5c:	04d9      	lsls	r1, r3, #19
 8004a5e:	6922      	ldr	r2, [r4, #16]
 8004a60:	6022      	str	r2, [r4, #0]
 8004a62:	d504      	bpl.n	8004a6e <__sflush_r+0x7e>
 8004a64:	1c42      	adds	r2, r0, #1
 8004a66:	d101      	bne.n	8004a6c <__sflush_r+0x7c>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b903      	cbnz	r3, 8004a6e <__sflush_r+0x7e>
 8004a6c:	6560      	str	r0, [r4, #84]	; 0x54
 8004a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a70:	602f      	str	r7, [r5, #0]
 8004a72:	2900      	cmp	r1, #0
 8004a74:	d0c9      	beq.n	8004a0a <__sflush_r+0x1a>
 8004a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a7a:	4299      	cmp	r1, r3
 8004a7c:	d002      	beq.n	8004a84 <__sflush_r+0x94>
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f7ff fbea 	bl	8004258 <_free_r>
 8004a84:	2000      	movs	r0, #0
 8004a86:	6360      	str	r0, [r4, #52]	; 0x34
 8004a88:	e7c0      	b.n	8004a0c <__sflush_r+0x1c>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b0      	blx	r6
 8004a90:	1c41      	adds	r1, r0, #1
 8004a92:	d1c8      	bne.n	8004a26 <__sflush_r+0x36>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0c5      	beq.n	8004a26 <__sflush_r+0x36>
 8004a9a:	2b1d      	cmp	r3, #29
 8004a9c:	d001      	beq.n	8004aa2 <__sflush_r+0xb2>
 8004a9e:	2b16      	cmp	r3, #22
 8004aa0:	d101      	bne.n	8004aa6 <__sflush_r+0xb6>
 8004aa2:	602f      	str	r7, [r5, #0]
 8004aa4:	e7b1      	b.n	8004a0a <__sflush_r+0x1a>
 8004aa6:	89a3      	ldrh	r3, [r4, #12]
 8004aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aac:	81a3      	strh	r3, [r4, #12]
 8004aae:	e7ad      	b.n	8004a0c <__sflush_r+0x1c>
 8004ab0:	690f      	ldr	r7, [r1, #16]
 8004ab2:	2f00      	cmp	r7, #0
 8004ab4:	d0a9      	beq.n	8004a0a <__sflush_r+0x1a>
 8004ab6:	0793      	lsls	r3, r2, #30
 8004ab8:	680e      	ldr	r6, [r1, #0]
 8004aba:	bf08      	it	eq
 8004abc:	694b      	ldreq	r3, [r1, #20]
 8004abe:	600f      	str	r7, [r1, #0]
 8004ac0:	bf18      	it	ne
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	eba6 0807 	sub.w	r8, r6, r7
 8004ac8:	608b      	str	r3, [r1, #8]
 8004aca:	f1b8 0f00 	cmp.w	r8, #0
 8004ace:	dd9c      	ble.n	8004a0a <__sflush_r+0x1a>
 8004ad0:	6a21      	ldr	r1, [r4, #32]
 8004ad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	463a      	mov	r2, r7
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b0      	blx	r6
 8004adc:	2800      	cmp	r0, #0
 8004ade:	dc06      	bgt.n	8004aee <__sflush_r+0xfe>
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ae6:	81a3      	strh	r3, [r4, #12]
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	e78e      	b.n	8004a0c <__sflush_r+0x1c>
 8004aee:	4407      	add	r7, r0
 8004af0:	eba8 0800 	sub.w	r8, r8, r0
 8004af4:	e7e9      	b.n	8004aca <__sflush_r+0xda>
 8004af6:	bf00      	nop
 8004af8:	dfbffffe 	.word	0xdfbffffe

08004afc <_fflush_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	690b      	ldr	r3, [r1, #16]
 8004b00:	4605      	mov	r5, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	b913      	cbnz	r3, 8004b0c <_fflush_r+0x10>
 8004b06:	2500      	movs	r5, #0
 8004b08:	4628      	mov	r0, r5
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	b118      	cbz	r0, 8004b16 <_fflush_r+0x1a>
 8004b0e:	6a03      	ldr	r3, [r0, #32]
 8004b10:	b90b      	cbnz	r3, 8004b16 <_fflush_r+0x1a>
 8004b12:	f7ff f9a9 	bl	8003e68 <__sinit>
 8004b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f3      	beq.n	8004b06 <_fflush_r+0xa>
 8004b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b20:	07d0      	lsls	r0, r2, #31
 8004b22:	d404      	bmi.n	8004b2e <_fflush_r+0x32>
 8004b24:	0599      	lsls	r1, r3, #22
 8004b26:	d402      	bmi.n	8004b2e <_fflush_r+0x32>
 8004b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2a:	f7ff fb92 	bl	8004252 <__retarget_lock_acquire_recursive>
 8004b2e:	4628      	mov	r0, r5
 8004b30:	4621      	mov	r1, r4
 8004b32:	f7ff ff5d 	bl	80049f0 <__sflush_r>
 8004b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b38:	07da      	lsls	r2, r3, #31
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	d4e4      	bmi.n	8004b08 <_fflush_r+0xc>
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	059b      	lsls	r3, r3, #22
 8004b42:	d4e1      	bmi.n	8004b08 <_fflush_r+0xc>
 8004b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b46:	f7ff fb85 	bl	8004254 <__retarget_lock_release_recursive>
 8004b4a:	e7dd      	b.n	8004b08 <_fflush_r+0xc>

08004b4c <__swhatbuf_r>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	460c      	mov	r4, r1
 8004b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b54:	2900      	cmp	r1, #0
 8004b56:	b096      	sub	sp, #88	; 0x58
 8004b58:	4615      	mov	r5, r2
 8004b5a:	461e      	mov	r6, r3
 8004b5c:	da0d      	bge.n	8004b7a <__swhatbuf_r+0x2e>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	bf0c      	ite	eq
 8004b6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b6e:	2340      	movne	r3, #64	; 0x40
 8004b70:	2000      	movs	r0, #0
 8004b72:	6031      	str	r1, [r6, #0]
 8004b74:	602b      	str	r3, [r5, #0]
 8004b76:	b016      	add	sp, #88	; 0x58
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
 8004b7a:	466a      	mov	r2, sp
 8004b7c:	f000 f848 	bl	8004c10 <_fstat_r>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	dbec      	blt.n	8004b5e <__swhatbuf_r+0x12>
 8004b84:	9901      	ldr	r1, [sp, #4]
 8004b86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b8e:	4259      	negs	r1, r3
 8004b90:	4159      	adcs	r1, r3
 8004b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b96:	e7eb      	b.n	8004b70 <__swhatbuf_r+0x24>

08004b98 <__smakebuf_r>:
 8004b98:	898b      	ldrh	r3, [r1, #12]
 8004b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b9c:	079d      	lsls	r5, r3, #30
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	d507      	bpl.n	8004bb4 <__smakebuf_r+0x1c>
 8004ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	6123      	str	r3, [r4, #16]
 8004bac:	2301      	movs	r3, #1
 8004bae:	6163      	str	r3, [r4, #20]
 8004bb0:	b002      	add	sp, #8
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	ab01      	add	r3, sp, #4
 8004bb6:	466a      	mov	r2, sp
 8004bb8:	f7ff ffc8 	bl	8004b4c <__swhatbuf_r>
 8004bbc:	9900      	ldr	r1, [sp, #0]
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f7ff fbb5 	bl	8004330 <_malloc_r>
 8004bc6:	b948      	cbnz	r0, 8004bdc <__smakebuf_r+0x44>
 8004bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bcc:	059a      	lsls	r2, r3, #22
 8004bce:	d4ef      	bmi.n	8004bb0 <__smakebuf_r+0x18>
 8004bd0:	f023 0303 	bic.w	r3, r3, #3
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	81a3      	strh	r3, [r4, #12]
 8004bda:	e7e3      	b.n	8004ba4 <__smakebuf_r+0xc>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	9b00      	ldr	r3, [sp, #0]
 8004be8:	6163      	str	r3, [r4, #20]
 8004bea:	9b01      	ldr	r3, [sp, #4]
 8004bec:	6120      	str	r0, [r4, #16]
 8004bee:	b15b      	cbz	r3, 8004c08 <__smakebuf_r+0x70>
 8004bf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 f81d 	bl	8004c34 <_isatty_r>
 8004bfa:	b128      	cbz	r0, 8004c08 <__smakebuf_r+0x70>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	81a3      	strh	r3, [r4, #12]
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	431d      	orrs	r5, r3
 8004c0c:	81a5      	strh	r5, [r4, #12]
 8004c0e:	e7cf      	b.n	8004bb0 <__smakebuf_r+0x18>

08004c10 <_fstat_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4d07      	ldr	r5, [pc, #28]	; (8004c30 <_fstat_r+0x20>)
 8004c14:	2300      	movs	r3, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	f7fc fbf0 	bl	8001402 <_fstat>
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	d102      	bne.n	8004c2c <_fstat_r+0x1c>
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	b103      	cbz	r3, 8004c2c <_fstat_r+0x1c>
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	bd38      	pop	{r3, r4, r5, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000354 	.word	0x20000354

08004c34 <_isatty_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d06      	ldr	r5, [pc, #24]	; (8004c50 <_isatty_r+0x1c>)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	f7fc fbef 	bl	8001422 <_isatty>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_isatty_r+0x1a>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_isatty_r+0x1a>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	20000354 	.word	0x20000354

08004c54 <_sbrk_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d06      	ldr	r5, [pc, #24]	; (8004c70 <_sbrk_r+0x1c>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f7fc fbf8 	bl	8001454 <_sbrk>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_sbrk_r+0x1a>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_sbrk_r+0x1a>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	20000354 	.word	0x20000354

08004c74 <_init>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr

08004c80 <_fini>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr
