
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a8  080060a8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b0  080060b0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080060b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  2000006c  08006124  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c88  08006124  00024c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129ac  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ffb  00000000  00000000  00032a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00035a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c09  00000000  00000000  00036a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004597  00000000  00000000  00037659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121ff  00000000  00000000  0003bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091f3d  00000000  00000000  0004ddef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046c8  00000000  00000000  000dfd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e43f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fb0 	.word	0x08005fb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005fb0 	.word	0x08005fb0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fae0 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f834 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8c4 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f898 	bl	8000620 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f002 fb54 	bl	8002b9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <main+0x50>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <main+0x54>)
 80004fa:	f002 fb99 	bl	8002c30 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <main+0x58>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of task1 */
  task1Handle = osThreadNew(funcTask1, NULL, &task1_attributes);
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <main+0x5c>)
 8000506:	2100      	movs	r1, #0
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x60>)
 800050a:	f002 fb91 	bl	8002c30 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <main+0x64>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(funcTask2, NULL, &task2_attributes);
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <main+0x68>)
 8000516:	2100      	movs	r1, #0
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <main+0x6c>)
 800051a:	f002 fb89 	bl	8002c30 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <main+0x70>)
 8000522:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000524:	f002 fb5e 	bl	8002be4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x4c>
 800052a:	bf00      	nop
 800052c:	08006024 	.word	0x08006024
 8000530:	080006a9 	.word	0x080006a9
 8000534:	200000d0 	.word	0x200000d0
 8000538:	08006048 	.word	0x08006048
 800053c:	080006d1 	.word	0x080006d1
 8000540:	200000d4 	.word	0x200000d4
 8000544:	0800606c 	.word	0x0800606c
 8000548:	080006ed 	.word	0x080006ed
 800054c:	200000d8 	.word	0x200000d8

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f005 fa62 	bl	8005a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xc8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <SystemClock_Config+0xc8>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <SystemClock_Config+0xcc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a20      	ldr	r2, [pc, #128]	; (800061c <SystemClock_Config+0xcc>)
 800059a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fdff 	bl	80011d8 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f892 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2103      	movs	r1, #3
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f861 	bl	80016c8 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800060c:	f000 f87c 	bl	8000708 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000658:	f001 fa16 	bl	8001a88 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000662:	f000 f851 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000088 	.word	0x20000088
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_GPIO_Init+0x30>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x30>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_GPIO_Init+0x30>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	initUart(&huart2);
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <StartDefaultTask+0x20>)
 80006b2:	f000 f973 	bl	800099c <initUart>
  /* Infinite loop */
  for(;;)
  {
	printf("defualt task\n");
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <StartDefaultTask+0x24>)
 80006b8:	f005 f8d6 	bl	8005868 <puts>
    osDelay(500);
 80006bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c0:	f002 fb48 	bl	8002d54 <osDelay>
  {
 80006c4:	e7f7      	b.n	80006b6 <StartDefaultTask+0xe>
 80006c6:	bf00      	nop
 80006c8:	20000088 	.word	0x20000088
 80006cc:	08005fe4 	.word	0x08005fe4

080006d0 <funcTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_funcTask1 */
void funcTask1(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN funcTask1 */
  /* Infinite loop */
  for(;;)
  {
      printf("funcTask\n");
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <funcTask1+0x18>)
 80006da:	f005 f8c5 	bl	8005868 <puts>
	  osDelay(789);
 80006de:	f240 3015 	movw	r0, #789	; 0x315
 80006e2:	f002 fb37 	bl	8002d54 <osDelay>
  {
 80006e6:	e7f7      	b.n	80006d8 <funcTask1+0x8>
 80006e8:	08005ff4 	.word	0x08005ff4

080006ec <funcTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_funcTask2 */
void funcTask2(void *argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN funcTask2 */
  /* Infinite loop */
  for(;;)
  {
	printf("funcTask2\n");
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <funcTask2+0x18>)
 80006f6:	f005 f8b7 	bl	8005868 <puts>
    osDelay(1230);
 80006fa:	f240 40ce 	movw	r0, #1230	; 0x4ce
 80006fe:	f002 fb29 	bl	8002d54 <osDelay>
  {
 8000702:	e7f7      	b.n	80006f4 <funcTask2+0x8>
 8000704:	08006000 	.word	0x08006000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_MspInit+0x54>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <HAL_MspInit+0x54>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x54>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_MspInit+0x54>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_MspInit+0x54>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6413      	str	r3, [r2, #64]	; 0x40
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_MspInit+0x54>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	210f      	movs	r1, #15
 8000756:	f06f 0001 	mvn.w	r0, #1
 800075a:	f000 faf0 	bl	8000d3e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a1d      	ldr	r2, [pc, #116]	; (8000800 <HAL_UART_MspInit+0x94>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d133      	bne.n	80007f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_UART_MspInit+0x98>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <HAL_UART_MspInit+0x98>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_UART_MspInit+0x98>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_UART_MspInit+0x98>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <HAL_UART_MspInit+0x98>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_UART_MspInit+0x98>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007c6:	230c      	movs	r3, #12
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d6:	2307      	movs	r3, #7
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <HAL_UART_MspInit+0x9c>)
 80007e2:	f000 fb75 	bl	8000ed0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	2026      	movs	r0, #38	; 0x26
 80007ec:	f000 faa7 	bl	8000d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007f0:	2026      	movs	r0, #38	; 0x26
 80007f2:	f000 fac0 	bl	8000d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40004400 	.word	0x40004400
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f984 	bl	8000b48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000840:	f003 fe96 	bl	8004570 <xTaskGetSchedulerState>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	d001      	beq.n	800084e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800084a:	f004 fc7d 	bl	8005148 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <USART2_IRQHandler+0x10>)
 800085a:	f001 fa15 	bl	8001c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000088 	.word	0x20000088

08000868 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e00a      	b.n	8000890 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800087a:	f3af 8000 	nop.w
 800087e:	4601      	mov	r1, r0
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	60ba      	str	r2, [r7, #8]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbf0      	blt.n	800087a <_read+0x12>
  }

  return len;
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ca:	605a      	str	r2, [r3, #4]
  return 0;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <_isatty>:

int _isatty(int file)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <_sbrk+0x5c>)
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <_sbrk+0x60>)
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <_sbrk+0x64>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <_sbrk+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	429a      	cmp	r2, r3
 800093a:	d207      	bcs.n	800094c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800093c:	f005 f8c2 	bl	8005ac4 <__errno>
 8000940:	4603      	mov	r3, r0
 8000942:	220c      	movs	r2, #12
 8000944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	e009      	b.n	8000960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <_sbrk+0x64>)
 800095c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20020000 	.word	0x20020000
 800096c:	00000400 	.word	0x00000400
 8000970:	200000dc 	.word	0x200000dc
 8000974:	20004c88 	.word	0x20004c88

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <initUart>:
int rxBufferPp;               // put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
   huart = inHuart;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <initUart+0x24>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
   HAL_UART_Receive_IT(&*huart, &rxChar, 1);
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <initUart+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4904      	ldr	r1, [pc, #16]	; (80009c4 <initUart+0x28>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f943 	bl	8001c3e <HAL_UART_Receive_IT>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000e0 	.word	0x200000e0
 80009c4:	200001e7 	.word	0x200001e7

080009c8 <HAL_UART_RxCpltCallback>:

// 문자수신 처리
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
   rxBuffer[rxBufferPp++] = rxChar;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_UART_RxCpltCallback+0x4c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	490f      	ldr	r1, [pc, #60]	; (8000a14 <HAL_UART_RxCpltCallback+0x4c>)
 80009d8:	600a      	str	r2, [r1, #0]
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <HAL_UART_RxCpltCallback+0x50>)
 80009dc:	7811      	ldrb	r1, [r2, #0]
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_UART_RxCpltCallback+0x54>)
 80009e0:	54d1      	strb	r1, [r2, r3]
   rxBufferPp %= rxBufferMax;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_UART_RxCpltCallback+0x4c>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_UART_RxCpltCallback+0x58>)
 80009e8:	fb83 1302 	smull	r1, r3, r3, r2
 80009ec:	4413      	add	r3, r2
 80009ee:	11d9      	asrs	r1, r3, #7
 80009f0:	17d3      	asrs	r3, r2, #31
 80009f2:	1ac9      	subs	r1, r1, r3
 80009f4:	460b      	mov	r3, r1
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	1a5b      	subs	r3, r3, r1
 80009fa:	1ad1      	subs	r1, r2, r3
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_UART_RxCpltCallback+0x4c>)
 80009fe:	6019      	str	r1, [r3, #0]
   HAL_UART_Receive_IT(huart, &rxChar, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	4905      	ldr	r1, [pc, #20]	; (8000a18 <HAL_UART_RxCpltCallback+0x50>)
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f001 f91a 	bl	8001c3e <HAL_UART_Receive_IT>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000e4 	.word	0x200000e4
 8000a18:	200001e7 	.word	0x200001e7
 8000a1c:	200000e8 	.word	0x200000e8
 8000a20:	80808081 	.word	0x80808081

08000a24 <_write>:
   result = rxBuffer[rxBufferGp++];
   rxBufferGp %= rxBufferMax;
   return result;
}

int _write(int file, char *p, int len) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(huart, p, len, 1);
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <_write+0x28>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	2301      	movs	r3, #1
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	f001 f874 	bl	8001b28 <HAL_UART_Transmit>
   return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000e0 	.word	0x200000e0

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a54:	f7ff ff90 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	; (8000a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f005 f827 	bl	8005ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd2b 	bl	80004dc <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a94:	080060b8 	.word	0x080060b8
  ldr r2, =_sbss
 8000a98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a9c:	20004c88 	.word	0x20004c88

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f92b 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fe1c 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f943 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f90b 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	200001e8 	.word	0x200001e8

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200001e8 	.word	0x200001e8

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff3e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff31 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff feda 	bl	8000b70 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d008      	beq.n	8000ddc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e052      	b.n	8000e82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0216 	bic.w	r2, r2, #22
 8000dea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	695a      	ldr	r2, [r3, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d103      	bne.n	8000e0c <HAL_DMA_Abort+0x62>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d007      	beq.n	8000e1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0208 	bic.w	r2, r2, #8
 8000e1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e2c:	e013      	b.n	8000e56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e2e:	f7ff fe9f 	bl	8000b70 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d90c      	bls.n	8000e56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2220      	movs	r2, #32
 8000e40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e015      	b.n	8000e82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e4      	bne.n	8000e2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e68:	223f      	movs	r2, #63	; 0x3f
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d004      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e00c      	b.n	8000ec2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2205      	movs	r2, #5
 8000eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e159      	b.n	80011a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f040 8148 	bne.w	800119a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d005      	beq.n	8000f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d130      	bne.n	8000f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d017      	beq.n	8000fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d123      	bne.n	8001014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	69b9      	ldr	r1, [r7, #24]
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0203 	and.w	r2, r3, #3
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80a2 	beq.w	800119a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <HAL_GPIO_Init+0x2e8>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a56      	ldr	r2, [pc, #344]	; (80011b8 <HAL_GPIO_Init+0x2e8>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <HAL_GPIO_Init+0x2e8>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001072:	4a52      	ldr	r2, [pc, #328]	; (80011bc <HAL_GPIO_Init+0x2ec>)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a49      	ldr	r2, [pc, #292]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x202>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_GPIO_Init+0x2f4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x1fe>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a47      	ldr	r2, [pc, #284]	; (80011c8 <HAL_GPIO_Init+0x2f8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a46      	ldr	r2, [pc, #280]	; (80011cc <HAL_GPIO_Init+0x2fc>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x1f6>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a45      	ldr	r2, [pc, #276]	; (80011d0 <HAL_GPIO_Init+0x300>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x1f2>
 80010be:	2304      	movs	r3, #4
 80010c0:	e008      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010d2:	2300      	movs	r3, #0
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	f002 0203 	and.w	r2, r2, #3
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4093      	lsls	r3, r2
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e4:	4935      	ldr	r1, [pc, #212]	; (80011bc <HAL_GPIO_Init+0x2ec>)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <HAL_GPIO_Init+0x304>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001116:	4a2f      	ldr	r2, [pc, #188]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x304>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001140:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800116a:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <HAL_GPIO_Init+0x304>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3301      	adds	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	f67f aea2 	bls.w	8000eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020400 	.word	0x40020400
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40013c00 	.word	0x40013c00

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e267      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d075      	beq.n	80012e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f6:	4b88      	ldr	r3, [pc, #544]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d00c      	beq.n	800121c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001202:	4b85      	ldr	r3, [pc, #532]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120a:	2b08      	cmp	r3, #8
 800120c:	d112      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4b82      	ldr	r3, [pc, #520]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121a:	d10b      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b7e      	ldr	r3, [pc, #504]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d05b      	beq.n	80012e0 <HAL_RCC_OscConfig+0x108>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d157      	bne.n	80012e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e242      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d106      	bne.n	800124c <HAL_RCC_OscConfig+0x74>
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a75      	ldr	r2, [pc, #468]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x98>
 8001256:	4b70      	ldr	r3, [pc, #448]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6f      	ldr	r2, [pc, #444]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6c      	ldr	r2, [pc, #432]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 8001270:	4b69      	ldr	r3, [pc, #420]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a68      	ldr	r2, [pc, #416]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a65      	ldr	r2, [pc, #404]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fc6e 	bl	8000b70 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fc6a 	bl	8000b70 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e207      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xc0>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc5a 	bl	8000b70 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fc56 	bl	8000b70 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1f3      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	4b51      	ldr	r3, [pc, #324]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0xe8>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d063      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ee:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11c      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1c7      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4937      	ldr	r1, [pc, #220]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	e03a      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d020      	beq.n	800138a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <HAL_RCC_OscConfig+0x244>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fc0f 	bl	8000b70 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fc0b 	bl	8000b70 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1a8      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4925      	ldr	r1, [pc, #148]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_OscConfig+0x244>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fbee 	bl	8000b70 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fbea 	bl	8000b70 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e187      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d036      	beq.n	8001430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d016      	beq.n	80013f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_RCC_OscConfig+0x248>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fbce 	bl	8000b70 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fbca 	bl	8000b70 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e167      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x200>
 80013f6:	e01b      	b.n	8001430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_OscConfig+0x248>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fbb7 	bl	8000b70 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	e00e      	b.n	8001424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fbb3 	bl	8000b70 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d907      	bls.n	8001424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e150      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001418:	40023800 	.word	0x40023800
 800141c:	42470000 	.word	0x42470000
 8001420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	4b88      	ldr	r3, [pc, #544]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ea      	bne.n	8001406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8097 	beq.w	800156c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001442:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b7d      	ldr	r3, [pc, #500]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a7c      	ldr	r2, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b7a      	ldr	r3, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b77      	ldr	r3, [pc, #476]	; (800164c <HAL_RCC_OscConfig+0x474>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b74      	ldr	r3, [pc, #464]	; (800164c <HAL_RCC_OscConfig+0x474>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a73      	ldr	r2, [pc, #460]	; (800164c <HAL_RCC_OscConfig+0x474>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fb73 	bl	8000b70 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fb6f 	bl	8000b70 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e10c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x474>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2ea>
 80014b4:	4b64      	ldr	r3, [pc, #400]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a63      	ldr	r2, [pc, #396]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	e01c      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x30c>
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6713      	str	r3, [r2, #112]	; 0x70
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a5b      	ldr	r2, [pc, #364]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014e4:	4b58      	ldr	r3, [pc, #352]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	4a57      	ldr	r2, [pc, #348]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	; 0x70
 80014f0:	4b55      	ldr	r3, [pc, #340]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	4a54      	ldr	r2, [pc, #336]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d015      	beq.n	8001530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fb34 	bl	8000b70 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fb30 	bl	8000b70 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0cb      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0ee      	beq.n	800150c <HAL_RCC_OscConfig+0x334>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fb1e 	bl	8000b70 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fb1a 	bl	8000b70 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0b5      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ee      	bne.n	8001538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a38      	ldr	r2, [pc, #224]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a1 	beq.w	80016b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d05c      	beq.n	800163c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d141      	bne.n	800160e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff faee 	bl	8000b70 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff faea 	bl	8000b70 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e087      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	491b      	ldr	r1, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fac3 	bl	8000b70 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fabf 	bl	8000b70 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e05c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x416>
 800160c:	e054      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff faac 	bl	8000b70 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff faa8 	bl	8000b70 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e045      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x444>
 800163a:	e03d      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e038      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000
 8001650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x4ec>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d028      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d121      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800168a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800168c:	4293      	cmp	r3, r2
 800168e:	d111      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0cc      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d90c      	bls.n	8001704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b63      	ldr	r3, [pc, #396]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0b8      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001734:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001740:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	494d      	ldr	r1, [pc, #308]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d044      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d119      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	2b03      	cmp	r3, #3
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e067      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 0203 	bic.w	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4934      	ldr	r1, [pc, #208]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b8:	f7ff f9da 	bl	8000b70 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7ff f9d6 	bl	8000b70 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e04f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 020c 	and.w	r2, r3, #12
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1eb      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d20c      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e032      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490e      	ldr	r1, [pc, #56]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f821 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490a      	ldr	r1, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f93a 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00
 8001884:	40023800 	.word	0x40023800
 8001888:	08006090 	.word	0x08006090
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001898:	b090      	sub	sp, #64	; 0x40
 800189a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
 80018a0:	2300      	movs	r3, #0
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d00d      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x40>
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	f200 80a1 	bhi.w	8001a00 <HAL_RCC_GetSysClockFreq+0x16c>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x34>
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x3a>
 80018c6:	e09b      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018cc:	e09b      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ce:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x188>)
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018d2:	e098      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d4:	4b4f      	ldr	r3, [pc, #316]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d028      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	2200      	movs	r2, #0
 80018f2:	623b      	str	r3, [r7, #32]
 80018f4:	627a      	str	r2, [r7, #36]	; 0x24
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018fc:	2100      	movs	r1, #0
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001900:	fb03 f201 	mul.w	r2, r3, r1
 8001904:	2300      	movs	r3, #0
 8001906:	fb00 f303 	mul.w	r3, r0, r3
 800190a:	4413      	add	r3, r2
 800190c:	4a43      	ldr	r2, [pc, #268]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x188>)
 800190e:	fba0 1202 	umull	r1, r2, r0, r2
 8001912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001914:	460a      	mov	r2, r1
 8001916:	62ba      	str	r2, [r7, #40]	; 0x28
 8001918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191a:	4413      	add	r3, r2
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001920:	2200      	movs	r2, #0
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	61fa      	str	r2, [r7, #28]
 8001926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800192a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800192e:	f7fe fc57 	bl	80001e0 <__aeabi_uldivmod>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4613      	mov	r3, r2
 8001938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800193a:	e053      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	2200      	movs	r2, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	617a      	str	r2, [r7, #20]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800194e:	f04f 0b00 	mov.w	fp, #0
 8001952:	4652      	mov	r2, sl
 8001954:	465b      	mov	r3, fp
 8001956:	f04f 0000 	mov.w	r0, #0
 800195a:	f04f 0100 	mov.w	r1, #0
 800195e:	0159      	lsls	r1, r3, #5
 8001960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001964:	0150      	lsls	r0, r2, #5
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	ebb2 080a 	subs.w	r8, r2, sl
 800196e:	eb63 090b 	sbc.w	r9, r3, fp
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800197e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001986:	ebb2 0408 	subs.w	r4, r2, r8
 800198a:	eb63 0509 	sbc.w	r5, r3, r9
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	00eb      	lsls	r3, r5, #3
 8001998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800199c:	00e2      	lsls	r2, r4, #3
 800199e:	4614      	mov	r4, r2
 80019a0:	461d      	mov	r5, r3
 80019a2:	eb14 030a 	adds.w	r3, r4, sl
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	eb45 030b 	adc.w	r3, r5, fp
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ba:	4629      	mov	r1, r5
 80019bc:	028b      	lsls	r3, r1, #10
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c4:	4621      	mov	r1, r4
 80019c6:	028a      	lsls	r2, r1, #10
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	2200      	movs	r2, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	60fa      	str	r2, [r7, #12]
 80019d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d8:	f7fe fc02 	bl	80001e0 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	3301      	adds	r3, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019fe:	e002      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3740      	adds	r7, #64	; 0x40
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	017d7840 	.word	0x017d7840

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	0a9b      	lsrs	r3, r3, #10
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4903      	ldr	r1, [pc, #12]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	080060a0 	.word	0x080060a0

08001a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a64:	f7ff ffdc 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0b5b      	lsrs	r3, r3, #13
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	080060a0 	.word	0x080060a0

08001a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e042      	b.n	8001b20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe fe5c 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	; 0x24
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fdbd 	bl	800264c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d175      	bne.n	8001c34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_UART_Transmit+0x2c>
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e06e      	b.n	8001c36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2221      	movs	r2, #33	; 0x21
 8001b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b66:	f7ff f803 	bl	8000b70 <HAL_GetTick>
 8001b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	88fa      	ldrh	r2, [r7, #6]
 8001b70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b80:	d108      	bne.n	8001b94 <HAL_UART_Transmit+0x6c>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d104      	bne.n	8001b94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	e003      	b.n	8001b9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b9c:	e02e      	b.n	8001bfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 fb1f 	bl	80021ec <UART_WaitOnFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e03a      	b.n	8001c36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e007      	b.n	8001bee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	3301      	adds	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1cb      	bne.n	8001b9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 faeb 	bl	80021ec <UART_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e006      	b.n	8001c36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d112      	bne.n	8001c7e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_UART_Receive_IT+0x26>
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e00b      	b.n	8001c80 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	461a      	mov	r2, r3
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fb12 	bl	800229e <UART_Start_Receive_IT>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	e000      	b.n	8001c80 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
  }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b0ba      	sub	sp, #232	; 0xe8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10f      	bne.n	8001cee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_UART_IRQHandler+0x66>
 8001cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fbf2 	bl	80024d0 <UART_Receive_IT>
      return;
 8001cec:	e25b      	b.n	80021a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80de 	beq.w	8001eb4 <HAL_UART_IRQHandler+0x22c>
 8001cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d106      	bne.n	8001d12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80d1 	beq.w	8001eb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_UART_IRQHandler+0xae>
 8001d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f043 0201 	orr.w	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_UART_IRQHandler+0xd2>
 8001d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_UART_IRQHandler+0xf6>
 8001d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f043 0204 	orr.w	r2, r3, #4
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d011      	beq.n	8001dae <HAL_UART_IRQHandler+0x126>
 8001d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d105      	bne.n	8001da2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f043 0208 	orr.w	r2, r3, #8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 81f2 	beq.w	800219c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x14e>
 8001dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fb7d 	bl	80024d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <HAL_UART_IRQHandler+0x17a>
 8001dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d04f      	beq.n	8001ea2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fa85 	bl	8002312 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d141      	bne.n	8001e9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3314      	adds	r3, #20
 8001e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e24:	e853 3f00 	ldrex	r3, [r3]
 8001e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3314      	adds	r3, #20
 8001e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001e52:	e841 2300 	strex	r3, r2, [r1]
 8001e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1d9      	bne.n	8001e16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d013      	beq.n	8001e92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	4a7e      	ldr	r2, [pc, #504]	; (8002068 <HAL_UART_IRQHandler+0x3e0>)
 8001e70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f807 	bl	8000e8a <HAL_DMA_Abort_IT>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d016      	beq.n	8001eb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e90:	e00e      	b.n	8001eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f994 	bl	80021c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e98:	e00a      	b.n	8001eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f990 	bl	80021c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea0:	e006      	b.n	8001eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f98c 	bl	80021c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001eae:	e175      	b.n	800219c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb0:	bf00      	nop
    return;
 8001eb2:	e173      	b.n	800219c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 814f 	bne.w	800215c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8148 	beq.w	800215c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 8141 	beq.w	800215c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	f040 80b6 	bne.w	800206c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8145 	beq.w	80021a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	f080 813e 	bcs.w	80021a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f36:	f000 8088 	beq.w	800204a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	330c      	adds	r3, #12
 8001f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f48:	e853 3f00 	ldrex	r3, [r3]
 8001f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	330c      	adds	r3, #12
 8001f62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f76:	e841 2300 	strex	r3, r2, [r1]
 8001f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1d9      	bne.n	8001f3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3314      	adds	r3, #20
 8001f8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f90:	e853 3f00 	ldrex	r3, [r3]
 8001f94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3314      	adds	r3, #20
 8001fa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001faa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001fae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001fb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fb6:	e841 2300 	strex	r3, r2, [r1]
 8001fba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e1      	bne.n	8001f86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3314      	adds	r3, #20
 8001fc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fcc:	e853 3f00 	ldrex	r3, [r3]
 8001fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3314      	adds	r3, #20
 8001fe2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001fe6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001fe8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fee:	e841 2300 	strex	r3, r2, [r1]
 8001ff2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e3      	bne.n	8001fc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	330c      	adds	r3, #12
 800200e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002012:	e853 3f00 	ldrex	r3, [r3]
 8002016:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800201a:	f023 0310 	bic.w	r3, r3, #16
 800201e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800202c:	65ba      	str	r2, [r7, #88]	; 0x58
 800202e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002030:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002032:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002034:	e841 2300 	strex	r3, r2, [r1]
 8002038:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800203a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e3      	bne.n	8002008 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe feb0 	bl	8000daa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002058:	b29b      	uxth	r3, r3
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f8b7 	bl	80021d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002066:	e09b      	b.n	80021a0 <HAL_UART_IRQHandler+0x518>
 8002068:	080023d9 	.word	0x080023d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002074:	b29b      	uxth	r3, r3
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 808e 	beq.w	80021a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8089 	beq.w	80021a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	330c      	adds	r3, #12
 8002098:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209c:	e853 3f00 	ldrex	r3, [r3]
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80020a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	330c      	adds	r3, #12
 80020b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80020b6:	647a      	str	r2, [r7, #68]	; 0x44
 80020b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020be:	e841 2300 	strex	r3, r2, [r1]
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80020c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1e3      	bne.n	8002092 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3314      	adds	r3, #20
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	e853 3f00 	ldrex	r3, [r3]
 80020d8:	623b      	str	r3, [r7, #32]
   return(result);
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3314      	adds	r3, #20
 80020ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80020ee:	633a      	str	r2, [r7, #48]	; 0x30
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020f6:	e841 2300 	strex	r3, r2, [r1]
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1e3      	bne.n	80020ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	330c      	adds	r3, #12
 8002116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	e853 3f00 	ldrex	r3, [r3]
 800211e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0310 	bic.w	r3, r3, #16
 8002126:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	330c      	adds	r3, #12
 8002130:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002134:	61fa      	str	r2, [r7, #28]
 8002136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002138:	69b9      	ldr	r1, [r7, #24]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	e841 2300 	strex	r3, r2, [r1]
 8002140:	617b      	str	r3, [r7, #20]
   return(result);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1e3      	bne.n	8002110 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800214e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f83d 	bl	80021d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800215a:	e023      	b.n	80021a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800215c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d009      	beq.n	800217c <HAL_UART_IRQHandler+0x4f4>
 8002168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f943 	bl	8002400 <UART_Transmit_IT>
    return;
 800217a:	e014      	b.n	80021a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800217c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <HAL_UART_IRQHandler+0x51e>
 8002188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800218c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f983 	bl	80024a0 <UART_EndTransmit_IT>
    return;
 800219a:	e004      	b.n	80021a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800219c:	bf00      	nop
 800219e:	e002      	b.n	80021a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80021a0:	bf00      	nop
 80021a2:	e000      	b.n	80021a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80021a4:	bf00      	nop
  }
}
 80021a6:	37e8      	adds	r7, #232	; 0xe8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021fc:	e03b      	b.n	8002276 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d037      	beq.n	8002276 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7fe fcb3 	bl	8000b70 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <UART_WaitOnFlagUntilTimeout+0x30>
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e03a      	b.n	8002296 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d023      	beq.n	8002276 <UART_WaitOnFlagUntilTimeout+0x8a>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d020      	beq.n	8002276 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b40      	cmp	r3, #64	; 0x40
 8002238:	d01d      	beq.n	8002276 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b08      	cmp	r3, #8
 8002246:	d116      	bne.n	8002276 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f857 	bl	8002312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2208      	movs	r2, #8
 8002268:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	429a      	cmp	r2, r3
 8002284:	bf0c      	ite	eq
 8002286:	2301      	moveq	r3, #1
 8002288:	2300      	movne	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	429a      	cmp	r2, r3
 8002292:	d0b4      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	4613      	mov	r3, r2
 80022aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2222      	movs	r2, #34	; 0x22
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002312:	b480      	push	{r7}
 8002314:	b095      	sub	sp, #84	; 0x54
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	330c      	adds	r3, #12
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002324:	e853 3f00 	ldrex	r3, [r3]
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002330:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800233a:	643a      	str	r2, [r7, #64]	; 0x40
 800233c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002342:	e841 2300 	strex	r3, r2, [r1]
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1e5      	bne.n	800231a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3314      	adds	r3, #20
 8002354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	e853 3f00 	ldrex	r3, [r3]
 800235c:	61fb      	str	r3, [r7, #28]
   return(result);
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	64bb      	str	r3, [r7, #72]	; 0x48
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3314      	adds	r3, #20
 800236c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800236e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002376:	e841 2300 	strex	r3, r2, [r1]
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1e5      	bne.n	800234e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	2b01      	cmp	r3, #1
 8002388:	d119      	bne.n	80023be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	60bb      	str	r3, [r7, #8]
   return(result);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f023 0310 	bic.w	r3, r3, #16
 80023a0:	647b      	str	r3, [r7, #68]	; 0x44
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	330c      	adds	r3, #12
 80023a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023aa:	61ba      	str	r2, [r7, #24]
 80023ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ae:	6979      	ldr	r1, [r7, #20]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	e841 2300 	strex	r3, r2, [r1]
 80023b6:	613b      	str	r3, [r7, #16]
   return(result);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e5      	bne.n	800238a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023cc:	bf00      	nop
 80023ce:	3754      	adds	r7, #84	; 0x54
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff fee4 	bl	80021c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b21      	cmp	r3, #33	; 0x21
 8002412:	d13e      	bne.n	8002492 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241c:	d114      	bne.n	8002448 <UART_Transmit_IT+0x48>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d110      	bne.n	8002448 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800243a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	1c9a      	adds	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	621a      	str	r2, [r3, #32]
 8002446:	e008      	b.n	800245a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	1c59      	adds	r1, r3, #1
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6211      	str	r1, [r2, #32]
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29b      	uxth	r3, r3
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4619      	mov	r1, r3
 8002468:	84d1      	strh	r1, [r2, #38]	; 0x26
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff fe73 	bl	80021ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	; 0x30
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b22      	cmp	r3, #34	; 0x22
 80024e2:	f040 80ae 	bne.w	8002642 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	d117      	bne.n	8002520 <UART_Receive_IT+0x50>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d113      	bne.n	8002520 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	b29b      	uxth	r3, r3
 800250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250e:	b29a      	uxth	r2, r3
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	1c9a      	adds	r2, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
 800251e:	e026      	b.n	800256e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002532:	d007      	beq.n	8002544 <UART_Receive_IT+0x74>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <UART_Receive_IT+0x82>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e008      	b.n	8002564 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800255e:	b2da      	uxtb	r2, r3
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29b      	uxth	r3, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4619      	mov	r1, r3
 800257c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800257e:	2b00      	cmp	r3, #0
 8002580:	d15d      	bne.n	800263e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0220 	bic.w	r2, r2, #32
 8002590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d135      	bne.n	8002634 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	e853 3f00 	ldrex	r3, [r3]
 80025dc:	613b      	str	r3, [r7, #16]
   return(result);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f023 0310 	bic.w	r3, r3, #16
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330c      	adds	r3, #12
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	623a      	str	r2, [r7, #32]
 80025f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f2:	69f9      	ldr	r1, [r7, #28]
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	e841 2300 	strex	r3, r2, [r1]
 80025fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e5      	bne.n	80025ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b10      	cmp	r3, #16
 800260e:	d10a      	bne.n	8002626 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fdd1 	bl	80021d4 <HAL_UARTEx_RxEventCallback>
 8002632:	e002      	b.n	800263a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fe f9c7 	bl	80009c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e002      	b.n	8002644 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	3730      	adds	r7, #48	; 0x30
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002650:	b0c0      	sub	sp, #256	; 0x100
 8002652:	af00      	add	r7, sp, #0
 8002654:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	ea40 0301 	orr.w	r3, r0, r1
 8002674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	431a      	orrs	r2, r3
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	431a      	orrs	r2, r3
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026a4:	f021 010c 	bic.w	r1, r1, #12
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026b2:	430b      	orrs	r3, r1
 80026b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c6:	6999      	ldr	r1, [r3, #24]
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	ea40 0301 	orr.w	r3, r0, r1
 80026d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b8f      	ldr	r3, [pc, #572]	; (8002918 <UART_SetConfig+0x2cc>)
 80026dc:	429a      	cmp	r2, r3
 80026de:	d005      	beq.n	80026ec <UART_SetConfig+0xa0>
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b8d      	ldr	r3, [pc, #564]	; (800291c <UART_SetConfig+0x2d0>)
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d104      	bne.n	80026f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026ec:	f7ff f9b8 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 80026f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026f4:	e003      	b.n	80026fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026f6:	f7ff f99f 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 80026fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002708:	f040 810c 	bne.w	8002924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800270c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002710:	2200      	movs	r2, #0
 8002712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002716:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800271a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800271e:	4622      	mov	r2, r4
 8002720:	462b      	mov	r3, r5
 8002722:	1891      	adds	r1, r2, r2
 8002724:	65b9      	str	r1, [r7, #88]	; 0x58
 8002726:	415b      	adcs	r3, r3
 8002728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800272a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800272e:	4621      	mov	r1, r4
 8002730:	eb12 0801 	adds.w	r8, r2, r1
 8002734:	4629      	mov	r1, r5
 8002736:	eb43 0901 	adc.w	r9, r3, r1
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800274a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800274e:	4690      	mov	r8, r2
 8002750:	4699      	mov	r9, r3
 8002752:	4623      	mov	r3, r4
 8002754:	eb18 0303 	adds.w	r3, r8, r3
 8002758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800275c:	462b      	mov	r3, r5
 800275e:	eb49 0303 	adc.w	r3, r9, r3
 8002762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002772:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800277a:	460b      	mov	r3, r1
 800277c:	18db      	adds	r3, r3, r3
 800277e:	653b      	str	r3, [r7, #80]	; 0x50
 8002780:	4613      	mov	r3, r2
 8002782:	eb42 0303 	adc.w	r3, r2, r3
 8002786:	657b      	str	r3, [r7, #84]	; 0x54
 8002788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800278c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002790:	f7fd fd26 	bl	80001e0 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4b61      	ldr	r3, [pc, #388]	; (8002920 <UART_SetConfig+0x2d4>)
 800279a:	fba3 2302 	umull	r2, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	011c      	lsls	r4, r3, #4
 80027a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027b4:	4642      	mov	r2, r8
 80027b6:	464b      	mov	r3, r9
 80027b8:	1891      	adds	r1, r2, r2
 80027ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80027bc:	415b      	adcs	r3, r3
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027c4:	4641      	mov	r1, r8
 80027c6:	eb12 0a01 	adds.w	sl, r2, r1
 80027ca:	4649      	mov	r1, r9
 80027cc:	eb43 0b01 	adc.w	fp, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027e4:	4692      	mov	sl, r2
 80027e6:	469b      	mov	fp, r3
 80027e8:	4643      	mov	r3, r8
 80027ea:	eb1a 0303 	adds.w	r3, sl, r3
 80027ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027f2:	464b      	mov	r3, r9
 80027f4:	eb4b 0303 	adc.w	r3, fp, r3
 80027f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002808:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800280c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002810:	460b      	mov	r3, r1
 8002812:	18db      	adds	r3, r3, r3
 8002814:	643b      	str	r3, [r7, #64]	; 0x40
 8002816:	4613      	mov	r3, r2
 8002818:	eb42 0303 	adc.w	r3, r2, r3
 800281c:	647b      	str	r3, [r7, #68]	; 0x44
 800281e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002826:	f7fd fcdb 	bl	80001e0 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4611      	mov	r1, r2
 8002830:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <UART_SetConfig+0x2d4>)
 8002832:	fba3 2301 	umull	r2, r3, r3, r1
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2264      	movs	r2, #100	; 0x64
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	1acb      	subs	r3, r1, r3
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <UART_SetConfig+0x2d4>)
 8002848:	fba3 2302 	umull	r2, r3, r3, r2
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002854:	441c      	add	r4, r3
 8002856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800285a:	2200      	movs	r2, #0
 800285c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002860:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002868:	4642      	mov	r2, r8
 800286a:	464b      	mov	r3, r9
 800286c:	1891      	adds	r1, r2, r2
 800286e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002870:	415b      	adcs	r3, r3
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002878:	4641      	mov	r1, r8
 800287a:	1851      	adds	r1, r2, r1
 800287c:	6339      	str	r1, [r7, #48]	; 0x30
 800287e:	4649      	mov	r1, r9
 8002880:	414b      	adcs	r3, r1
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002890:	4659      	mov	r1, fp
 8002892:	00cb      	lsls	r3, r1, #3
 8002894:	4651      	mov	r1, sl
 8002896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800289a:	4651      	mov	r1, sl
 800289c:	00ca      	lsls	r2, r1, #3
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	4642      	mov	r2, r8
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028ac:	464b      	mov	r3, r9
 80028ae:	460a      	mov	r2, r1
 80028b0:	eb42 0303 	adc.w	r3, r2, r3
 80028b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028cc:	460b      	mov	r3, r1
 80028ce:	18db      	adds	r3, r3, r3
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d2:	4613      	mov	r3, r2
 80028d4:	eb42 0303 	adc.w	r3, r2, r3
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028e2:	f7fd fc7d 	bl	80001e0 <__aeabi_uldivmod>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <UART_SetConfig+0x2d4>)
 80028ec:	fba3 1302 	umull	r1, r3, r3, r2
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	2164      	movs	r1, #100	; 0x64
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	3332      	adds	r3, #50	; 0x32
 80028fe:	4a08      	ldr	r2, [pc, #32]	; (8002920 <UART_SetConfig+0x2d4>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	f003 0207 	and.w	r2, r3, #7
 800290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4422      	add	r2, r4
 8002912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002914:	e106      	b.n	8002b24 <UART_SetConfig+0x4d8>
 8002916:	bf00      	nop
 8002918:	40011000 	.word	0x40011000
 800291c:	40011400 	.word	0x40011400
 8002920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002928:	2200      	movs	r2, #0
 800292a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800292e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002936:	4642      	mov	r2, r8
 8002938:	464b      	mov	r3, r9
 800293a:	1891      	adds	r1, r2, r2
 800293c:	6239      	str	r1, [r7, #32]
 800293e:	415b      	adcs	r3, r3
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002946:	4641      	mov	r1, r8
 8002948:	1854      	adds	r4, r2, r1
 800294a:	4649      	mov	r1, r9
 800294c:	eb43 0501 	adc.w	r5, r3, r1
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	00eb      	lsls	r3, r5, #3
 800295a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800295e:	00e2      	lsls	r2, r4, #3
 8002960:	4614      	mov	r4, r2
 8002962:	461d      	mov	r5, r3
 8002964:	4643      	mov	r3, r8
 8002966:	18e3      	adds	r3, r4, r3
 8002968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800296c:	464b      	mov	r3, r9
 800296e:	eb45 0303 	adc.w	r3, r5, r3
 8002972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002992:	4629      	mov	r1, r5
 8002994:	008b      	lsls	r3, r1, #2
 8002996:	4621      	mov	r1, r4
 8002998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800299c:	4621      	mov	r1, r4
 800299e:	008a      	lsls	r2, r1, #2
 80029a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029a4:	f7fd fc1c 	bl	80001e0 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4b60      	ldr	r3, [pc, #384]	; (8002b30 <UART_SetConfig+0x4e4>)
 80029ae:	fba3 2302 	umull	r2, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	011c      	lsls	r4, r3, #4
 80029b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029c8:	4642      	mov	r2, r8
 80029ca:	464b      	mov	r3, r9
 80029cc:	1891      	adds	r1, r2, r2
 80029ce:	61b9      	str	r1, [r7, #24]
 80029d0:	415b      	adcs	r3, r3
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d8:	4641      	mov	r1, r8
 80029da:	1851      	adds	r1, r2, r1
 80029dc:	6139      	str	r1, [r7, #16]
 80029de:	4649      	mov	r1, r9
 80029e0:	414b      	adcs	r3, r1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f0:	4659      	mov	r1, fp
 80029f2:	00cb      	lsls	r3, r1, #3
 80029f4:	4651      	mov	r1, sl
 80029f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029fa:	4651      	mov	r1, sl
 80029fc:	00ca      	lsls	r2, r1, #3
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	4642      	mov	r2, r8
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a0c:	464b      	mov	r3, r9
 8002a0e:	460a      	mov	r2, r1
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a30:	4649      	mov	r1, r9
 8002a32:	008b      	lsls	r3, r1, #2
 8002a34:	4641      	mov	r1, r8
 8002a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	008a      	lsls	r2, r1, #2
 8002a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a42:	f7fd fbcd 	bl	80001e0 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <UART_SetConfig+0x4e4>)
 8002a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2264      	movs	r2, #100	; 0x64
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	1acb      	subs	r3, r1, r3
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	3332      	adds	r3, #50	; 0x32
 8002a60:	4a33      	ldr	r2, [pc, #204]	; (8002b30 <UART_SetConfig+0x4e4>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6c:	441c      	add	r4, r3
 8002a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a72:	2200      	movs	r2, #0
 8002a74:	673b      	str	r3, [r7, #112]	; 0x70
 8002a76:	677a      	str	r2, [r7, #116]	; 0x74
 8002a78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	464b      	mov	r3, r9
 8002a80:	1891      	adds	r1, r2, r2
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	415b      	adcs	r3, r3
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	1851      	adds	r1, r2, r1
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	4649      	mov	r1, r9
 8002a94:	414b      	adcs	r3, r1
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aa4:	4659      	mov	r1, fp
 8002aa6:	00cb      	lsls	r3, r1, #3
 8002aa8:	4651      	mov	r1, sl
 8002aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aae:	4651      	mov	r1, sl
 8002ab0:	00ca      	lsls	r2, r1, #3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4642      	mov	r2, r8
 8002aba:	189b      	adds	r3, r3, r2
 8002abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002abe:	464b      	mov	r3, r9
 8002ac0:	460a      	mov	r2, r1
 8002ac2:	eb42 0303 	adc.w	r3, r2, r3
 8002ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad2:	667a      	str	r2, [r7, #100]	; 0x64
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	008b      	lsls	r3, r1, #2
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aea:	4641      	mov	r1, r8
 8002aec:	008a      	lsls	r2, r1, #2
 8002aee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002af2:	f7fd fb75 	bl	80001e0 <__aeabi_uldivmod>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <UART_SetConfig+0x4e4>)
 8002afc:	fba3 1302 	umull	r1, r3, r3, r2
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	2164      	movs	r1, #100	; 0x64
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	3332      	adds	r3, #50	; 0x32
 8002b0e:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <UART_SetConfig+0x4e4>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	f003 020f 	and.w	r2, r3, #15
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4422      	add	r2, r4
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b30:	51eb851f 	.word	0x51eb851f

08002b34 <__NVIC_SetPriority>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	f06f 0004 	mvn.w	r0, #4
 8002b92:	f7ff ffcf 	bl	8002b34 <__NVIC_SetPriority>
#endif
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba2:	f3ef 8305 	mrs	r3, IPSR
 8002ba6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ba8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002bae:	f06f 0305 	mvn.w	r3, #5
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	e00c      	b.n	8002bd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <osKernelInitialize+0x44>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d105      	bne.n	8002bca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <osKernelInitialize+0x44>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	e002      	b.n	8002bd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bd0:	687b      	ldr	r3, [r7, #4]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	200001ec 	.word	0x200001ec

08002be4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bea:	f3ef 8305 	mrs	r3, IPSR
 8002bee:	603b      	str	r3, [r7, #0]
  return(result);
 8002bf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8002bf6:	f06f 0305 	mvn.w	r3, #5
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	e010      	b.n	8002c20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <osKernelStart+0x48>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d109      	bne.n	8002c1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c06:	f7ff ffbf 	bl	8002b88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <osKernelStart+0x48>)
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c10:	f001 f866 	bl	8003ce0 <vTaskStartScheduler>
      stat = osOK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	e002      	b.n	8002c20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c20:	687b      	ldr	r3, [r7, #4]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200001ec 	.word	0x200001ec

08002c30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af04      	add	r7, sp, #16
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c40:	f3ef 8305 	mrs	r3, IPSR
 8002c44:	617b      	str	r3, [r7, #20]
  return(result);
 8002c46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d17e      	bne.n	8002d4a <osThreadNew+0x11a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d07b      	beq.n	8002d4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c56:	2318      	movs	r3, #24
 8002c58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d045      	beq.n	8002cf6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <osThreadNew+0x48>
        name = attr->name;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <osThreadNew+0x6e>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b38      	cmp	r3, #56	; 0x38
 8002c90:	d805      	bhi.n	8002c9e <osThreadNew+0x6e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <osThreadNew+0x72>
        return (NULL);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e054      	b.n	8002d4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <osThreadNew+0xa8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b5b      	cmp	r3, #91	; 0x5b
 8002cc0:	d90a      	bls.n	8002cd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <osThreadNew+0xa8>
        mem = 1;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	e010      	b.n	8002cfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10c      	bne.n	8002cfa <osThreadNew+0xca>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <osThreadNew+0xca>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <osThreadNew+0xca>
          mem = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	e001      	b.n	8002cfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d110      	bne.n	8002d22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d08:	9202      	str	r2, [sp, #8]
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	6a3a      	ldr	r2, [r7, #32]
 8002d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fe0c 	bl	8003934 <xTaskCreateStatic>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	e013      	b.n	8002d4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d110      	bne.n	8002d4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	f107 0310 	add.w	r3, r7, #16
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fe57 	bl	80039ee <xTaskCreate>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <osThreadNew+0x11a>
            hTask = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d4a:	693b      	ldr	r3, [r7, #16]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d5c:	f3ef 8305 	mrs	r3, IPSR
 8002d60:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <osDelay+0x1c>
    stat = osErrorISR;
 8002d68:	f06f 0305 	mvn.w	r3, #5
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e007      	b.n	8002d80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 ff7c 	bl	8003c78 <vTaskDelay>
    }
  }

  return (stat);
 8002d80:	68fb      	ldr	r3, [r7, #12]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a06      	ldr	r2, [pc, #24]	; (8002dbc <vApplicationGetIdleTaskMemory+0x30>)
 8002da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	200001f0 	.word	0x200001f0
 8002dbc:	2000024c 	.word	0x2000024c

08002dc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <vApplicationGetTimerTaskMemory+0x2c>)
 8002dd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <vApplicationGetTimerTaskMemory+0x30>)
 8002dd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dde:	601a      	str	r2, [r3, #0]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	2000044c 	.word	0x2000044c
 8002df0:	200004a8 	.word	0x200004a8

08002df4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f103 0208 	add.w	r2, r3, #8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f103 0208 	add.w	r2, r3, #8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f103 0208 	add.w	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	601a      	str	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d103      	bne.n	8002eb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e00c      	b.n	8002ed0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3308      	adds	r3, #8
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e002      	b.n	8002ec4 <vListInsert+0x2e>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d2f6      	bcs.n	8002ebe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	601a      	str	r2, [r3, #0]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6892      	ldr	r2, [r2, #8]
 8002f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6852      	ldr	r2, [r2, #4]
 8002f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d103      	bne.n	8002f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f86:	f002 f84d 	bl	8005024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	68f9      	ldr	r1, [r7, #12]
 8002f94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	441a      	add	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	441a      	add	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	22ff      	movs	r2, #255	; 0xff
 8002fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d114      	bne.n	8003006 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01a      	beq.n	800301a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f001 f903 	bl	80041f4 <xTaskRemoveFromEventList>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <xQueueGenericReset+0xcc>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	e009      	b.n	800301a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3310      	adds	r3, #16
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fef2 	bl	8002df4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3324      	adds	r3, #36	; 0x24
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff feed 	bl	8002df4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800301a:	f002 f833 	bl	8005084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08e      	sub	sp, #56	; 0x38
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003052:	bf00      	nop
 8003054:	e7fe      	b.n	8003054 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800306e:	bf00      	nop
 8003070:	e7fe      	b.n	8003070 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <xQueueGenericCreateStatic+0x52>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <xQueueGenericCreateStatic+0x56>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <xQueueGenericCreateStatic+0x58>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	623b      	str	r3, [r7, #32]
}
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <xQueueGenericCreateStatic+0x7e>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <xQueueGenericCreateStatic+0x82>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <xQueueGenericCreateStatic+0x84>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	61fb      	str	r3, [r7, #28]
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030ca:	2350      	movs	r3, #80	; 0x50
 80030cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b50      	cmp	r3, #80	; 0x50
 80030d2:	d00a      	beq.n	80030ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	61bb      	str	r3, [r7, #24]
}
 80030e6:	bf00      	nop
 80030e8:	e7fe      	b.n	80030e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f805 	bl	800311c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003114:	4618      	mov	r0, r3
 8003116:	3730      	adds	r7, #48	; 0x30
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e002      	b.n	800313e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800314a:	2101      	movs	r1, #1
 800314c:	69b8      	ldr	r0, [r7, #24]
 800314e:	f7ff ff05 	bl	8002f5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08e      	sub	sp, #56	; 0x38
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003172:	2300      	movs	r3, #0
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueGenericSend+0x32>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <xQueueGenericSend+0x40>
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <xQueueGenericSend+0x44>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <xQueueGenericSend+0x46>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <xQueueGenericSend+0x60>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d103      	bne.n	80031d2 <xQueueGenericSend+0x6e>
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <xQueueGenericSend+0x72>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <xQueueGenericSend+0x74>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	623b      	str	r3, [r7, #32]
}
 80031ee:	bf00      	nop
 80031f0:	e7fe      	b.n	80031f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031f2:	f001 f9bd 	bl	8004570 <xTaskGetSchedulerState>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <xQueueGenericSend+0x9e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <xQueueGenericSend+0xa2>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <xQueueGenericSend+0xa4>
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xQueueGenericSend+0xbe>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	61fb      	str	r3, [r7, #28]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003222:	f001 feff 	bl	8005024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <xQueueGenericSend+0xd4>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d129      	bne.n	800328c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800323e:	f000 fa0b 	bl	8003658 <prvCopyDataToQueue>
 8003242:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	3324      	adds	r3, #36	; 0x24
 8003250:	4618      	mov	r0, r3
 8003252:	f000 ffcf 	bl	80041f4 <xTaskRemoveFromEventList>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <xQueueGenericSend+0x1f8>)
 800325e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	e00a      	b.n	8003284 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003274:	4b39      	ldr	r3, [pc, #228]	; (800335c <xQueueGenericSend+0x1f8>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003284:	f001 fefe 	bl	8005084 <vPortExitCritical>
				return pdPASS;
 8003288:	2301      	movs	r3, #1
 800328a:	e063      	b.n	8003354 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003292:	f001 fef7 	bl	8005084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003296:	2300      	movs	r3, #0
 8003298:	e05c      	b.n	8003354 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 f809 	bl	80042bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032aa:	2301      	movs	r3, #1
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ae:	f001 fee9 	bl	8005084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032b2:	f000 fd7b 	bl	8003dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032b6:	f001 feb5 	bl	8005024 <vPortEnterCritical>
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d103      	bne.n	80032d0 <xQueueGenericSend+0x16c>
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d103      	bne.n	80032e6 <xQueueGenericSend+0x182>
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032e6:	f001 fecd 	bl	8005084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ea:	1d3a      	adds	r2, r7, #4
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fff8 	bl	80042e8 <xTaskCheckForTimeOut>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d124      	bne.n	8003348 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003300:	f000 faa2 	bl	8003848 <prvIsQueueFull>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	3310      	adds	r3, #16
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f000 ff1e 	bl	8004154 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800331a:	f000 fa2d 	bl	8003778 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800331e:	f000 fd53 	bl	8003dc8 <xTaskResumeAll>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f47f af7c 	bne.w	8003222 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <xQueueGenericSend+0x1f8>)
 800332c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	e772      	b.n	8003222 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800333c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333e:	f000 fa1b 	bl	8003778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003342:	f000 fd41 	bl	8003dc8 <xTaskResumeAll>
 8003346:	e76c      	b.n	8003222 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334a:	f000 fa15 	bl	8003778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800334e:	f000 fd3b 	bl	8003dc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003352:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003354:	4618      	mov	r0, r3
 8003356:	3738      	adds	r7, #56	; 0x38
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b090      	sub	sp, #64	; 0x40
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800338a:	bf00      	nop
 800338c:	e7fe      	b.n	800338c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <xQueueGenericSendFromISR+0x3c>
 8003394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <xQueueGenericSendFromISR+0x40>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <xQueueGenericSendFromISR+0x42>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d103      	bne.n	80033ca <xQueueGenericSendFromISR+0x6a>
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <xQueueGenericSendFromISR+0x6e>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <xQueueGenericSendFromISR+0x70>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	623b      	str	r3, [r7, #32]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033ea:	f001 fefd 	bl	80051e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033ee:	f3ef 8211 	mrs	r2, BASEPRI
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	61fa      	str	r2, [r7, #28]
 8003404:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003406:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <xQueueGenericSendFromISR+0xbc>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d12f      	bne.n	800347c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800341c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003432:	f000 f911 	bl	8003658 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003436:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d112      	bne.n	8003466 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fed1 	bl	80041f4 <xTaskRemoveFromEventList>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e007      	b.n	8003476 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003466:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800346a:	3301      	adds	r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	b25a      	sxtb	r2, r3
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003476:	2301      	movs	r3, #1
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800347a:	e001      	b.n	8003480 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800347c:	2300      	movs	r3, #0
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800348a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800348c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800348e:	4618      	mov	r0, r3
 8003490:	3740      	adds	r7, #64	; 0x40
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08c      	sub	sp, #48	; 0x30
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <xQueueReceive+0x30>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	623b      	str	r3, [r7, #32]
}
 80034c4:	bf00      	nop
 80034c6:	e7fe      	b.n	80034c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <xQueueReceive+0x3e>
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <xQueueReceive+0x42>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <xQueueReceive+0x44>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <xQueueReceive+0x5e>
	__asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	61fb      	str	r3, [r7, #28]
}
 80034f2:	bf00      	nop
 80034f4:	e7fe      	b.n	80034f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034f6:	f001 f83b 	bl	8004570 <xTaskGetSchedulerState>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <xQueueReceive+0x6e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <xQueueReceive+0x72>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <xQueueReceive+0x74>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xQueueReceive+0x8e>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	61bb      	str	r3, [r7, #24]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003526:	f001 fd7d 	bl	8005024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01f      	beq.n	8003576 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800353a:	f000 f8f7 	bl	800372c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	1e5a      	subs	r2, r3, #1
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00f      	beq.n	800356e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	3310      	adds	r3, #16
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fe4e 	bl	80041f4 <xTaskRemoveFromEventList>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800355e:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <xQueueReceive+0x1bc>)
 8003560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800356e:	f001 fd89 	bl	8005084 <vPortExitCritical>
				return pdPASS;
 8003572:	2301      	movs	r3, #1
 8003574:	e069      	b.n	800364a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d103      	bne.n	8003584 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800357c:	f001 fd82 	bl	8005084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003580:	2300      	movs	r3, #0
 8003582:	e062      	b.n	800364a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800358a:	f107 0310 	add.w	r3, r7, #16
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fe94 	bl	80042bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003598:	f001 fd74 	bl	8005084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800359c:	f000 fc06 	bl	8003dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035a0:	f001 fd40 	bl	8005024 <vPortEnterCritical>
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d103      	bne.n	80035ba <xQueueReceive+0x122>
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d103      	bne.n	80035d0 <xQueueReceive+0x138>
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d0:	f001 fd58 	bl	8005084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035d4:	1d3a      	adds	r2, r7, #4
 80035d6:	f107 0310 	add.w	r3, r7, #16
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fe83 	bl	80042e8 <xTaskCheckForTimeOut>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d123      	bne.n	8003630 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035ea:	f000 f917 	bl	800381c <prvIsQueueEmpty>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d017      	beq.n	8003624 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	3324      	adds	r3, #36	; 0x24
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fda9 	bl	8004154 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003604:	f000 f8b8 	bl	8003778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003608:	f000 fbde 	bl	8003dc8 <xTaskResumeAll>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d189      	bne.n	8003526 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <xQueueReceive+0x1bc>)
 8003614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	e780      	b.n	8003526 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003626:	f000 f8a7 	bl	8003778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800362a:	f000 fbcd 	bl	8003dc8 <xTaskResumeAll>
 800362e:	e77a      	b.n	8003526 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003632:	f000 f8a1 	bl	8003778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003636:	f000 fbc7 	bl	8003dc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800363a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363c:	f000 f8ee 	bl	800381c <prvIsQueueEmpty>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	f43f af6f 	beq.w	8003526 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003648:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800364a:	4618      	mov	r0, r3
 800364c:	3730      	adds	r7, #48	; 0x30
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000ed04 	.word	0xe000ed04

08003658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10d      	bne.n	8003692 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d14d      	bne.n	800371a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 ff92 	bl	80045ac <xTaskPriorityDisinherit>
 8003688:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	e043      	b.n	800371a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d119      	bne.n	80036cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6858      	ldr	r0, [r3, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	461a      	mov	r2, r3
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	f002 fa3b 	bl	8005b1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	441a      	add	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d32b      	bcc.n	800371a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	e026      	b.n	800371a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68d8      	ldr	r0, [r3, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	461a      	mov	r2, r3
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	f002 fa21 	bl	8005b1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	425b      	negs	r3, r3
 80036e6:	441a      	add	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d207      	bcs.n	8003708 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	425b      	negs	r3, r3
 8003702:	441a      	add	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d105      	bne.n	800371a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	3b01      	subs	r3, #1
 8003718:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003722:	697b      	ldr	r3, [r7, #20]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	441a      	add	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	d303      	bcc.n	8003760 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68d9      	ldr	r1, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	461a      	mov	r2, r3
 800376a:	6838      	ldr	r0, [r7, #0]
 800376c:	f002 f9d7 	bl	8005b1e <memcpy>
	}
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003780:	f001 fc50 	bl	8005024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800378a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800378c:	e011      	b.n	80037b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d012      	beq.n	80037bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3324      	adds	r3, #36	; 0x24
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fd2a 	bl	80041f4 <xTaskRemoveFromEventList>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037a6:	f000 fe01 	bl	80043ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	dce9      	bgt.n	800378e <prvUnlockQueue+0x16>
 80037ba:	e000      	b.n	80037be <prvUnlockQueue+0x46>
					break;
 80037bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	22ff      	movs	r2, #255	; 0xff
 80037c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037c6:	f001 fc5d 	bl	8005084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037ca:	f001 fc2b 	bl	8005024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d6:	e011      	b.n	80037fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d012      	beq.n	8003806 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3310      	adds	r3, #16
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fd05 	bl	80041f4 <xTaskRemoveFromEventList>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037f0:	f000 fddc 	bl	80043ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003800:	2b00      	cmp	r3, #0
 8003802:	dce9      	bgt.n	80037d8 <prvUnlockQueue+0x60>
 8003804:	e000      	b.n	8003808 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003806:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	22ff      	movs	r2, #255	; 0xff
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003810:	f001 fc38 	bl	8005084 <vPortExitCritical>
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003824:	f001 fbfe 	bl	8005024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e001      	b.n	800383a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800383a:	f001 fc23 	bl	8005084 <vPortExitCritical>

	return xReturn;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003850:	f001 fbe8 	bl	8005024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	429a      	cmp	r2, r3
 800385e:	d102      	bne.n	8003866 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e001      	b.n	800386a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800386a:	f001 fc0b 	bl	8005084 <vPortExitCritical>

	return xReturn;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e014      	b.n	80038b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <vQueueAddToRegistry+0x50>)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10b      	bne.n	80038ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003894:	490c      	ldr	r1, [pc, #48]	; (80038c8 <vQueueAddToRegistry+0x50>)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800389e:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <vQueueAddToRegistry+0x50>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038aa:	e006      	b.n	80038ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b07      	cmp	r3, #7
 80038b6:	d9e7      	bls.n	8003888 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	200008a8 	.word	0x200008a8

080038cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038dc:	f001 fba2 	bl	8005024 <vPortEnterCritical>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d103      	bne.n	80038f6 <vQueueWaitForMessageRestricted+0x2a>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038fc:	b25b      	sxtb	r3, r3
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d103      	bne.n	800390c <vQueueWaitForMessageRestricted+0x40>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800390c:	f001 fbba 	bl	8005084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3324      	adds	r3, #36	; 0x24
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fc3b 	bl	800419c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003926:	6978      	ldr	r0, [r7, #20]
 8003928:	f7ff ff26 	bl	8003778 <prvUnlockQueue>
	}
 800392c:	bf00      	nop
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08e      	sub	sp, #56	; 0x38
 8003938:	af04      	add	r7, sp, #16
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	623b      	str	r3, [r7, #32]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xTaskCreateStatic+0x46>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	61fb      	str	r3, [r7, #28]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800397a:	235c      	movs	r3, #92	; 0x5c
 800397c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b5c      	cmp	r3, #92	; 0x5c
 8003982:	d00a      	beq.n	800399a <xTaskCreateStatic+0x66>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	61bb      	str	r3, [r7, #24]
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800399a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01e      	beq.n	80039e0 <xTaskCreateStatic+0xac>
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01b      	beq.n	80039e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039ba:	2300      	movs	r3, #0
 80039bc:	9303      	str	r3, [sp, #12]
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	9302      	str	r3, [sp, #8]
 80039c2:	f107 0314 	add.w	r3, r7, #20
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f850 	bl	8003a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039da:	f000 f8dd 	bl	8003b98 <prvAddNewTaskToReadyList>
 80039de:	e001      	b.n	80039e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039e4:	697b      	ldr	r3, [r7, #20]
	}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3728      	adds	r7, #40	; 0x28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b08c      	sub	sp, #48	; 0x30
 80039f2:	af04      	add	r7, sp, #16
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fc30 	bl	8005268 <pvPortMalloc>
 8003a08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a10:	205c      	movs	r0, #92	; 0x5c
 8003a12:	f001 fc29 	bl	8005268 <pvPortMalloc>
 8003a16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
 8003a24:	e005      	b.n	8003a32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a26:	6978      	ldr	r0, [r7, #20]
 8003a28:	f001 fcea 	bl	8005400 <vPortFree>
 8003a2c:	e001      	b.n	8003a32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d017      	beq.n	8003a68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9303      	str	r3, [sp, #12]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	9302      	str	r3, [sp, #8]
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f80e 	bl	8003a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a5c:	69f8      	ldr	r0, [r7, #28]
 8003a5e:	f000 f89b 	bl	8003b98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e002      	b.n	8003a6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	461a      	mov	r2, r3
 8003a90:	21a5      	movs	r1, #165	; 0xa5
 8003a92:	f001 ffc9 	bl	8005a28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f023 0307 	bic.w	r3, r3, #7
 8003aae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	617b      	str	r3, [r7, #20]
}
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01f      	beq.n	8003b16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	e012      	b.n	8003b02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	7819      	ldrb	r1, [r3, #0]
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	3334      	adds	r3, #52	; 0x34
 8003aec:	460a      	mov	r2, r1
 8003aee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	3301      	adds	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	2b0f      	cmp	r3, #15
 8003b06:	d9e9      	bls.n	8003adc <prvInitialiseNewTask+0x64>
 8003b08:	e000      	b.n	8003b0c <prvInitialiseNewTask+0x94>
			{
				break;
 8003b0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b14:	e003      	b.n	8003b1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	2b37      	cmp	r3, #55	; 0x37
 8003b22:	d901      	bls.n	8003b28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b24:	2337      	movs	r3, #55	; 0x37
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	2200      	movs	r2, #0
 8003b38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff f978 	bl	8002e34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	3318      	adds	r3, #24
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff f973 	bl	8002e34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	2200      	movs	r2, #0
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	68f9      	ldr	r1, [r7, #12]
 8003b76:	69b8      	ldr	r0, [r7, #24]
 8003b78:	f001 f928 	bl	8004dcc <pxPortInitialiseStack>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b8e:	bf00      	nop
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ba0:	f001 fa40 	bl	8005024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <prvAddNewTaskToReadyList+0xc4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <prvAddNewTaskToReadyList+0xc4>)
 8003bac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <prvAddNewTaskToReadyList+0xc8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bb6:	4a2a      	ldr	r2, [pc, #168]	; (8003c60 <prvAddNewTaskToReadyList+0xc8>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <prvAddNewTaskToReadyList+0xc4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d110      	bne.n	8003be6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bc4:	f000 fc16 	bl	80043f4 <prvInitialiseTaskLists>
 8003bc8:	e00d      	b.n	8003be6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <prvAddNewTaskToReadyList+0xcc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <prvAddNewTaskToReadyList+0xc8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d802      	bhi.n	8003be6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <prvAddNewTaskToReadyList+0xc8>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <prvAddNewTaskToReadyList+0xd0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <prvAddNewTaskToReadyList+0xd0>)
 8003bee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <prvAddNewTaskToReadyList+0xd0>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <prvAddNewTaskToReadyList+0xd4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d903      	bls.n	8003c0c <prvAddNewTaskToReadyList+0x74>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <prvAddNewTaskToReadyList+0xd4>)
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <prvAddNewTaskToReadyList+0xd8>)
 8003c1a:	441a      	add	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f7ff f913 	bl	8002e4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c28:	f001 fa2c 	bl	8005084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <prvAddNewTaskToReadyList+0xcc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00e      	beq.n	8003c52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <prvAddNewTaskToReadyList+0xc8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d207      	bcs.n	8003c52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c42:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <prvAddNewTaskToReadyList+0xdc>)
 8003c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000dbc 	.word	0x20000dbc
 8003c60:	200008e8 	.word	0x200008e8
 8003c64:	20000dc8 	.word	0x20000dc8
 8003c68:	20000dd8 	.word	0x20000dd8
 8003c6c:	20000dc4 	.word	0x20000dc4
 8003c70:	200008ec 	.word	0x200008ec
 8003c74:	e000ed04 	.word	0xe000ed04

08003c78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d017      	beq.n	8003cba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <vTaskDelay+0x60>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <vTaskDelay+0x30>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	60bb      	str	r3, [r7, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ca8:	f000 f880 	bl	8003dac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cac:	2100      	movs	r1, #0
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fcea 	bl	8004688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cb4:	f000 f888 	bl	8003dc8 <xTaskResumeAll>
 8003cb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <vTaskDelay+0x64>)
 8003cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000de4 	.word	0x20000de4
 8003cdc:	e000ed04 	.word	0xe000ed04

08003ce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cee:	463a      	mov	r2, r7
 8003cf0:	1d39      	adds	r1, r7, #4
 8003cf2:	f107 0308 	add.w	r3, r7, #8
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff f848 	bl	8002d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	9202      	str	r2, [sp, #8]
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	4921      	ldr	r1, [pc, #132]	; (8003d94 <vTaskStartScheduler+0xb4>)
 8003d10:	4821      	ldr	r0, [pc, #132]	; (8003d98 <vTaskStartScheduler+0xb8>)
 8003d12:	f7ff fe0f 	bl	8003934 <xTaskCreateStatic>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a20      	ldr	r2, [pc, #128]	; (8003d9c <vTaskStartScheduler+0xbc>)
 8003d1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <vTaskStartScheduler+0xbc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d24:	2301      	movs	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e001      	b.n	8003d2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d34:	f000 fcfc 	bl	8004730 <xTimerCreateTimerTask>
 8003d38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d116      	bne.n	8003d6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	613b      	str	r3, [r7, #16]
}
 8003d52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <vTaskStartScheduler+0xc0>)
 8003d56:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <vTaskStartScheduler+0xc4>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <vTaskStartScheduler+0xc8>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d68:	f001 f8ba 	bl	8004ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d6c:	e00e      	b.n	8003d8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d10a      	bne.n	8003d8c <vTaskStartScheduler+0xac>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	60fb      	str	r3, [r7, #12]
}
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <vTaskStartScheduler+0xaa>
}
 8003d8c:	bf00      	nop
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	0800600c 	.word	0x0800600c
 8003d98:	080043c5 	.word	0x080043c5
 8003d9c:	20000de0 	.word	0x20000de0
 8003da0:	20000ddc 	.word	0x20000ddc
 8003da4:	20000dc8 	.word	0x20000dc8
 8003da8:	20000dc0 	.word	0x20000dc0

08003dac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <vTaskSuspendAll+0x18>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a03      	ldr	r2, [pc, #12]	; (8003dc4 <vTaskSuspendAll+0x18>)
 8003db8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	20000de4 	.word	0x20000de4

08003dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dd6:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <xTaskResumeAll+0x118>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	603b      	str	r3, [r7, #0]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003df4:	f001 f916 	bl	8005024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003df8:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <xTaskResumeAll+0x118>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	4a38      	ldr	r2, [pc, #224]	; (8003ee0 <xTaskResumeAll+0x118>)
 8003e00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e02:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <xTaskResumeAll+0x118>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d162      	bne.n	8003ed0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <xTaskResumeAll+0x11c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d05e      	beq.n	8003ed0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e12:	e02f      	b.n	8003e74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <xTaskResumeAll+0x120>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3318      	adds	r3, #24
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff f871 	bl	8002f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f86c 	bl	8002f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	4b2d      	ldr	r3, [pc, #180]	; (8003eec <xTaskResumeAll+0x124>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d903      	bls.n	8003e44 <xTaskResumeAll+0x7c>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <xTaskResumeAll+0x124>)
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4a27      	ldr	r2, [pc, #156]	; (8003ef0 <xTaskResumeAll+0x128>)
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f7fe fff7 	bl	8002e4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	4b23      	ldr	r3, [pc, #140]	; (8003ef4 <xTaskResumeAll+0x12c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <xTaskResumeAll+0x130>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e74:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <xTaskResumeAll+0x120>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1cb      	bne.n	8003e14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e82:	f000 fb55 	bl	8004530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e86:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <xTaskResumeAll+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d010      	beq.n	8003eb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e92:	f000 f847 	bl	8003f24 <xTaskIncrementTick>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e9c:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <xTaskResumeAll+0x130>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f1      	bne.n	8003e92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <xTaskResumeAll+0x134>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <xTaskResumeAll+0x130>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <xTaskResumeAll+0x138>)
 8003ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ed0:	f001 f8d8 	bl	8005084 <vPortExitCritical>

	return xAlreadyYielded;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000de4 	.word	0x20000de4
 8003ee4:	20000dbc 	.word	0x20000dbc
 8003ee8:	20000d7c 	.word	0x20000d7c
 8003eec:	20000dc4 	.word	0x20000dc4
 8003ef0:	200008ec 	.word	0x200008ec
 8003ef4:	200008e8 	.word	0x200008e8
 8003ef8:	20000dd0 	.word	0x20000dd0
 8003efc:	20000dcc 	.word	0x20000dcc
 8003f00:	e000ed04 	.word	0xe000ed04

08003f04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <xTaskGetTickCount+0x1c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f10:	687b      	ldr	r3, [r7, #4]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000dc0 	.word	0x20000dc0

08003f24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f2e:	4b4f      	ldr	r3, [pc, #316]	; (800406c <xTaskIncrementTick+0x148>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f040 808f 	bne.w	8004056 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f38:	4b4d      	ldr	r3, [pc, #308]	; (8004070 <xTaskIncrementTick+0x14c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f40:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <xTaskIncrementTick+0x14c>)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d120      	bne.n	8003f8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f4c:	4b49      	ldr	r3, [pc, #292]	; (8004074 <xTaskIncrementTick+0x150>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <xTaskIncrementTick+0x48>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	603b      	str	r3, [r7, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <xTaskIncrementTick+0x46>
 8003f6c:	4b41      	ldr	r3, [pc, #260]	; (8004074 <xTaskIncrementTick+0x150>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <xTaskIncrementTick+0x154>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a3f      	ldr	r2, [pc, #252]	; (8004074 <xTaskIncrementTick+0x150>)
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4a3f      	ldr	r2, [pc, #252]	; (8004078 <xTaskIncrementTick+0x154>)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	4b3e      	ldr	r3, [pc, #248]	; (800407c <xTaskIncrementTick+0x158>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	4a3d      	ldr	r2, [pc, #244]	; (800407c <xTaskIncrementTick+0x158>)
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	f000 fad1 	bl	8004530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f8e:	4b3c      	ldr	r3, [pc, #240]	; (8004080 <xTaskIncrementTick+0x15c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d349      	bcc.n	800402c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f98:	4b36      	ldr	r3, [pc, #216]	; (8004074 <xTaskIncrementTick+0x150>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <xTaskIncrementTick+0x15c>)
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	601a      	str	r2, [r3, #0]
					break;
 8003faa:	e03f      	b.n	800402c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fac:	4b31      	ldr	r3, [pc, #196]	; (8004074 <xTaskIncrementTick+0x150>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d203      	bcs.n	8003fcc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fc4:	4a2e      	ldr	r2, [pc, #184]	; (8004080 <xTaskIncrementTick+0x15c>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fca:	e02f      	b.n	800402c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe ff99 	bl	8002f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe ff90 	bl	8002f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <xTaskIncrementTick+0x160>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d903      	bls.n	8003ffc <xTaskIncrementTick+0xd8>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	4a22      	ldr	r2, [pc, #136]	; (8004084 <xTaskIncrementTick+0x160>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <xTaskIncrementTick+0x164>)
 800400a:	441a      	add	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7fe ff1b 	bl	8002e4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <xTaskIncrementTick+0x168>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	429a      	cmp	r2, r3
 8004024:	d3b8      	bcc.n	8003f98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800402a:	e7b5      	b.n	8003f98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800402c:	4b17      	ldr	r3, [pc, #92]	; (800408c <xTaskIncrementTick+0x168>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	4915      	ldr	r1, [pc, #84]	; (8004088 <xTaskIncrementTick+0x164>)
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d901      	bls.n	8004048 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <xTaskIncrementTick+0x16c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004050:	2301      	movs	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e004      	b.n	8004060 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <xTaskIncrementTick+0x170>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <xTaskIncrementTick+0x170>)
 800405e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004060:	697b      	ldr	r3, [r7, #20]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000de4 	.word	0x20000de4
 8004070:	20000dc0 	.word	0x20000dc0
 8004074:	20000d74 	.word	0x20000d74
 8004078:	20000d78 	.word	0x20000d78
 800407c:	20000dd4 	.word	0x20000dd4
 8004080:	20000ddc 	.word	0x20000ddc
 8004084:	20000dc4 	.word	0x20000dc4
 8004088:	200008ec 	.word	0x200008ec
 800408c:	200008e8 	.word	0x200008e8
 8004090:	20000dd0 	.word	0x20000dd0
 8004094:	20000dcc 	.word	0x20000dcc

08004098 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800409e:	4b28      	ldr	r3, [pc, #160]	; (8004140 <vTaskSwitchContext+0xa8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040a6:	4b27      	ldr	r3, [pc, #156]	; (8004144 <vTaskSwitchContext+0xac>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040ac:	e041      	b.n	8004132 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80040ae:	4b25      	ldr	r3, [pc, #148]	; (8004144 <vTaskSwitchContext+0xac>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b4:	4b24      	ldr	r3, [pc, #144]	; (8004148 <vTaskSwitchContext+0xb0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e010      	b.n	80040de <vTaskSwitchContext+0x46>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	607b      	str	r3, [r7, #4]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <vTaskSwitchContext+0x3e>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3b01      	subs	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	491b      	ldr	r1, [pc, #108]	; (800414c <vTaskSwitchContext+0xb4>)
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0e4      	beq.n	80040bc <vTaskSwitchContext+0x24>
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4a13      	ldr	r2, [pc, #76]	; (800414c <vTaskSwitchContext+0xb4>)
 80040fe:	4413      	add	r3, r2
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3308      	adds	r3, #8
 8004114:	429a      	cmp	r2, r3
 8004116:	d104      	bne.n	8004122 <vTaskSwitchContext+0x8a>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a09      	ldr	r2, [pc, #36]	; (8004150 <vTaskSwitchContext+0xb8>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4a06      	ldr	r2, [pc, #24]	; (8004148 <vTaskSwitchContext+0xb0>)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6013      	str	r3, [r2, #0]
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000de4 	.word	0x20000de4
 8004144:	20000dd0 	.word	0x20000dd0
 8004148:	20000dc4 	.word	0x20000dc4
 800414c:	200008ec 	.word	0x200008ec
 8004150:	200008e8 	.word	0x200008e8

08004154 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	60fb      	str	r3, [r7, #12]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <vTaskPlaceOnEventList+0x44>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3318      	adds	r3, #24
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fe fe87 	bl	8002e96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004188:	2101      	movs	r1, #1
 800418a:	6838      	ldr	r0, [r7, #0]
 800418c:	f000 fa7c 	bl	8004688 <prvAddCurrentTaskToDelayedList>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200008e8 	.word	0x200008e8

0800419c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	617b      	str	r3, [r7, #20]
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3318      	adds	r3, #24
 80041ca:	4619      	mov	r1, r3
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7fe fe3e 	bl	8002e4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295
 80041dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	68b8      	ldr	r0, [r7, #8]
 80041e2:	f000 fa51 	bl	8004688 <prvAddCurrentTaskToDelayedList>
	}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200008e8 	.word	0x200008e8

080041f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	60fb      	str	r3, [r7, #12]
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3318      	adds	r3, #24
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe fe6f 	bl	8002f08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <xTaskRemoveFromEventList+0xb0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11d      	bne.n	800426e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fe66 	bl	8002f08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <xTaskRemoveFromEventList+0xb4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d903      	bls.n	8004250 <xTaskRemoveFromEventList+0x5c>
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <xTaskRemoveFromEventList+0xb4>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4a13      	ldr	r2, [pc, #76]	; (80042ac <xTaskRemoveFromEventList+0xb8>)
 800425e:	441a      	add	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3304      	adds	r3, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f7fe fdf1 	bl	8002e4e <vListInsertEnd>
 800426c:	e005      	b.n	800427a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3318      	adds	r3, #24
 8004272:	4619      	mov	r1, r3
 8004274:	480e      	ldr	r0, [pc, #56]	; (80042b0 <xTaskRemoveFromEventList+0xbc>)
 8004276:	f7fe fdea 	bl	8002e4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <xTaskRemoveFromEventList+0xc0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	429a      	cmp	r2, r3
 8004286:	d905      	bls.n	8004294 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <xTaskRemoveFromEventList+0xc4>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e001      	b.n	8004298 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004298:	697b      	ldr	r3, [r7, #20]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000de4 	.word	0x20000de4
 80042a8:	20000dc4 	.word	0x20000dc4
 80042ac:	200008ec 	.word	0x200008ec
 80042b0:	20000d7c 	.word	0x20000d7c
 80042b4:	200008e8 	.word	0x200008e8
 80042b8:	20000dd0 	.word	0x20000dd0

080042bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <vTaskInternalSetTimeOutState+0x24>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <vTaskInternalSetTimeOutState+0x28>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	605a      	str	r2, [r3, #4]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000dd4 	.word	0x20000dd4
 80042e4:	20000dc0 	.word	0x20000dc0

080042e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	613b      	str	r3, [r7, #16]
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
}
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800432a:	f000 fe7b 	bl	8005024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <xTaskCheckForTimeOut+0xbc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d102      	bne.n	800434e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	e023      	b.n	8004396 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <xTaskCheckForTimeOut+0xc0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d007      	beq.n	800436a <xTaskCheckForTimeOut+0x82>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004364:	2301      	movs	r3, #1
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e015      	b.n	8004396 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	429a      	cmp	r2, r3
 8004372:	d20b      	bcs.n	800438c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1ad2      	subs	r2, r2, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ff9b 	bl	80042bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	e004      	b.n	8004396 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004392:	2301      	movs	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004396:	f000 fe75 	bl	8005084 <vPortExitCritical>

	return xReturn;
 800439a:	69fb      	ldr	r3, [r7, #28]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3720      	adds	r7, #32
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000dc0 	.word	0x20000dc0
 80043a8:	20000dd4 	.word	0x20000dd4

080043ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <vTaskMissedYield+0x14>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	20000dd0 	.word	0x20000dd0

080043c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043cc:	f000 f852 	bl	8004474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <prvIdleTask+0x28>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d9f9      	bls.n	80043cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <prvIdleTask+0x2c>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043e8:	e7f0      	b.n	80043cc <prvIdleTask+0x8>
 80043ea:	bf00      	nop
 80043ec:	200008ec 	.word	0x200008ec
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	e00c      	b.n	800441a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4a12      	ldr	r2, [pc, #72]	; (8004454 <prvInitialiseTaskLists+0x60>)
 800440c:	4413      	add	r3, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe fcf0 	bl	8002df4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3301      	adds	r3, #1
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b37      	cmp	r3, #55	; 0x37
 800441e:	d9ef      	bls.n	8004400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004420:	480d      	ldr	r0, [pc, #52]	; (8004458 <prvInitialiseTaskLists+0x64>)
 8004422:	f7fe fce7 	bl	8002df4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004426:	480d      	ldr	r0, [pc, #52]	; (800445c <prvInitialiseTaskLists+0x68>)
 8004428:	f7fe fce4 	bl	8002df4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800442c:	480c      	ldr	r0, [pc, #48]	; (8004460 <prvInitialiseTaskLists+0x6c>)
 800442e:	f7fe fce1 	bl	8002df4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004432:	480c      	ldr	r0, [pc, #48]	; (8004464 <prvInitialiseTaskLists+0x70>)
 8004434:	f7fe fcde 	bl	8002df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004438:	480b      	ldr	r0, [pc, #44]	; (8004468 <prvInitialiseTaskLists+0x74>)
 800443a:	f7fe fcdb 	bl	8002df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800443e:	4b0b      	ldr	r3, [pc, #44]	; (800446c <prvInitialiseTaskLists+0x78>)
 8004440:	4a05      	ldr	r2, [pc, #20]	; (8004458 <prvInitialiseTaskLists+0x64>)
 8004442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004444:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <prvInitialiseTaskLists+0x7c>)
 8004446:	4a05      	ldr	r2, [pc, #20]	; (800445c <prvInitialiseTaskLists+0x68>)
 8004448:	601a      	str	r2, [r3, #0]
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	200008ec 	.word	0x200008ec
 8004458:	20000d4c 	.word	0x20000d4c
 800445c:	20000d60 	.word	0x20000d60
 8004460:	20000d7c 	.word	0x20000d7c
 8004464:	20000d90 	.word	0x20000d90
 8004468:	20000da8 	.word	0x20000da8
 800446c:	20000d74 	.word	0x20000d74
 8004470:	20000d78 	.word	0x20000d78

08004474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800447a:	e019      	b.n	80044b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800447c:	f000 fdd2 	bl	8005024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <prvCheckTasksWaitingTermination+0x50>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fd3b 	bl	8002f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <prvCheckTasksWaitingTermination+0x54>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3b01      	subs	r3, #1
 8004498:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <prvCheckTasksWaitingTermination+0x54>)
 800449a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <prvCheckTasksWaitingTermination+0x58>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <prvCheckTasksWaitingTermination+0x58>)
 80044a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044a6:	f000 fded 	bl	8005084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f810 	bl	80044d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <prvCheckTasksWaitingTermination+0x58>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e1      	bne.n	800447c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000d90 	.word	0x20000d90
 80044c8:	20000dbc 	.word	0x20000dbc
 80044cc:	20000da4 	.word	0x20000da4

080044d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 ff8a 	bl	8005400 <vPortFree>
				vPortFree( pxTCB );
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 ff87 	bl	8005400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044f2:	e018      	b.n	8004526 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d103      	bne.n	8004506 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 ff7e 	bl	8005400 <vPortFree>
	}
 8004504:	e00f      	b.n	8004526 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800450c:	2b02      	cmp	r3, #2
 800450e:	d00a      	beq.n	8004526 <prvDeleteTCB+0x56>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60fb      	str	r3, [r7, #12]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <prvDeleteTCB+0x54>
	}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <prvResetNextTaskUnblockTime+0x38>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <prvResetNextTaskUnblockTime+0x3c>)
 8004542:	f04f 32ff 	mov.w	r2, #4294967295
 8004546:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004548:	e008      	b.n	800455c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <prvResetNextTaskUnblockTime+0x38>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4a04      	ldr	r2, [pc, #16]	; (800456c <prvResetNextTaskUnblockTime+0x3c>)
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20000d74 	.word	0x20000d74
 800456c:	20000ddc 	.word	0x20000ddc

08004570 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <xTaskGetSchedulerState+0x34>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800457e:	2301      	movs	r3, #1
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	e008      	b.n	8004596 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004584:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <xTaskGetSchedulerState+0x38>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800458c:	2302      	movs	r3, #2
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	e001      	b.n	8004596 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004596:	687b      	ldr	r3, [r7, #4]
	}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	20000dc8 	.word	0x20000dc8
 80045a8:	20000de4 	.word	0x20000de4

080045ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d056      	beq.n	8004670 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045c2:	4b2e      	ldr	r3, [pc, #184]	; (800467c <xTaskPriorityDisinherit+0xd0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d00a      	beq.n	80045e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	60fb      	str	r3, [r7, #12]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	60bb      	str	r3, [r7, #8]
}
 80045fc:	bf00      	nop
 80045fe:	e7fe      	b.n	80045fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	1e5a      	subs	r2, r3, #1
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004612:	429a      	cmp	r2, r3
 8004614:	d02c      	beq.n	8004670 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	2b00      	cmp	r3, #0
 800461c:	d128      	bne.n	8004670 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3304      	adds	r3, #4
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fc70 	bl	8002f08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <xTaskPriorityDisinherit+0xd4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d903      	bls.n	8004650 <xTaskPriorityDisinherit+0xa4>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <xTaskPriorityDisinherit+0xd4>)
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4a09      	ldr	r2, [pc, #36]	; (8004684 <xTaskPriorityDisinherit+0xd8>)
 800465e:	441a      	add	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	3304      	adds	r3, #4
 8004664:	4619      	mov	r1, r3
 8004666:	4610      	mov	r0, r2
 8004668:	f7fe fbf1 	bl	8002e4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004670:	697b      	ldr	r3, [r7, #20]
	}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	200008e8 	.word	0x200008e8
 8004680:	20000dc4 	.word	0x20000dc4
 8004684:	200008ec 	.word	0x200008ec

08004688 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004692:	4b21      	ldr	r3, [pc, #132]	; (8004718 <prvAddCurrentTaskToDelayedList+0x90>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004698:	4b20      	ldr	r3, [pc, #128]	; (800471c <prvAddCurrentTaskToDelayedList+0x94>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fc32 	bl	8002f08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d10a      	bne.n	80046c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b2:	4b1a      	ldr	r3, [pc, #104]	; (800471c <prvAddCurrentTaskToDelayedList+0x94>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4819      	ldr	r0, [pc, #100]	; (8004720 <prvAddCurrentTaskToDelayedList+0x98>)
 80046bc:	f7fe fbc7 	bl	8002e4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046c0:	e026      	b.n	8004710 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4413      	add	r3, r2
 80046c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <prvAddCurrentTaskToDelayedList+0x94>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d209      	bcs.n	80046ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <prvAddCurrentTaskToDelayedList+0x94>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f7fe fbd5 	bl	8002e96 <vListInsert>
}
 80046ec:	e010      	b.n	8004710 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <prvAddCurrentTaskToDelayedList+0xa0>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <prvAddCurrentTaskToDelayedList+0x94>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f7fe fbcb 	bl	8002e96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	d202      	bcs.n	8004710 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800470a:	4a08      	ldr	r2, [pc, #32]	; (800472c <prvAddCurrentTaskToDelayedList+0xa4>)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6013      	str	r3, [r2, #0]
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000dc0 	.word	0x20000dc0
 800471c:	200008e8 	.word	0x200008e8
 8004720:	20000da8 	.word	0x20000da8
 8004724:	20000d78 	.word	0x20000d78
 8004728:	20000d74 	.word	0x20000d74
 800472c:	20000ddc 	.word	0x20000ddc

08004730 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800473a:	f000 fb07 	bl	8004d4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800473e:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <xTimerCreateTimerTask+0x80>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d021      	beq.n	800478a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800474e:	1d3a      	adds	r2, r7, #4
 8004750:	f107 0108 	add.w	r1, r7, #8
 8004754:	f107 030c 	add.w	r3, r7, #12
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fb31 	bl	8002dc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	9202      	str	r2, [sp, #8]
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	2302      	movs	r3, #2
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	2300      	movs	r3, #0
 800476e:	460a      	mov	r2, r1
 8004770:	4910      	ldr	r1, [pc, #64]	; (80047b4 <xTimerCreateTimerTask+0x84>)
 8004772:	4811      	ldr	r0, [pc, #68]	; (80047b8 <xTimerCreateTimerTask+0x88>)
 8004774:	f7ff f8de 	bl	8003934 <xTaskCreateStatic>
 8004778:	4603      	mov	r3, r0
 800477a:	4a10      	ldr	r2, [pc, #64]	; (80047bc <xTimerCreateTimerTask+0x8c>)
 800477c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800477e:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <xTimerCreateTimerTask+0x8c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004786:	2301      	movs	r3, #1
 8004788:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	613b      	str	r3, [r7, #16]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047a6:	697b      	ldr	r3, [r7, #20]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000e18 	.word	0x20000e18
 80047b4:	08006014 	.word	0x08006014
 80047b8:	080048f5 	.word	0x080048f5
 80047bc:	20000e1c 	.word	0x20000e1c

080047c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	; 0x28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	623b      	str	r3, [r7, #32]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047ee:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <xTimerGenericCommand+0x98>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d02a      	beq.n	800484c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b05      	cmp	r3, #5
 8004806:	dc18      	bgt.n	800483a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004808:	f7ff feb2 	bl	8004570 <xTaskGetSchedulerState>
 800480c:	4603      	mov	r3, r0
 800480e:	2b02      	cmp	r3, #2
 8004810:	d109      	bne.n	8004826 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <xTimerGenericCommand+0x98>)
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	f107 0110 	add.w	r1, r7, #16
 800481a:	2300      	movs	r3, #0
 800481c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800481e:	f7fe fca1 	bl	8003164 <xQueueGenericSend>
 8004822:	6278      	str	r0, [r7, #36]	; 0x24
 8004824:	e012      	b.n	800484c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004826:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <xTimerGenericCommand+0x98>)
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	f107 0110 	add.w	r1, r7, #16
 800482e:	2300      	movs	r3, #0
 8004830:	2200      	movs	r2, #0
 8004832:	f7fe fc97 	bl	8003164 <xQueueGenericSend>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24
 8004838:	e008      	b.n	800484c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <xTimerGenericCommand+0x98>)
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	f107 0110 	add.w	r1, r7, #16
 8004842:	2300      	movs	r3, #0
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	f7fe fd8b 	bl	8003360 <xQueueGenericSendFromISR>
 800484a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800484e:	4618      	mov	r0, r3
 8004850:	3728      	adds	r7, #40	; 0x28
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000e18 	.word	0x20000e18

0800485c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004866:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <prvProcessExpiredTimer+0x94>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	3304      	adds	r3, #4
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fb47 	bl	8002f08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d022      	beq.n	80048ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	699a      	ldr	r2, [r3, #24]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	18d1      	adds	r1, r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	6978      	ldr	r0, [r7, #20]
 8004896:	f000 f8d1 	bl	8004a3c <prvInsertTimerInActiveList>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01f      	beq.n	80048e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048a0:	2300      	movs	r3, #0
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2300      	movs	r3, #0
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	2100      	movs	r1, #0
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f7ff ff88 	bl	80047c0 <xTimerGenericCommand>
 80048b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d113      	bne.n	80048e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	60fb      	str	r3, [r7, #12]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	6978      	ldr	r0, [r7, #20]
 80048e6:	4798      	blx	r3
}
 80048e8:	bf00      	nop
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000e10 	.word	0x20000e10

080048f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048fc:	f107 0308 	add.w	r3, r7, #8
 8004900:	4618      	mov	r0, r3
 8004902:	f000 f857 	bl	80049b4 <prvGetNextExpireTime>
 8004906:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4619      	mov	r1, r3
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f803 	bl	8004918 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004912:	f000 f8d5 	bl	8004ac0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004916:	e7f1      	b.n	80048fc <prvTimerTask+0x8>

08004918 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004922:	f7ff fa43 	bl	8003dac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004926:	f107 0308 	add.w	r3, r7, #8
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f866 	bl	80049fc <prvSampleTimeNow>
 8004930:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d130      	bne.n	800499a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <prvProcessTimerOrBlockTask+0x3c>
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	429a      	cmp	r2, r3
 8004944:	d806      	bhi.n	8004954 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004946:	f7ff fa3f 	bl	8003dc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ff85 	bl	800485c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004952:	e024      	b.n	800499e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <prvProcessTimerOrBlockTask+0x90>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <prvProcessTimerOrBlockTask+0x50>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <prvProcessTimerOrBlockTask+0x52>
 8004968:	2300      	movs	r3, #0
 800496a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <prvProcessTimerOrBlockTask+0x94>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4619      	mov	r1, r3
 800497a:	f7fe ffa7 	bl	80038cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800497e:	f7ff fa23 	bl	8003dc8 <xTaskResumeAll>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <prvProcessTimerOrBlockTask+0x98>)
 800498a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	f3bf 8f6f 	isb	sy
}
 8004998:	e001      	b.n	800499e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800499a:	f7ff fa15 	bl	8003dc8 <xTaskResumeAll>
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000e14 	.word	0x20000e14
 80049ac:	20000e18 	.word	0x20000e18
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <prvGetNextExpireTime+0x44>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <prvGetNextExpireTime+0x16>
 80049c6:	2201      	movs	r2, #1
 80049c8:	e000      	b.n	80049cc <prvGetNextExpireTime+0x18>
 80049ca:	2200      	movs	r2, #0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <prvGetNextExpireTime+0x44>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e001      	b.n	80049e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049e8:	68fb      	ldr	r3, [r7, #12]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000e10 	.word	0x20000e10

080049fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a04:	f7ff fa7e 	bl	8003f04 <xTaskGetTickCount>
 8004a08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <prvSampleTimeNow+0x3c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d205      	bcs.n	8004a20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a14:	f000 f936 	bl	8004c84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e002      	b.n	8004a26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a26:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <prvSampleTimeNow+0x3c>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000e20 	.word	0x20000e20

08004a3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d812      	bhi.n	8004a88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e01b      	b.n	8004aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <prvInsertTimerInActiveList+0x7c>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f7fe fa08 	bl	8002e96 <vListInsert>
 8004a86:	e012      	b.n	8004aae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d206      	bcs.n	8004a9e <prvInsertTimerInActiveList+0x62>
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e007      	b.n	8004aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <prvInsertTimerInActiveList+0x80>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f7fe f9f4 	bl	8002e96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004aae:	697b      	ldr	r3, [r7, #20]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000e14 	.word	0x20000e14
 8004abc:	20000e10 	.word	0x20000e10

08004ac0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08e      	sub	sp, #56	; 0x38
 8004ac4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ac6:	e0ca      	b.n	8004c5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	da18      	bge.n	8004b00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	61fb      	str	r3, [r7, #28]
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af6:	6850      	ldr	r0, [r2, #4]
 8004af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afa:	6892      	ldr	r2, [r2, #8]
 8004afc:	4611      	mov	r1, r2
 8004afe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f2c0 80ab 	blt.w	8004c5e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	3304      	adds	r3, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe f9f5 	bl	8002f08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b1e:	463b      	mov	r3, r7
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff6b 	bl	80049fc <prvSampleTimeNow>
 8004b26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b09      	cmp	r3, #9
 8004b2c:	f200 8096 	bhi.w	8004c5c <prvProcessReceivedCommands+0x19c>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <prvProcessReceivedCommands+0x78>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b61 	.word	0x08004b61
 8004b44:	08004bd5 	.word	0x08004bd5
 8004b48:	08004be9 	.word	0x08004be9
 8004b4c:	08004c33 	.word	0x08004c33
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b61 	.word	0x08004b61
 8004b58:	08004bd5 	.word	0x08004bd5
 8004b5c:	08004be9 	.word	0x08004be9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	18d1      	adds	r1, r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b80:	f7ff ff5c 	bl	8004a3c <prvInsertTimerInActiveList>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d069      	beq.n	8004c5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05e      	beq.n	8004c5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	441a      	add	r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2300      	movs	r3, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb2:	f7ff fe05 	bl	80047c0 <xTimerGenericCommand>
 8004bb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d14f      	bne.n	8004c5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	61bb      	str	r3, [r7, #24]
}
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004be6:	e03a      	b.n	8004c5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	617b      	str	r3, [r7, #20]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	18d1      	adds	r1, r2, r3
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c2c:	f7ff ff06 	bl	8004a3c <prvInsertTimerInActiveList>
					break;
 8004c30:	e015      	b.n	8004c5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d103      	bne.n	8004c48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c42:	f000 fbdd 	bl	8005400 <vPortFree>
 8004c46:	e00a      	b.n	8004c5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c5a:	e000      	b.n	8004c5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004c5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c5e:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <prvProcessReceivedCommands+0x1c0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1d39      	adds	r1, r7, #4
 8004c64:	2200      	movs	r2, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fc16 	bl	8003498 <xQueueReceive>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f47f af2a 	bne.w	8004ac8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	3730      	adds	r7, #48	; 0x30
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000e18 	.word	0x20000e18

08004c84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c8a:	e048      	b.n	8004d1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fe f92f 	bl	8002f08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02e      	beq.n	8004d1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d90e      	bls.n	8004cf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cde:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7fe f8d4 	bl	8002e96 <vListInsert>
 8004cee:	e016      	b.n	8004d1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff fd60 	bl	80047c0 <xTimerGenericCommand>
 8004d00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	603b      	str	r3, [r7, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1b1      	bne.n	8004c8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <prvSwitchTimerLists+0xc4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a04      	ldr	r2, [pc, #16]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004d34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d36:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <prvSwitchTimerLists+0xc4>)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	6013      	str	r3, [r2, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000e10 	.word	0x20000e10
 8004d48:	20000e14 	.word	0x20000e14

08004d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d52:	f000 f967 	bl	8005024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <prvCheckForValidListAndQueue+0x60>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d120      	bne.n	8004da0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d5e:	4814      	ldr	r0, [pc, #80]	; (8004db0 <prvCheckForValidListAndQueue+0x64>)
 8004d60:	f7fe f848 	bl	8002df4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d64:	4813      	ldr	r0, [pc, #76]	; (8004db4 <prvCheckForValidListAndQueue+0x68>)
 8004d66:	f7fe f845 	bl	8002df4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <prvCheckForValidListAndQueue+0x6c>)
 8004d6c:	4a10      	ldr	r2, [pc, #64]	; (8004db0 <prvCheckForValidListAndQueue+0x64>)
 8004d6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d70:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <prvCheckForValidListAndQueue+0x70>)
 8004d72:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <prvCheckForValidListAndQueue+0x68>)
 8004d74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d76:	2300      	movs	r3, #0
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <prvCheckForValidListAndQueue+0x74>)
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <prvCheckForValidListAndQueue+0x78>)
 8004d7e:	2110      	movs	r1, #16
 8004d80:	200a      	movs	r0, #10
 8004d82:	f7fe f953 	bl	800302c <xQueueGenericCreateStatic>
 8004d86:	4603      	mov	r3, r0
 8004d88:	4a08      	ldr	r2, [pc, #32]	; (8004dac <prvCheckForValidListAndQueue+0x60>)
 8004d8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d8c:	4b07      	ldr	r3, [pc, #28]	; (8004dac <prvCheckForValidListAndQueue+0x60>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <prvCheckForValidListAndQueue+0x60>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	490b      	ldr	r1, [pc, #44]	; (8004dc8 <prvCheckForValidListAndQueue+0x7c>)
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fd6c 	bl	8003878 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004da0:	f000 f970 	bl	8005084 <vPortExitCritical>
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000e18 	.word	0x20000e18
 8004db0:	20000de8 	.word	0x20000de8
 8004db4:	20000dfc 	.word	0x20000dfc
 8004db8:	20000e10 	.word	0x20000e10
 8004dbc:	20000e14 	.word	0x20000e14
 8004dc0:	20000ec4 	.word	0x20000ec4
 8004dc4:	20000e24 	.word	0x20000e24
 8004dc8:	0800601c 	.word	0x0800601c

08004dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3b04      	subs	r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3b04      	subs	r3, #4
 8004dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b04      	subs	r3, #4
 8004dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004dfc:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <pxPortInitialiseStack+0x64>)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b14      	subs	r3, #20
 8004e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b04      	subs	r3, #4
 8004e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f06f 0202 	mvn.w	r2, #2
 8004e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b20      	subs	r3, #32
 8004e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e22:	68fb      	ldr	r3, [r7, #12]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	08004e35 	.word	0x08004e35

08004e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e3e:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <prvTaskExitError+0x54>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d00a      	beq.n	8004e5e <prvTaskExitError+0x2a>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	60fb      	str	r3, [r7, #12]
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <prvTaskExitError+0x28>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	60bb      	str	r3, [r7, #8]
}
 8004e70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e72:	bf00      	nop
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0fc      	beq.n	8004e74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	2000000c 	.word	0x2000000c
 8004e8c:	00000000 	.word	0x00000000

08004e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <pxCurrentTCBConst2>)
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	6808      	ldr	r0, [r1, #0]
 8004e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9a:	f380 8809 	msr	PSP, r0
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f380 8811 	msr	BASEPRI, r0
 8004eaa:	4770      	bx	lr
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst2>:
 8004eb0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004eb8:	4808      	ldr	r0, [pc, #32]	; (8004edc <prvPortStartFirstTask+0x24>)
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	6800      	ldr	r0, [r0, #0]
 8004ebe:	f380 8808 	msr	MSP, r0
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8814 	msr	CONTROL, r0
 8004eca:	b662      	cpsie	i
 8004ecc:	b661      	cpsie	f
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	df00      	svc	0
 8004ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eda:	bf00      	nop
 8004edc:	e000ed08 	.word	0xe000ed08

08004ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ee6:	4b46      	ldr	r3, [pc, #280]	; (8005000 <xPortStartScheduler+0x120>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a46      	ldr	r2, [pc, #280]	; (8005004 <xPortStartScheduler+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10a      	bne.n	8004f06 <xPortStartScheduler+0x26>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	613b      	str	r3, [r7, #16]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f06:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <xPortStartScheduler+0x120>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a3f      	ldr	r2, [pc, #252]	; (8005008 <xPortStartScheduler+0x128>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10a      	bne.n	8004f26 <xPortStartScheduler+0x46>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	60fb      	str	r3, [r7, #12]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <xPortStartScheduler+0x12c>)
 8004f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	22ff      	movs	r2, #255	; 0xff
 8004f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	4b31      	ldr	r3, [pc, #196]	; (8005010 <xPortStartScheduler+0x130>)
 8004f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f4e:	4b31      	ldr	r3, [pc, #196]	; (8005014 <xPortStartScheduler+0x134>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f54:	e009      	b.n	8004f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f56:	4b2f      	ldr	r3, [pc, #188]	; (8005014 <xPortStartScheduler+0x134>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	4a2d      	ldr	r2, [pc, #180]	; (8005014 <xPortStartScheduler+0x134>)
 8004f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d0ef      	beq.n	8004f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f76:	4b27      	ldr	r3, [pc, #156]	; (8005014 <xPortStartScheduler+0x134>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1c3 0307 	rsb	r3, r3, #7
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d00a      	beq.n	8004f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60bb      	str	r3, [r7, #8]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f98:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <xPortStartScheduler+0x134>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <xPortStartScheduler+0x134>)
 8004fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <xPortStartScheduler+0x134>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004faa:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <xPortStartScheduler+0x134>)
 8004fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <xPortStartScheduler+0x138>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <xPortStartScheduler+0x138>)
 8004fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <xPortStartScheduler+0x138>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a14      	ldr	r2, [pc, #80]	; (8005018 <xPortStartScheduler+0x138>)
 8004fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fce:	f000 f8dd 	bl	800518c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <xPortStartScheduler+0x13c>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fd8:	f000 f8fc 	bl	80051d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <xPortStartScheduler+0x140>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <xPortStartScheduler+0x140>)
 8004fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fe8:	f7ff ff66 	bl	8004eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fec:	f7ff f854 	bl	8004098 <vTaskSwitchContext>
	prvTaskExitError();
 8004ff0:	f7ff ff20 	bl	8004e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	e000ed00 	.word	0xe000ed00
 8005004:	410fc271 	.word	0x410fc271
 8005008:	410fc270 	.word	0x410fc270
 800500c:	e000e400 	.word	0xe000e400
 8005010:	20000f14 	.word	0x20000f14
 8005014:	20000f18 	.word	0x20000f18
 8005018:	e000ed20 	.word	0xe000ed20
 800501c:	2000000c 	.word	0x2000000c
 8005020:	e000ef34 	.word	0xe000ef34

08005024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	607b      	str	r3, [r7, #4]
}
 800503c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <vPortEnterCritical+0x58>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a0d      	ldr	r2, [pc, #52]	; (800507c <vPortEnterCritical+0x58>)
 8005046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <vPortEnterCritical+0x58>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10f      	bne.n	8005070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <vPortEnterCritical+0x5c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <vPortEnterCritical+0x4c>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	603b      	str	r3, [r7, #0]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <vPortEnterCritical+0x4a>
	}
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	2000000c 	.word	0x2000000c
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <vPortExitCritical+0x50>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <vPortExitCritical+0x24>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	607b      	str	r3, [r7, #4]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <vPortExitCritical+0x50>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <vPortExitCritical+0x50>)
 80050b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <vPortExitCritical+0x50>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <vPortExitCritical+0x42>
 80050ba:	2300      	movs	r3, #0
 80050bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f383 8811 	msr	BASEPRI, r3
}
 80050c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c
	...

080050e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050e0:	f3ef 8009 	mrs	r0, PSP
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <pxCurrentTCBConst>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	f01e 0f10 	tst.w	lr, #16
 80050f0:	bf08      	it	eq
 80050f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	6010      	str	r0, [r2, #0]
 80050fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005104:	f380 8811 	msr	BASEPRI, r0
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f7fe ffc2 	bl	8004098 <vTaskSwitchContext>
 8005114:	f04f 0000 	mov.w	r0, #0
 8005118:	f380 8811 	msr	BASEPRI, r0
 800511c:	bc09      	pop	{r0, r3}
 800511e:	6819      	ldr	r1, [r3, #0]
 8005120:	6808      	ldr	r0, [r1, #0]
 8005122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005126:	f01e 0f10 	tst.w	lr, #16
 800512a:	bf08      	it	eq
 800512c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005130:	f380 8809 	msr	PSP, r0
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	f3af 8000 	nop.w

08005140 <pxCurrentTCBConst>:
 8005140:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
}
 8005160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005162:	f7fe fedf 	bl	8003f24 <xTaskIncrementTick>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <xPortSysTickHandler+0x40>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	2300      	movs	r3, #0
 8005176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f383 8811 	msr	BASEPRI, r3
}
 800517e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <vPortSetupTimerInterrupt+0x34>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <vPortSetupTimerInterrupt+0x38>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <vPortSetupTimerInterrupt+0x3c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <vPortSetupTimerInterrupt+0x40>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	099b      	lsrs	r3, r3, #6
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <vPortSetupTimerInterrupt+0x44>)
 80051aa:	3b01      	subs	r3, #1
 80051ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <vPortSetupTimerInterrupt+0x34>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	e000e010 	.word	0xe000e010
 80051c4:	e000e018 	.word	0xe000e018
 80051c8:	20000000 	.word	0x20000000
 80051cc:	10624dd3 	.word	0x10624dd3
 80051d0:	e000e014 	.word	0xe000e014

080051d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051e4 <vPortEnableVFP+0x10>
 80051d8:	6801      	ldr	r1, [r0, #0]
 80051da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051de:	6001      	str	r1, [r0, #0]
 80051e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051e2:	bf00      	nop
 80051e4:	e000ed88 	.word	0xe000ed88

080051e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051ee:	f3ef 8305 	mrs	r3, IPSR
 80051f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d914      	bls.n	8005224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051fa:	4a17      	ldr	r2, [pc, #92]	; (8005258 <vPortValidateInterruptPriority+0x70>)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <vPortValidateInterruptPriority+0x74>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	7afa      	ldrb	r2, [r7, #11]
 800520a:	429a      	cmp	r2, r3
 800520c:	d20a      	bcs.n	8005224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	607b      	str	r3, [r7, #4]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <vPortValidateInterruptPriority+0x78>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <vPortValidateInterruptPriority+0x7c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d90a      	bls.n	800524a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	603b      	str	r3, [r7, #0]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <vPortValidateInterruptPriority+0x60>
	}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	e000e3f0 	.word	0xe000e3f0
 800525c:	20000f14 	.word	0x20000f14
 8005260:	e000ed0c 	.word	0xe000ed0c
 8005264:	20000f18 	.word	0x20000f18

08005268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005274:	f7fe fd9a 	bl	8003dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005278:	4b5b      	ldr	r3, [pc, #364]	; (80053e8 <pvPortMalloc+0x180>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005280:	f000 f920 	bl	80054c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005284:	4b59      	ldr	r3, [pc, #356]	; (80053ec <pvPortMalloc+0x184>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 8093 	bne.w	80053b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01d      	beq.n	80052d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005298:	2208      	movs	r2, #8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f023 0307 	bic.w	r3, r3, #7
 80052b0:	3308      	adds	r3, #8
 80052b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <pvPortMalloc+0x6c>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	617b      	str	r3, [r7, #20]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d06e      	beq.n	80053b8 <pvPortMalloc+0x150>
 80052da:	4b45      	ldr	r3, [pc, #276]	; (80053f0 <pvPortMalloc+0x188>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d869      	bhi.n	80053b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052e4:	4b43      	ldr	r3, [pc, #268]	; (80053f4 <pvPortMalloc+0x18c>)
 80052e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052e8:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <pvPortMalloc+0x18c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ee:	e004      	b.n	80052fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	d903      	bls.n	800530c <pvPortMalloc+0xa4>
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f1      	bne.n	80052f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800530c:	4b36      	ldr	r3, [pc, #216]	; (80053e8 <pvPortMalloc+0x180>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005312:	429a      	cmp	r2, r3
 8005314:	d050      	beq.n	80053b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2208      	movs	r2, #8
 800531c:	4413      	add	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	1ad2      	subs	r2, r2, r3
 8005330:	2308      	movs	r3, #8
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	429a      	cmp	r2, r3
 8005336:	d91f      	bls.n	8005378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4413      	add	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <pvPortMalloc+0xf8>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	613b      	str	r3, [r7, #16]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	1ad2      	subs	r2, r2, r3
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005372:	69b8      	ldr	r0, [r7, #24]
 8005374:	f000 f908 	bl	8005588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <pvPortMalloc+0x188>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <pvPortMalloc+0x188>)
 8005384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005386:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <pvPortMalloc+0x188>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <pvPortMalloc+0x190>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d203      	bcs.n	800539a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <pvPortMalloc+0x188>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <pvPortMalloc+0x190>)
 8005398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <pvPortMalloc+0x184>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <pvPortMalloc+0x194>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <pvPortMalloc+0x194>)
 80053b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053b8:	f7fe fd06 	bl	8003dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <pvPortMalloc+0x174>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60fb      	str	r3, [r7, #12]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <pvPortMalloc+0x172>
	return pvReturn;
 80053dc:	69fb      	ldr	r3, [r7, #28]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20004b24 	.word	0x20004b24
 80053ec:	20004b38 	.word	0x20004b38
 80053f0:	20004b28 	.word	0x20004b28
 80053f4:	20004b1c 	.word	0x20004b1c
 80053f8:	20004b2c 	.word	0x20004b2c
 80053fc:	20004b30 	.word	0x20004b30

08005400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d04d      	beq.n	80054ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005412:	2308      	movs	r3, #8
 8005414:	425b      	negs	r3, r3
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <vPortFree+0xb8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <vPortFree+0x44>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60fb      	str	r3, [r7, #12]
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <vPortFree+0x62>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	60bb      	str	r3, [r7, #8]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <vPortFree+0xb8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01e      	beq.n	80054ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11a      	bne.n	80054ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <vPortFree+0xb8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005488:	f7fe fc90 	bl	8003dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <vPortFree+0xbc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4413      	add	r3, r2
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <vPortFree+0xbc>)
 8005498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800549a:	6938      	ldr	r0, [r7, #16]
 800549c:	f000 f874 	bl	8005588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <vPortFree+0xc0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	4a06      	ldr	r2, [pc, #24]	; (80054c0 <vPortFree+0xc0>)
 80054a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054aa:	f7fe fc8d 	bl	8003dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ae:	bf00      	nop
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20004b38 	.word	0x20004b38
 80054bc:	20004b28 	.word	0x20004b28
 80054c0:	20004b34 	.word	0x20004b34

080054c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054d0:	4b27      	ldr	r3, [pc, #156]	; (8005570 <prvHeapInit+0xac>)
 80054d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00c      	beq.n	80054f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3307      	adds	r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0307 	bic.w	r3, r3, #7
 80054ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <prvHeapInit+0xac>)
 80054f4:	4413      	add	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <prvHeapInit+0xb0>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <prvHeapInit+0xb0>)
 8005504:	2200      	movs	r2, #0
 8005506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4413      	add	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005510:	2208      	movs	r2, #8
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0307 	bic.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <prvHeapInit+0xb4>)
 8005524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <prvHeapInit+0xb4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800552e:	4b12      	ldr	r3, [pc, #72]	; (8005578 <prvHeapInit+0xb4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <prvHeapInit+0xb4>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a0a      	ldr	r2, [pc, #40]	; (800557c <prvHeapInit+0xb8>)
 8005552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <prvHeapInit+0xbc>)
 800555a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <prvHeapInit+0xc0>)
 800555e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000f1c 	.word	0x20000f1c
 8005574:	20004b1c 	.word	0x20004b1c
 8005578:	20004b24 	.word	0x20004b24
 800557c:	20004b2c 	.word	0x20004b2c
 8005580:	20004b28 	.word	0x20004b28
 8005584:	20004b38 	.word	0x20004b38

08005588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005590:	4b28      	ldr	r3, [pc, #160]	; (8005634 <prvInsertBlockIntoFreeList+0xac>)
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e002      	b.n	800559c <prvInsertBlockIntoFreeList+0x14>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d8f7      	bhi.n	8005596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d108      	bne.n	80055ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	441a      	add	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d118      	bne.n	8005610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d00d      	beq.n	8005606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e008      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e003      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d002      	beq.n	8005626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20004b1c 	.word	0x20004b1c
 8005638:	20004b24 	.word	0x20004b24

0800563c <std>:
 800563c:	2300      	movs	r3, #0
 800563e:	b510      	push	{r4, lr}
 8005640:	4604      	mov	r4, r0
 8005642:	e9c0 3300 	strd	r3, r3, [r0]
 8005646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800564a:	6083      	str	r3, [r0, #8]
 800564c:	8181      	strh	r1, [r0, #12]
 800564e:	6643      	str	r3, [r0, #100]	; 0x64
 8005650:	81c2      	strh	r2, [r0, #14]
 8005652:	6183      	str	r3, [r0, #24]
 8005654:	4619      	mov	r1, r3
 8005656:	2208      	movs	r2, #8
 8005658:	305c      	adds	r0, #92	; 0x5c
 800565a:	f000 f9e5 	bl	8005a28 <memset>
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <std+0x58>)
 8005660:	6263      	str	r3, [r4, #36]	; 0x24
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <std+0x5c>)
 8005664:	62a3      	str	r3, [r4, #40]	; 0x28
 8005666:	4b0d      	ldr	r3, [pc, #52]	; (800569c <std+0x60>)
 8005668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <std+0x64>)
 800566c:	6323      	str	r3, [r4, #48]	; 0x30
 800566e:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <std+0x68>)
 8005670:	6224      	str	r4, [r4, #32]
 8005672:	429c      	cmp	r4, r3
 8005674:	d006      	beq.n	8005684 <std+0x48>
 8005676:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800567a:	4294      	cmp	r4, r2
 800567c:	d002      	beq.n	8005684 <std+0x48>
 800567e:	33d0      	adds	r3, #208	; 0xd0
 8005680:	429c      	cmp	r4, r3
 8005682:	d105      	bne.n	8005690 <std+0x54>
 8005684:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800568c:	f000 ba44 	b.w	8005b18 <__retarget_lock_init_recursive>
 8005690:	bd10      	pop	{r4, pc}
 8005692:	bf00      	nop
 8005694:	08005879 	.word	0x08005879
 8005698:	0800589b 	.word	0x0800589b
 800569c:	080058d3 	.word	0x080058d3
 80056a0:	080058f7 	.word	0x080058f7
 80056a4:	20004b3c 	.word	0x20004b3c

080056a8 <stdio_exit_handler>:
 80056a8:	4a02      	ldr	r2, [pc, #8]	; (80056b4 <stdio_exit_handler+0xc>)
 80056aa:	4903      	ldr	r1, [pc, #12]	; (80056b8 <stdio_exit_handler+0x10>)
 80056ac:	4803      	ldr	r0, [pc, #12]	; (80056bc <stdio_exit_handler+0x14>)
 80056ae:	f000 b869 	b.w	8005784 <_fwalk_sglue>
 80056b2:	bf00      	nop
 80056b4:	20000010 	.word	0x20000010
 80056b8:	08005e39 	.word	0x08005e39
 80056bc:	2000001c 	.word	0x2000001c

080056c0 <cleanup_stdio>:
 80056c0:	6841      	ldr	r1, [r0, #4]
 80056c2:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <cleanup_stdio+0x34>)
 80056c4:	4299      	cmp	r1, r3
 80056c6:	b510      	push	{r4, lr}
 80056c8:	4604      	mov	r4, r0
 80056ca:	d001      	beq.n	80056d0 <cleanup_stdio+0x10>
 80056cc:	f000 fbb4 	bl	8005e38 <_fflush_r>
 80056d0:	68a1      	ldr	r1, [r4, #8]
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <cleanup_stdio+0x38>)
 80056d4:	4299      	cmp	r1, r3
 80056d6:	d002      	beq.n	80056de <cleanup_stdio+0x1e>
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fbad 	bl	8005e38 <_fflush_r>
 80056de:	68e1      	ldr	r1, [r4, #12]
 80056e0:	4b06      	ldr	r3, [pc, #24]	; (80056fc <cleanup_stdio+0x3c>)
 80056e2:	4299      	cmp	r1, r3
 80056e4:	d004      	beq.n	80056f0 <cleanup_stdio+0x30>
 80056e6:	4620      	mov	r0, r4
 80056e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ec:	f000 bba4 	b.w	8005e38 <_fflush_r>
 80056f0:	bd10      	pop	{r4, pc}
 80056f2:	bf00      	nop
 80056f4:	20004b3c 	.word	0x20004b3c
 80056f8:	20004ba4 	.word	0x20004ba4
 80056fc:	20004c0c 	.word	0x20004c0c

08005700 <global_stdio_init.part.0>:
 8005700:	b510      	push	{r4, lr}
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <global_stdio_init.part.0+0x30>)
 8005704:	4c0b      	ldr	r4, [pc, #44]	; (8005734 <global_stdio_init.part.0+0x34>)
 8005706:	4a0c      	ldr	r2, [pc, #48]	; (8005738 <global_stdio_init.part.0+0x38>)
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	4620      	mov	r0, r4
 800570c:	2200      	movs	r2, #0
 800570e:	2104      	movs	r1, #4
 8005710:	f7ff ff94 	bl	800563c <std>
 8005714:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005718:	2201      	movs	r2, #1
 800571a:	2109      	movs	r1, #9
 800571c:	f7ff ff8e 	bl	800563c <std>
 8005720:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005724:	2202      	movs	r2, #2
 8005726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800572a:	2112      	movs	r1, #18
 800572c:	f7ff bf86 	b.w	800563c <std>
 8005730:	20004c74 	.word	0x20004c74
 8005734:	20004b3c 	.word	0x20004b3c
 8005738:	080056a9 	.word	0x080056a9

0800573c <__sfp_lock_acquire>:
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <__sfp_lock_acquire+0x8>)
 800573e:	f000 b9ec 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 8005742:	bf00      	nop
 8005744:	20004c7d 	.word	0x20004c7d

08005748 <__sfp_lock_release>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__sfp_lock_release+0x8>)
 800574a:	f000 b9e7 	b.w	8005b1c <__retarget_lock_release_recursive>
 800574e:	bf00      	nop
 8005750:	20004c7d 	.word	0x20004c7d

08005754 <__sinit>:
 8005754:	b510      	push	{r4, lr}
 8005756:	4604      	mov	r4, r0
 8005758:	f7ff fff0 	bl	800573c <__sfp_lock_acquire>
 800575c:	6a23      	ldr	r3, [r4, #32]
 800575e:	b11b      	cbz	r3, 8005768 <__sinit+0x14>
 8005760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005764:	f7ff bff0 	b.w	8005748 <__sfp_lock_release>
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <__sinit+0x28>)
 800576a:	6223      	str	r3, [r4, #32]
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <__sinit+0x2c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f5      	bne.n	8005760 <__sinit+0xc>
 8005774:	f7ff ffc4 	bl	8005700 <global_stdio_init.part.0>
 8005778:	e7f2      	b.n	8005760 <__sinit+0xc>
 800577a:	bf00      	nop
 800577c:	080056c1 	.word	0x080056c1
 8005780:	20004c74 	.word	0x20004c74

08005784 <_fwalk_sglue>:
 8005784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005788:	4607      	mov	r7, r0
 800578a:	4688      	mov	r8, r1
 800578c:	4614      	mov	r4, r2
 800578e:	2600      	movs	r6, #0
 8005790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005794:	f1b9 0901 	subs.w	r9, r9, #1
 8005798:	d505      	bpl.n	80057a6 <_fwalk_sglue+0x22>
 800579a:	6824      	ldr	r4, [r4, #0]
 800579c:	2c00      	cmp	r4, #0
 800579e:	d1f7      	bne.n	8005790 <_fwalk_sglue+0xc>
 80057a0:	4630      	mov	r0, r6
 80057a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a6:	89ab      	ldrh	r3, [r5, #12]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d907      	bls.n	80057bc <_fwalk_sglue+0x38>
 80057ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057b0:	3301      	adds	r3, #1
 80057b2:	d003      	beq.n	80057bc <_fwalk_sglue+0x38>
 80057b4:	4629      	mov	r1, r5
 80057b6:	4638      	mov	r0, r7
 80057b8:	47c0      	blx	r8
 80057ba:	4306      	orrs	r6, r0
 80057bc:	3568      	adds	r5, #104	; 0x68
 80057be:	e7e9      	b.n	8005794 <_fwalk_sglue+0x10>

080057c0 <_puts_r>:
 80057c0:	6a03      	ldr	r3, [r0, #32]
 80057c2:	b570      	push	{r4, r5, r6, lr}
 80057c4:	6884      	ldr	r4, [r0, #8]
 80057c6:	4605      	mov	r5, r0
 80057c8:	460e      	mov	r6, r1
 80057ca:	b90b      	cbnz	r3, 80057d0 <_puts_r+0x10>
 80057cc:	f7ff ffc2 	bl	8005754 <__sinit>
 80057d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057d2:	07db      	lsls	r3, r3, #31
 80057d4:	d405      	bmi.n	80057e2 <_puts_r+0x22>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	0598      	lsls	r0, r3, #22
 80057da:	d402      	bmi.n	80057e2 <_puts_r+0x22>
 80057dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057de:	f000 f99c 	bl	8005b1a <__retarget_lock_acquire_recursive>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	0719      	lsls	r1, r3, #28
 80057e6:	d513      	bpl.n	8005810 <_puts_r+0x50>
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	b18b      	cbz	r3, 8005810 <_puts_r+0x50>
 80057ec:	3e01      	subs	r6, #1
 80057ee:	68a3      	ldr	r3, [r4, #8]
 80057f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60a3      	str	r3, [r4, #8]
 80057f8:	b9e9      	cbnz	r1, 8005836 <_puts_r+0x76>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da2e      	bge.n	800585c <_puts_r+0x9c>
 80057fe:	4622      	mov	r2, r4
 8005800:	210a      	movs	r1, #10
 8005802:	4628      	mov	r0, r5
 8005804:	f000 f87b 	bl	80058fe <__swbuf_r>
 8005808:	3001      	adds	r0, #1
 800580a:	d007      	beq.n	800581c <_puts_r+0x5c>
 800580c:	250a      	movs	r5, #10
 800580e:	e007      	b.n	8005820 <_puts_r+0x60>
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f000 f8b0 	bl	8005978 <__swsetup_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	d0e7      	beq.n	80057ec <_puts_r+0x2c>
 800581c:	f04f 35ff 	mov.w	r5, #4294967295
 8005820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005822:	07da      	lsls	r2, r3, #31
 8005824:	d405      	bmi.n	8005832 <_puts_r+0x72>
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	059b      	lsls	r3, r3, #22
 800582a:	d402      	bmi.n	8005832 <_puts_r+0x72>
 800582c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582e:	f000 f975 	bl	8005b1c <__retarget_lock_release_recursive>
 8005832:	4628      	mov	r0, r5
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	2b00      	cmp	r3, #0
 8005838:	da04      	bge.n	8005844 <_puts_r+0x84>
 800583a:	69a2      	ldr	r2, [r4, #24]
 800583c:	429a      	cmp	r2, r3
 800583e:	dc06      	bgt.n	800584e <_puts_r+0x8e>
 8005840:	290a      	cmp	r1, #10
 8005842:	d004      	beq.n	800584e <_puts_r+0x8e>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	6022      	str	r2, [r4, #0]
 800584a:	7019      	strb	r1, [r3, #0]
 800584c:	e7cf      	b.n	80057ee <_puts_r+0x2e>
 800584e:	4622      	mov	r2, r4
 8005850:	4628      	mov	r0, r5
 8005852:	f000 f854 	bl	80058fe <__swbuf_r>
 8005856:	3001      	adds	r0, #1
 8005858:	d1c9      	bne.n	80057ee <_puts_r+0x2e>
 800585a:	e7df      	b.n	800581c <_puts_r+0x5c>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	250a      	movs	r5, #10
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	701d      	strb	r5, [r3, #0]
 8005866:	e7db      	b.n	8005820 <_puts_r+0x60>

08005868 <puts>:
 8005868:	4b02      	ldr	r3, [pc, #8]	; (8005874 <puts+0xc>)
 800586a:	4601      	mov	r1, r0
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	f7ff bfa7 	b.w	80057c0 <_puts_r>
 8005872:	bf00      	nop
 8005874:	20000068 	.word	0x20000068

08005878 <__sread>:
 8005878:	b510      	push	{r4, lr}
 800587a:	460c      	mov	r4, r1
 800587c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005880:	f000 f8fc 	bl	8005a7c <_read_r>
 8005884:	2800      	cmp	r0, #0
 8005886:	bfab      	itete	ge
 8005888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800588a:	89a3      	ldrhlt	r3, [r4, #12]
 800588c:	181b      	addge	r3, r3, r0
 800588e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005892:	bfac      	ite	ge
 8005894:	6563      	strge	r3, [r4, #84]	; 0x54
 8005896:	81a3      	strhlt	r3, [r4, #12]
 8005898:	bd10      	pop	{r4, pc}

0800589a <__swrite>:
 800589a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589e:	461f      	mov	r7, r3
 80058a0:	898b      	ldrh	r3, [r1, #12]
 80058a2:	05db      	lsls	r3, r3, #23
 80058a4:	4605      	mov	r5, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	4616      	mov	r6, r2
 80058aa:	d505      	bpl.n	80058b8 <__swrite+0x1e>
 80058ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b0:	2302      	movs	r3, #2
 80058b2:	2200      	movs	r2, #0
 80058b4:	f000 f8d0 	bl	8005a58 <_lseek_r>
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	4632      	mov	r2, r6
 80058c6:	463b      	mov	r3, r7
 80058c8:	4628      	mov	r0, r5
 80058ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ce:	f000 b8e7 	b.w	8005aa0 <_write_r>

080058d2 <__sseek>:
 80058d2:	b510      	push	{r4, lr}
 80058d4:	460c      	mov	r4, r1
 80058d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058da:	f000 f8bd 	bl	8005a58 <_lseek_r>
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	bf15      	itete	ne
 80058e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058ee:	81a3      	strheq	r3, [r4, #12]
 80058f0:	bf18      	it	ne
 80058f2:	81a3      	strhne	r3, [r4, #12]
 80058f4:	bd10      	pop	{r4, pc}

080058f6 <__sclose>:
 80058f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fa:	f000 b89d 	b.w	8005a38 <_close_r>

080058fe <__swbuf_r>:
 80058fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005900:	460e      	mov	r6, r1
 8005902:	4614      	mov	r4, r2
 8005904:	4605      	mov	r5, r0
 8005906:	b118      	cbz	r0, 8005910 <__swbuf_r+0x12>
 8005908:	6a03      	ldr	r3, [r0, #32]
 800590a:	b90b      	cbnz	r3, 8005910 <__swbuf_r+0x12>
 800590c:	f7ff ff22 	bl	8005754 <__sinit>
 8005910:	69a3      	ldr	r3, [r4, #24]
 8005912:	60a3      	str	r3, [r4, #8]
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	071a      	lsls	r2, r3, #28
 8005918:	d525      	bpl.n	8005966 <__swbuf_r+0x68>
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	b31b      	cbz	r3, 8005966 <__swbuf_r+0x68>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	6922      	ldr	r2, [r4, #16]
 8005922:	1a98      	subs	r0, r3, r2
 8005924:	6963      	ldr	r3, [r4, #20]
 8005926:	b2f6      	uxtb	r6, r6
 8005928:	4283      	cmp	r3, r0
 800592a:	4637      	mov	r7, r6
 800592c:	dc04      	bgt.n	8005938 <__swbuf_r+0x3a>
 800592e:	4621      	mov	r1, r4
 8005930:	4628      	mov	r0, r5
 8005932:	f000 fa81 	bl	8005e38 <_fflush_r>
 8005936:	b9e0      	cbnz	r0, 8005972 <__swbuf_r+0x74>
 8005938:	68a3      	ldr	r3, [r4, #8]
 800593a:	3b01      	subs	r3, #1
 800593c:	60a3      	str	r3, [r4, #8]
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	6022      	str	r2, [r4, #0]
 8005944:	701e      	strb	r6, [r3, #0]
 8005946:	6962      	ldr	r2, [r4, #20]
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	429a      	cmp	r2, r3
 800594c:	d004      	beq.n	8005958 <__swbuf_r+0x5a>
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	07db      	lsls	r3, r3, #31
 8005952:	d506      	bpl.n	8005962 <__swbuf_r+0x64>
 8005954:	2e0a      	cmp	r6, #10
 8005956:	d104      	bne.n	8005962 <__swbuf_r+0x64>
 8005958:	4621      	mov	r1, r4
 800595a:	4628      	mov	r0, r5
 800595c:	f000 fa6c 	bl	8005e38 <_fflush_r>
 8005960:	b938      	cbnz	r0, 8005972 <__swbuf_r+0x74>
 8005962:	4638      	mov	r0, r7
 8005964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005966:	4621      	mov	r1, r4
 8005968:	4628      	mov	r0, r5
 800596a:	f000 f805 	bl	8005978 <__swsetup_r>
 800596e:	2800      	cmp	r0, #0
 8005970:	d0d5      	beq.n	800591e <__swbuf_r+0x20>
 8005972:	f04f 37ff 	mov.w	r7, #4294967295
 8005976:	e7f4      	b.n	8005962 <__swbuf_r+0x64>

08005978 <__swsetup_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4b2a      	ldr	r3, [pc, #168]	; (8005a24 <__swsetup_r+0xac>)
 800597c:	4605      	mov	r5, r0
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	460c      	mov	r4, r1
 8005982:	b118      	cbz	r0, 800598c <__swsetup_r+0x14>
 8005984:	6a03      	ldr	r3, [r0, #32]
 8005986:	b90b      	cbnz	r3, 800598c <__swsetup_r+0x14>
 8005988:	f7ff fee4 	bl	8005754 <__sinit>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005992:	0718      	lsls	r0, r3, #28
 8005994:	d422      	bmi.n	80059dc <__swsetup_r+0x64>
 8005996:	06d9      	lsls	r1, r3, #27
 8005998:	d407      	bmi.n	80059aa <__swsetup_r+0x32>
 800599a:	2309      	movs	r3, #9
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	e034      	b.n	8005a14 <__swsetup_r+0x9c>
 80059aa:	0758      	lsls	r0, r3, #29
 80059ac:	d512      	bpl.n	80059d4 <__swsetup_r+0x5c>
 80059ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059b0:	b141      	cbz	r1, 80059c4 <__swsetup_r+0x4c>
 80059b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059b6:	4299      	cmp	r1, r3
 80059b8:	d002      	beq.n	80059c0 <__swsetup_r+0x48>
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 f8be 	bl	8005b3c <_free_r>
 80059c0:	2300      	movs	r3, #0
 80059c2:	6363      	str	r3, [r4, #52]	; 0x34
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	2300      	movs	r3, #0
 80059ce:	6063      	str	r3, [r4, #4]
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	6023      	str	r3, [r4, #0]
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f043 0308 	orr.w	r3, r3, #8
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	b94b      	cbnz	r3, 80059f4 <__swsetup_r+0x7c>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ea:	d003      	beq.n	80059f4 <__swsetup_r+0x7c>
 80059ec:	4621      	mov	r1, r4
 80059ee:	4628      	mov	r0, r5
 80059f0:	f000 fa70 	bl	8005ed4 <__smakebuf_r>
 80059f4:	89a0      	ldrh	r0, [r4, #12]
 80059f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059fa:	f010 0301 	ands.w	r3, r0, #1
 80059fe:	d00a      	beq.n	8005a16 <__swsetup_r+0x9e>
 8005a00:	2300      	movs	r3, #0
 8005a02:	60a3      	str	r3, [r4, #8]
 8005a04:	6963      	ldr	r3, [r4, #20]
 8005a06:	425b      	negs	r3, r3
 8005a08:	61a3      	str	r3, [r4, #24]
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	b943      	cbnz	r3, 8005a20 <__swsetup_r+0xa8>
 8005a0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a12:	d1c4      	bne.n	800599e <__swsetup_r+0x26>
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	0781      	lsls	r1, r0, #30
 8005a18:	bf58      	it	pl
 8005a1a:	6963      	ldrpl	r3, [r4, #20]
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	e7f4      	b.n	8005a0a <__swsetup_r+0x92>
 8005a20:	2000      	movs	r0, #0
 8005a22:	e7f7      	b.n	8005a14 <__swsetup_r+0x9c>
 8005a24:	20000068 	.word	0x20000068

08005a28 <memset>:
 8005a28:	4402      	add	r2, r0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d100      	bne.n	8005a32 <memset+0xa>
 8005a30:	4770      	bx	lr
 8005a32:	f803 1b01 	strb.w	r1, [r3], #1
 8005a36:	e7f9      	b.n	8005a2c <memset+0x4>

08005a38 <_close_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d06      	ldr	r5, [pc, #24]	; (8005a54 <_close_r+0x1c>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	f7fa ff2d 	bl	80008a2 <_close>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_close_r+0x1a>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_close_r+0x1a>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	20004c78 	.word	0x20004c78

08005a58 <_lseek_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d07      	ldr	r5, [pc, #28]	; (8005a78 <_lseek_r+0x20>)
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fa ff42 	bl	80008f0 <_lseek>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_lseek_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_lseek_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	20004c78 	.word	0x20004c78

08005a7c <_read_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	; (8005a9c <_read_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fa feec 	bl	8000868 <_read>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_read_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_read_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20004c78 	.word	0x20004c78

08005aa0 <_write_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	; (8005ac0 <_write_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fa ffb8 	bl	8000a24 <_write>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_write_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_write_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20004c78 	.word	0x20004c78

08005ac4 <__errno>:
 8005ac4:	4b01      	ldr	r3, [pc, #4]	; (8005acc <__errno+0x8>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000068 	.word	0x20000068

08005ad0 <__libc_init_array>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4d0d      	ldr	r5, [pc, #52]	; (8005b08 <__libc_init_array+0x38>)
 8005ad4:	4c0d      	ldr	r4, [pc, #52]	; (8005b0c <__libc_init_array+0x3c>)
 8005ad6:	1b64      	subs	r4, r4, r5
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	2600      	movs	r6, #0
 8005adc:	42a6      	cmp	r6, r4
 8005ade:	d109      	bne.n	8005af4 <__libc_init_array+0x24>
 8005ae0:	4d0b      	ldr	r5, [pc, #44]	; (8005b10 <__libc_init_array+0x40>)
 8005ae2:	4c0c      	ldr	r4, [pc, #48]	; (8005b14 <__libc_init_array+0x44>)
 8005ae4:	f000 fa64 	bl	8005fb0 <_init>
 8005ae8:	1b64      	subs	r4, r4, r5
 8005aea:	10a4      	asrs	r4, r4, #2
 8005aec:	2600      	movs	r6, #0
 8005aee:	42a6      	cmp	r6, r4
 8005af0:	d105      	bne.n	8005afe <__libc_init_array+0x2e>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af8:	4798      	blx	r3
 8005afa:	3601      	adds	r6, #1
 8005afc:	e7ee      	b.n	8005adc <__libc_init_array+0xc>
 8005afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b02:	4798      	blx	r3
 8005b04:	3601      	adds	r6, #1
 8005b06:	e7f2      	b.n	8005aee <__libc_init_array+0x1e>
 8005b08:	080060b0 	.word	0x080060b0
 8005b0c:	080060b0 	.word	0x080060b0
 8005b10:	080060b0 	.word	0x080060b0
 8005b14:	080060b4 	.word	0x080060b4

08005b18 <__retarget_lock_init_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_acquire_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <__retarget_lock_release_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <memcpy>:
 8005b1e:	440a      	add	r2, r1
 8005b20:	4291      	cmp	r1, r2
 8005b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b26:	d100      	bne.n	8005b2a <memcpy+0xc>
 8005b28:	4770      	bx	lr
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b34:	4291      	cmp	r1, r2
 8005b36:	d1f9      	bne.n	8005b2c <memcpy+0xe>
 8005b38:	bd10      	pop	{r4, pc}
	...

08005b3c <_free_r>:
 8005b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	d044      	beq.n	8005bcc <_free_r+0x90>
 8005b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b46:	9001      	str	r0, [sp, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b4e:	bfb8      	it	lt
 8005b50:	18e4      	addlt	r4, r4, r3
 8005b52:	f000 f8df 	bl	8005d14 <__malloc_lock>
 8005b56:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <_free_r+0x94>)
 8005b58:	9801      	ldr	r0, [sp, #4]
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	b933      	cbnz	r3, 8005b6c <_free_r+0x30>
 8005b5e:	6063      	str	r3, [r4, #4]
 8005b60:	6014      	str	r4, [r2, #0]
 8005b62:	b003      	add	sp, #12
 8005b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b68:	f000 b8da 	b.w	8005d20 <__malloc_unlock>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d908      	bls.n	8005b82 <_free_r+0x46>
 8005b70:	6825      	ldr	r5, [r4, #0]
 8005b72:	1961      	adds	r1, r4, r5
 8005b74:	428b      	cmp	r3, r1
 8005b76:	bf01      	itttt	eq
 8005b78:	6819      	ldreq	r1, [r3, #0]
 8005b7a:	685b      	ldreq	r3, [r3, #4]
 8005b7c:	1949      	addeq	r1, r1, r5
 8005b7e:	6021      	streq	r1, [r4, #0]
 8005b80:	e7ed      	b.n	8005b5e <_free_r+0x22>
 8005b82:	461a      	mov	r2, r3
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	b10b      	cbz	r3, 8005b8c <_free_r+0x50>
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d9fa      	bls.n	8005b82 <_free_r+0x46>
 8005b8c:	6811      	ldr	r1, [r2, #0]
 8005b8e:	1855      	adds	r5, r2, r1
 8005b90:	42a5      	cmp	r5, r4
 8005b92:	d10b      	bne.n	8005bac <_free_r+0x70>
 8005b94:	6824      	ldr	r4, [r4, #0]
 8005b96:	4421      	add	r1, r4
 8005b98:	1854      	adds	r4, r2, r1
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	6011      	str	r1, [r2, #0]
 8005b9e:	d1e0      	bne.n	8005b62 <_free_r+0x26>
 8005ba0:	681c      	ldr	r4, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	6053      	str	r3, [r2, #4]
 8005ba6:	440c      	add	r4, r1
 8005ba8:	6014      	str	r4, [r2, #0]
 8005baa:	e7da      	b.n	8005b62 <_free_r+0x26>
 8005bac:	d902      	bls.n	8005bb4 <_free_r+0x78>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	6003      	str	r3, [r0, #0]
 8005bb2:	e7d6      	b.n	8005b62 <_free_r+0x26>
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	1961      	adds	r1, r4, r5
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	bf04      	itt	eq
 8005bbc:	6819      	ldreq	r1, [r3, #0]
 8005bbe:	685b      	ldreq	r3, [r3, #4]
 8005bc0:	6063      	str	r3, [r4, #4]
 8005bc2:	bf04      	itt	eq
 8005bc4:	1949      	addeq	r1, r1, r5
 8005bc6:	6021      	streq	r1, [r4, #0]
 8005bc8:	6054      	str	r4, [r2, #4]
 8005bca:	e7ca      	b.n	8005b62 <_free_r+0x26>
 8005bcc:	b003      	add	sp, #12
 8005bce:	bd30      	pop	{r4, r5, pc}
 8005bd0:	20004c80 	.word	0x20004c80

08005bd4 <sbrk_aligned>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4e0e      	ldr	r6, [pc, #56]	; (8005c10 <sbrk_aligned+0x3c>)
 8005bd8:	460c      	mov	r4, r1
 8005bda:	6831      	ldr	r1, [r6, #0]
 8005bdc:	4605      	mov	r5, r0
 8005bde:	b911      	cbnz	r1, 8005be6 <sbrk_aligned+0x12>
 8005be0:	f000 f9d6 	bl	8005f90 <_sbrk_r>
 8005be4:	6030      	str	r0, [r6, #0]
 8005be6:	4621      	mov	r1, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 f9d1 	bl	8005f90 <_sbrk_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d00a      	beq.n	8005c08 <sbrk_aligned+0x34>
 8005bf2:	1cc4      	adds	r4, r0, #3
 8005bf4:	f024 0403 	bic.w	r4, r4, #3
 8005bf8:	42a0      	cmp	r0, r4
 8005bfa:	d007      	beq.n	8005c0c <sbrk_aligned+0x38>
 8005bfc:	1a21      	subs	r1, r4, r0
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f9c6 	bl	8005f90 <_sbrk_r>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d101      	bne.n	8005c0c <sbrk_aligned+0x38>
 8005c08:	f04f 34ff 	mov.w	r4, #4294967295
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	20004c84 	.word	0x20004c84

08005c14 <_malloc_r>:
 8005c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c18:	1ccd      	adds	r5, r1, #3
 8005c1a:	f025 0503 	bic.w	r5, r5, #3
 8005c1e:	3508      	adds	r5, #8
 8005c20:	2d0c      	cmp	r5, #12
 8005c22:	bf38      	it	cc
 8005c24:	250c      	movcc	r5, #12
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	4607      	mov	r7, r0
 8005c2a:	db01      	blt.n	8005c30 <_malloc_r+0x1c>
 8005c2c:	42a9      	cmp	r1, r5
 8005c2e:	d905      	bls.n	8005c3c <_malloc_r+0x28>
 8005c30:	230c      	movs	r3, #12
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	2600      	movs	r6, #0
 8005c36:	4630      	mov	r0, r6
 8005c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d10 <_malloc_r+0xfc>
 8005c40:	f000 f868 	bl	8005d14 <__malloc_lock>
 8005c44:	f8d8 3000 	ldr.w	r3, [r8]
 8005c48:	461c      	mov	r4, r3
 8005c4a:	bb5c      	cbnz	r4, 8005ca4 <_malloc_r+0x90>
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	4638      	mov	r0, r7
 8005c50:	f7ff ffc0 	bl	8005bd4 <sbrk_aligned>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	4604      	mov	r4, r0
 8005c58:	d155      	bne.n	8005d06 <_malloc_r+0xf2>
 8005c5a:	f8d8 4000 	ldr.w	r4, [r8]
 8005c5e:	4626      	mov	r6, r4
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	d145      	bne.n	8005cf0 <_malloc_r+0xdc>
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	d048      	beq.n	8005cfa <_malloc_r+0xe6>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	eb04 0903 	add.w	r9, r4, r3
 8005c72:	f000 f98d 	bl	8005f90 <_sbrk_r>
 8005c76:	4581      	cmp	r9, r0
 8005c78:	d13f      	bne.n	8005cfa <_malloc_r+0xe6>
 8005c7a:	6821      	ldr	r1, [r4, #0]
 8005c7c:	1a6d      	subs	r5, r5, r1
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4638      	mov	r0, r7
 8005c82:	f7ff ffa7 	bl	8005bd4 <sbrk_aligned>
 8005c86:	3001      	adds	r0, #1
 8005c88:	d037      	beq.n	8005cfa <_malloc_r+0xe6>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	442b      	add	r3, r5
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	f8d8 3000 	ldr.w	r3, [r8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d038      	beq.n	8005d0a <_malloc_r+0xf6>
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	42a2      	cmp	r2, r4
 8005c9c:	d12b      	bne.n	8005cf6 <_malloc_r+0xe2>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	e00f      	b.n	8005cc4 <_malloc_r+0xb0>
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	1b52      	subs	r2, r2, r5
 8005ca8:	d41f      	bmi.n	8005cea <_malloc_r+0xd6>
 8005caa:	2a0b      	cmp	r2, #11
 8005cac:	d917      	bls.n	8005cde <_malloc_r+0xca>
 8005cae:	1961      	adds	r1, r4, r5
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	6025      	str	r5, [r4, #0]
 8005cb4:	bf18      	it	ne
 8005cb6:	6059      	strne	r1, [r3, #4]
 8005cb8:	6863      	ldr	r3, [r4, #4]
 8005cba:	bf08      	it	eq
 8005cbc:	f8c8 1000 	streq.w	r1, [r8]
 8005cc0:	5162      	str	r2, [r4, r5]
 8005cc2:	604b      	str	r3, [r1, #4]
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	f104 060b 	add.w	r6, r4, #11
 8005cca:	f000 f829 	bl	8005d20 <__malloc_unlock>
 8005cce:	f026 0607 	bic.w	r6, r6, #7
 8005cd2:	1d23      	adds	r3, r4, #4
 8005cd4:	1af2      	subs	r2, r6, r3
 8005cd6:	d0ae      	beq.n	8005c36 <_malloc_r+0x22>
 8005cd8:	1b9b      	subs	r3, r3, r6
 8005cda:	50a3      	str	r3, [r4, r2]
 8005cdc:	e7ab      	b.n	8005c36 <_malloc_r+0x22>
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	6862      	ldr	r2, [r4, #4]
 8005ce2:	d1dd      	bne.n	8005ca0 <_malloc_r+0x8c>
 8005ce4:	f8c8 2000 	str.w	r2, [r8]
 8005ce8:	e7ec      	b.n	8005cc4 <_malloc_r+0xb0>
 8005cea:	4623      	mov	r3, r4
 8005cec:	6864      	ldr	r4, [r4, #4]
 8005cee:	e7ac      	b.n	8005c4a <_malloc_r+0x36>
 8005cf0:	4634      	mov	r4, r6
 8005cf2:	6876      	ldr	r6, [r6, #4]
 8005cf4:	e7b4      	b.n	8005c60 <_malloc_r+0x4c>
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	e7cc      	b.n	8005c94 <_malloc_r+0x80>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	603b      	str	r3, [r7, #0]
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f000 f80e 	bl	8005d20 <__malloc_unlock>
 8005d04:	e797      	b.n	8005c36 <_malloc_r+0x22>
 8005d06:	6025      	str	r5, [r4, #0]
 8005d08:	e7dc      	b.n	8005cc4 <_malloc_r+0xb0>
 8005d0a:	605b      	str	r3, [r3, #4]
 8005d0c:	deff      	udf	#255	; 0xff
 8005d0e:	bf00      	nop
 8005d10:	20004c80 	.word	0x20004c80

08005d14 <__malloc_lock>:
 8005d14:	4801      	ldr	r0, [pc, #4]	; (8005d1c <__malloc_lock+0x8>)
 8005d16:	f7ff bf00 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	20004c7c 	.word	0x20004c7c

08005d20 <__malloc_unlock>:
 8005d20:	4801      	ldr	r0, [pc, #4]	; (8005d28 <__malloc_unlock+0x8>)
 8005d22:	f7ff befb 	b.w	8005b1c <__retarget_lock_release_recursive>
 8005d26:	bf00      	nop
 8005d28:	20004c7c 	.word	0x20004c7c

08005d2c <__sflush_r>:
 8005d2c:	898a      	ldrh	r2, [r1, #12]
 8005d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d32:	4605      	mov	r5, r0
 8005d34:	0710      	lsls	r0, r2, #28
 8005d36:	460c      	mov	r4, r1
 8005d38:	d458      	bmi.n	8005dec <__sflush_r+0xc0>
 8005d3a:	684b      	ldr	r3, [r1, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dc05      	bgt.n	8005d4c <__sflush_r+0x20>
 8005d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	dc02      	bgt.n	8005d4c <__sflush_r+0x20>
 8005d46:	2000      	movs	r0, #0
 8005d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	d0f9      	beq.n	8005d46 <__sflush_r+0x1a>
 8005d52:	2300      	movs	r3, #0
 8005d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d58:	682f      	ldr	r7, [r5, #0]
 8005d5a:	6a21      	ldr	r1, [r4, #32]
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	d032      	beq.n	8005dc6 <__sflush_r+0x9a>
 8005d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	075a      	lsls	r2, r3, #29
 8005d66:	d505      	bpl.n	8005d74 <__sflush_r+0x48>
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	1ac0      	subs	r0, r0, r3
 8005d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d6e:	b10b      	cbz	r3, 8005d74 <__sflush_r+0x48>
 8005d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d72:	1ac0      	subs	r0, r0, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	4602      	mov	r2, r0
 8005d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d7a:	6a21      	ldr	r1, [r4, #32]
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b0      	blx	r6
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	d106      	bne.n	8005d94 <__sflush_r+0x68>
 8005d86:	6829      	ldr	r1, [r5, #0]
 8005d88:	291d      	cmp	r1, #29
 8005d8a:	d82b      	bhi.n	8005de4 <__sflush_r+0xb8>
 8005d8c:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <__sflush_r+0x108>)
 8005d8e:	410a      	asrs	r2, r1
 8005d90:	07d6      	lsls	r6, r2, #31
 8005d92:	d427      	bmi.n	8005de4 <__sflush_r+0xb8>
 8005d94:	2200      	movs	r2, #0
 8005d96:	6062      	str	r2, [r4, #4]
 8005d98:	04d9      	lsls	r1, r3, #19
 8005d9a:	6922      	ldr	r2, [r4, #16]
 8005d9c:	6022      	str	r2, [r4, #0]
 8005d9e:	d504      	bpl.n	8005daa <__sflush_r+0x7e>
 8005da0:	1c42      	adds	r2, r0, #1
 8005da2:	d101      	bne.n	8005da8 <__sflush_r+0x7c>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b903      	cbnz	r3, 8005daa <__sflush_r+0x7e>
 8005da8:	6560      	str	r0, [r4, #84]	; 0x54
 8005daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dac:	602f      	str	r7, [r5, #0]
 8005dae:	2900      	cmp	r1, #0
 8005db0:	d0c9      	beq.n	8005d46 <__sflush_r+0x1a>
 8005db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d002      	beq.n	8005dc0 <__sflush_r+0x94>
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f7ff febe 	bl	8005b3c <_free_r>
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	6360      	str	r0, [r4, #52]	; 0x34
 8005dc4:	e7c0      	b.n	8005d48 <__sflush_r+0x1c>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b0      	blx	r6
 8005dcc:	1c41      	adds	r1, r0, #1
 8005dce:	d1c8      	bne.n	8005d62 <__sflush_r+0x36>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0c5      	beq.n	8005d62 <__sflush_r+0x36>
 8005dd6:	2b1d      	cmp	r3, #29
 8005dd8:	d001      	beq.n	8005dde <__sflush_r+0xb2>
 8005dda:	2b16      	cmp	r3, #22
 8005ddc:	d101      	bne.n	8005de2 <__sflush_r+0xb6>
 8005dde:	602f      	str	r7, [r5, #0]
 8005de0:	e7b1      	b.n	8005d46 <__sflush_r+0x1a>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	e7ad      	b.n	8005d48 <__sflush_r+0x1c>
 8005dec:	690f      	ldr	r7, [r1, #16]
 8005dee:	2f00      	cmp	r7, #0
 8005df0:	d0a9      	beq.n	8005d46 <__sflush_r+0x1a>
 8005df2:	0793      	lsls	r3, r2, #30
 8005df4:	680e      	ldr	r6, [r1, #0]
 8005df6:	bf08      	it	eq
 8005df8:	694b      	ldreq	r3, [r1, #20]
 8005dfa:	600f      	str	r7, [r1, #0]
 8005dfc:	bf18      	it	ne
 8005dfe:	2300      	movne	r3, #0
 8005e00:	eba6 0807 	sub.w	r8, r6, r7
 8005e04:	608b      	str	r3, [r1, #8]
 8005e06:	f1b8 0f00 	cmp.w	r8, #0
 8005e0a:	dd9c      	ble.n	8005d46 <__sflush_r+0x1a>
 8005e0c:	6a21      	ldr	r1, [r4, #32]
 8005e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e10:	4643      	mov	r3, r8
 8005e12:	463a      	mov	r2, r7
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b0      	blx	r6
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	dc06      	bgt.n	8005e2a <__sflush_r+0xfe>
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e22:	81a3      	strh	r3, [r4, #12]
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	e78e      	b.n	8005d48 <__sflush_r+0x1c>
 8005e2a:	4407      	add	r7, r0
 8005e2c:	eba8 0800 	sub.w	r8, r8, r0
 8005e30:	e7e9      	b.n	8005e06 <__sflush_r+0xda>
 8005e32:	bf00      	nop
 8005e34:	dfbffffe 	.word	0xdfbffffe

08005e38 <_fflush_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	690b      	ldr	r3, [r1, #16]
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b913      	cbnz	r3, 8005e48 <_fflush_r+0x10>
 8005e42:	2500      	movs	r5, #0
 8005e44:	4628      	mov	r0, r5
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	b118      	cbz	r0, 8005e52 <_fflush_r+0x1a>
 8005e4a:	6a03      	ldr	r3, [r0, #32]
 8005e4c:	b90b      	cbnz	r3, 8005e52 <_fflush_r+0x1a>
 8005e4e:	f7ff fc81 	bl	8005754 <__sinit>
 8005e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f3      	beq.n	8005e42 <_fflush_r+0xa>
 8005e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e5c:	07d0      	lsls	r0, r2, #31
 8005e5e:	d404      	bmi.n	8005e6a <_fflush_r+0x32>
 8005e60:	0599      	lsls	r1, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_fflush_r+0x32>
 8005e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e66:	f7ff fe58 	bl	8005b1a <__retarget_lock_acquire_recursive>
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	f7ff ff5d 	bl	8005d2c <__sflush_r>
 8005e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e74:	07da      	lsls	r2, r3, #31
 8005e76:	4605      	mov	r5, r0
 8005e78:	d4e4      	bmi.n	8005e44 <_fflush_r+0xc>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	059b      	lsls	r3, r3, #22
 8005e7e:	d4e1      	bmi.n	8005e44 <_fflush_r+0xc>
 8005e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e82:	f7ff fe4b 	bl	8005b1c <__retarget_lock_release_recursive>
 8005e86:	e7dd      	b.n	8005e44 <_fflush_r+0xc>

08005e88 <__swhatbuf_r>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e90:	2900      	cmp	r1, #0
 8005e92:	b096      	sub	sp, #88	; 0x58
 8005e94:	4615      	mov	r5, r2
 8005e96:	461e      	mov	r6, r3
 8005e98:	da0d      	bge.n	8005eb6 <__swhatbuf_r+0x2e>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ea0:	f04f 0100 	mov.w	r1, #0
 8005ea4:	bf0c      	ite	eq
 8005ea6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005eaa:	2340      	movne	r3, #64	; 0x40
 8005eac:	2000      	movs	r0, #0
 8005eae:	6031      	str	r1, [r6, #0]
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	b016      	add	sp, #88	; 0x58
 8005eb4:	bd70      	pop	{r4, r5, r6, pc}
 8005eb6:	466a      	mov	r2, sp
 8005eb8:	f000 f848 	bl	8005f4c <_fstat_r>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	dbec      	blt.n	8005e9a <__swhatbuf_r+0x12>
 8005ec0:	9901      	ldr	r1, [sp, #4]
 8005ec2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ec6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005eca:	4259      	negs	r1, r3
 8005ecc:	4159      	adcs	r1, r3
 8005ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed2:	e7eb      	b.n	8005eac <__swhatbuf_r+0x24>

08005ed4 <__smakebuf_r>:
 8005ed4:	898b      	ldrh	r3, [r1, #12]
 8005ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ed8:	079d      	lsls	r5, r3, #30
 8005eda:	4606      	mov	r6, r0
 8005edc:	460c      	mov	r4, r1
 8005ede:	d507      	bpl.n	8005ef0 <__smakebuf_r+0x1c>
 8005ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	6123      	str	r3, [r4, #16]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	6163      	str	r3, [r4, #20]
 8005eec:	b002      	add	sp, #8
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	ab01      	add	r3, sp, #4
 8005ef2:	466a      	mov	r2, sp
 8005ef4:	f7ff ffc8 	bl	8005e88 <__swhatbuf_r>
 8005ef8:	9900      	ldr	r1, [sp, #0]
 8005efa:	4605      	mov	r5, r0
 8005efc:	4630      	mov	r0, r6
 8005efe:	f7ff fe89 	bl	8005c14 <_malloc_r>
 8005f02:	b948      	cbnz	r0, 8005f18 <__smakebuf_r+0x44>
 8005f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f08:	059a      	lsls	r2, r3, #22
 8005f0a:	d4ef      	bmi.n	8005eec <__smakebuf_r+0x18>
 8005f0c:	f023 0303 	bic.w	r3, r3, #3
 8005f10:	f043 0302 	orr.w	r3, r3, #2
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	e7e3      	b.n	8005ee0 <__smakebuf_r+0xc>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	6020      	str	r0, [r4, #0]
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	81a3      	strh	r3, [r4, #12]
 8005f22:	9b00      	ldr	r3, [sp, #0]
 8005f24:	6163      	str	r3, [r4, #20]
 8005f26:	9b01      	ldr	r3, [sp, #4]
 8005f28:	6120      	str	r0, [r4, #16]
 8005f2a:	b15b      	cbz	r3, 8005f44 <__smakebuf_r+0x70>
 8005f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f30:	4630      	mov	r0, r6
 8005f32:	f000 f81d 	bl	8005f70 <_isatty_r>
 8005f36:	b128      	cbz	r0, 8005f44 <__smakebuf_r+0x70>
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	f023 0303 	bic.w	r3, r3, #3
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	431d      	orrs	r5, r3
 8005f48:	81a5      	strh	r5, [r4, #12]
 8005f4a:	e7cf      	b.n	8005eec <__smakebuf_r+0x18>

08005f4c <_fstat_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d07      	ldr	r5, [pc, #28]	; (8005f6c <_fstat_r+0x20>)
 8005f50:	2300      	movs	r3, #0
 8005f52:	4604      	mov	r4, r0
 8005f54:	4608      	mov	r0, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	602b      	str	r3, [r5, #0]
 8005f5a:	f7fa fcae 	bl	80008ba <_fstat>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	d102      	bne.n	8005f68 <_fstat_r+0x1c>
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	b103      	cbz	r3, 8005f68 <_fstat_r+0x1c>
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	bd38      	pop	{r3, r4, r5, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20004c78 	.word	0x20004c78

08005f70 <_isatty_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4d06      	ldr	r5, [pc, #24]	; (8005f8c <_isatty_r+0x1c>)
 8005f74:	2300      	movs	r3, #0
 8005f76:	4604      	mov	r4, r0
 8005f78:	4608      	mov	r0, r1
 8005f7a:	602b      	str	r3, [r5, #0]
 8005f7c:	f7fa fcad 	bl	80008da <_isatty>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_isatty_r+0x1a>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_isatty_r+0x1a>
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	20004c78 	.word	0x20004c78

08005f90 <_sbrk_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4d06      	ldr	r5, [pc, #24]	; (8005fac <_sbrk_r+0x1c>)
 8005f94:	2300      	movs	r3, #0
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fa fcb6 	bl	800090c <_sbrk>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_sbrk_r+0x1a>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_sbrk_r+0x1a>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20004c78 	.word	0x20004c78

08005fb0 <_init>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr

08005fbc <_fini>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	bf00      	nop
 8005fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc2:	bc08      	pop	{r3}
 8005fc4:	469e      	mov	lr, r3
 8005fc6:	4770      	bx	lr
