
dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004428  08004428  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004430  08004430  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000068  080044a0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080044a0  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de93  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f7  00000000  00000000  0002df6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00030168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3f  00000000  00000000  00030e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017582  00000000  00000000  000318d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8e4  00000000  00000000  00048e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fec9  00000000  00000000  0005873d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e4c  00000000  00000000  000e8608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ec454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043b4 	.word	0x080043b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080043b4 	.word	0x080043b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <delay_us>:
int Temperature;
int Humidity;

extern TIM_HandleTypeDef htim1;

void delay_us(int time) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	htim1.Instance->CNT = 0;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <delay_us+0x2c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2200      	movs	r2, #0
 800058a:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim1.Instance->CNT < time)
 800058c:	bf00      	nop
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <delay_us+0x2c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	429a      	cmp	r2, r3
 8000598:	d3f9      	bcc.n	800058e <delay_us+0x12>
		;
}
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	2000008c 	.word	0x2000008c

080005ac <wait_pulse>:

//----- 펄스 대기 함수
int wait_pulse(int state) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <wait_pulse+0x48>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24
	htim1.Instance->CNT = 0;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <wait_pulse+0x48>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) != state) {
 80005c4:	e006      	b.n	80005d4 <wait_pulse+0x28>
		if (htim1.Instance->CNT >= 100) {
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <wait_pulse+0x48>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005cc:	2b63      	cmp	r3, #99	; 0x63
 80005ce:	d901      	bls.n	80005d4 <wait_pulse+0x28>
			return 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e00a      	b.n	80005ea <wait_pulse+0x3e>
	while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) != state) {
 80005d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <wait_pulse+0x4c>)
 80005da:	f000 ffcd 	bl	8001578 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d1ee      	bne.n	80005c6 <wait_pulse+0x1a>
		}
	}

	return 1;
 80005e8:	2301      	movs	r3, #1
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	40020000 	.word	0x40020000

080005fc <dht11_read>:

int dht11_read(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
//----- Start Signal 전송
// 포트를 출력으로 설정
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT11_Pin;
 8000612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000616:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	4619      	mov	r1, r3
 8000626:	485d      	ldr	r0, [pc, #372]	; (800079c <dht11_read+0x1a0>)
 8000628:	f000 fe22 	bl	8001270 <HAL_GPIO_Init>

// Low 18ms, High 20us 펄스 생성
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	485a      	ldr	r0, [pc, #360]	; (800079c <dht11_read+0x1a0>)
 8000634:	f000 ffb8 	bl	80015a8 <HAL_GPIO_WritePin>
	delay_us(18000);
 8000638:	f244 6050 	movw	r0, #18000	; 0x4650
 800063c:	f7ff ff9e 	bl	800057c <delay_us>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	4855      	ldr	r0, [pc, #340]	; (800079c <dht11_read+0x1a0>)
 8000648:	f000 ffae 	bl	80015a8 <HAL_GPIO_WritePin>
	delay_us(20);
 800064c:	2014      	movs	r0, #20
 800064e:	f7ff ff95 	bl	800057c <delay_us>

// 포트를 입력으로 설정
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	4619      	mov	r1, r3
 8000660:	484e      	ldr	r0, [pc, #312]	; (800079c <dht11_read+0x1a0>)
 8000662:	f000 fe05 	bl	8001270 <HAL_GPIO_Init>

//----- DHT11 응답 확인
	delay_us(40); // 40us 대기
 8000666:	2028      	movs	r0, #40	; 0x28
 8000668:	f7ff ff88 	bl	800057c <delay_us>
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) { // DHT11 응답 체크(Low)
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	484a      	ldr	r0, [pc, #296]	; (800079c <dht11_read+0x1a0>)
 8000672:	f000 ff81 	bl	8001578 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10d      	bne.n	8000698 <dht11_read+0x9c>
		delay_us(80);
 800067c:	2050      	movs	r0, #80	; 0x50
 800067e:	f7ff ff7d 	bl	800057c <delay_us>
		if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) // 80us뒤 DHT11 High 응답 없으면 timeout으로 간주
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	4845      	ldr	r0, [pc, #276]	; (800079c <dht11_read+0x1a0>)
 8000688:	f000 ff76 	bl	8001578 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d102      	bne.n	8000698 <dht11_read+0x9c>
			return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	e07c      	b.n	8000792 <dht11_read+0x196>
	}
	if (wait_pulse(GPIO_PIN_RESET) == 0) // 데이터 전송 시작 대기
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ff87 	bl	80005ac <wait_pulse>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <dht11_read+0xae>
		return -1; // timeout
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	e073      	b.n	8000792 <dht11_read+0x196>

//----- DHT11 데이터 읽기
	uint8_t out[5], i, j;
	for (i = 0; i < 5; i++) { // 습도 정수자리, 습도 소수자리, 온도 정수자리, 온도 소수자리, 체크섬 순으로 읽음
 80006aa:	2300      	movs	r3, #0
 80006ac:	77fb      	strb	r3, [r7, #31]
 80006ae:	e055      	b.n	800075c <dht11_read+0x160>
		for (j = 0; j < 8; j++) { // 하나의 데이터는 8비트로 구성되며, 최상위 비트부터 하나씩 읽기 시작함
 80006b0:	2300      	movs	r3, #0
 80006b2:	77bb      	strb	r3, [r7, #30]
 80006b4:	e04c      	b.n	8000750 <dht11_read+0x154>
			if (!wait_pulse(GPIO_PIN_SET)) // 데이터 전송 시작까지 대기
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff ff78 	bl	80005ac <wait_pulse>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d102      	bne.n	80006c8 <dht11_read+0xcc>
				return -1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	e064      	b.n	8000792 <dht11_read+0x196>
			delay_us(40); // 40us 대기 후 High상태이면 1, Low상태이면 0 수신
 80006c8:	2028      	movs	r0, #40	; 0x28
 80006ca:	f7ff ff57 	bl	800057c <delay_us>
			if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 80006ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d2:	4832      	ldr	r0, [pc, #200]	; (800079c <dht11_read+0x1a0>)
 80006d4:	f000 ff50 	bl	8001578 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d117      	bne.n	800070e <dht11_read+0x112>

				// Low일 경우 0
				out[i] &= ~(1 << (7 - j));
 80006de:	7ffb      	ldrb	r3, [r7, #31]
 80006e0:	3320      	adds	r3, #32
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80006e8:	b25a      	sxtb	r2, r3
 80006ea:	7fbb      	ldrb	r3, [r7, #30]
 80006ec:	f1c3 0307 	rsb	r3, r3, #7
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	43db      	mvns	r3, r3
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	4013      	ands	r3, r2
 80006fe:	b25a      	sxtb	r2, r3
 8000700:	7ffb      	ldrb	r3, [r7, #31]
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	3320      	adds	r3, #32
 8000706:	443b      	add	r3, r7
 8000708:	f803 2c20 	strb.w	r2, [r3, #-32]
 800070c:	e014      	b.n	8000738 <dht11_read+0x13c>
			else
				// High일 경우 1
				out[i] |= (1 << (7 - j));
 800070e:	7ffb      	ldrb	r3, [r7, #31]
 8000710:	3320      	adds	r3, #32
 8000712:	443b      	add	r3, r7
 8000714:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000718:	b25a      	sxtb	r2, r3
 800071a:	7fbb      	ldrb	r3, [r7, #30]
 800071c:	f1c3 0307 	rsb	r3, r3, #7
 8000720:	2101      	movs	r1, #1
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7ffb      	ldrb	r3, [r7, #31]
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	3320      	adds	r3, #32
 8000732:	443b      	add	r3, r7
 8000734:	f803 2c20 	strb.w	r2, [r3, #-32]
			if (!wait_pulse(GPIO_PIN_RESET)) // 다음 데이터 전송 시작까지 대기
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff37 	bl	80005ac <wait_pulse>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <dht11_read+0x14e>
				return -1;
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	e023      	b.n	8000792 <dht11_read+0x196>
		for (j = 0; j < 8; j++) { // 하나의 데이터는 8비트로 구성되며, 최상위 비트부터 하나씩 읽기 시작함
 800074a:	7fbb      	ldrb	r3, [r7, #30]
 800074c:	3301      	adds	r3, #1
 800074e:	77bb      	strb	r3, [r7, #30]
 8000750:	7fbb      	ldrb	r3, [r7, #30]
 8000752:	2b07      	cmp	r3, #7
 8000754:	d9af      	bls.n	80006b6 <dht11_read+0xba>
	for (i = 0; i < 5; i++) { // 습도 정수자리, 습도 소수자리, 온도 정수자리, 온도 소수자리, 체크섬 순으로 읽음
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	3301      	adds	r3, #1
 800075a:	77fb      	strb	r3, [r7, #31]
 800075c:	7ffb      	ldrb	r3, [r7, #31]
 800075e:	2b04      	cmp	r3, #4
 8000760:	d9a6      	bls.n	80006b0 <dht11_read+0xb4>
		}
	}
//----- 체크섬 판별
	if (out[4] != (out[0] + out[1] + out[2] + out[3]))
 8000762:	793b      	ldrb	r3, [r7, #4]
 8000764:	461a      	mov	r2, r3
 8000766:	783b      	ldrb	r3, [r7, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	787b      	ldrb	r3, [r7, #1]
 800076c:	440b      	add	r3, r1
 800076e:	78b9      	ldrb	r1, [r7, #2]
 8000770:	440b      	add	r3, r1
 8000772:	78f9      	ldrb	r1, [r7, #3]
 8000774:	440b      	add	r3, r1
 8000776:	429a      	cmp	r2, r3
 8000778:	d002      	beq.n	8000780 <dht11_read+0x184>
		return -2;
 800077a:	f06f 0301 	mvn.w	r3, #1
 800077e:	e008      	b.n	8000792 <dht11_read+0x196>
//----- 필요 데이터 분리
	Temperature = out[2];
 8000780:	78bb      	ldrb	r3, [r7, #2]
 8000782:	461a      	mov	r2, r3
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <dht11_read+0x1a4>)
 8000786:	601a      	str	r2, [r3, #0]
	Humidity = out[0];
 8000788:	783b      	ldrb	r3, [r7, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <dht11_read+0x1a8>)
 800078e:	601a      	str	r2, [r3, #0]
	return 1;
 8000790:	2301      	movs	r3, #1
}
 8000792:	4618      	mov	r0, r3
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40020000 	.word	0x40020000
 80007a0:	20000084 	.word	0x20000084
 80007a4:	20000088 	.word	0x20000088

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fb26 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f826 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f8fc 	bl	80009b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007b8:	f000 f8d0 	bl	800095c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007bc:	f000 f87e 	bl	80008bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 80007c0:	480a      	ldr	r0, [pc, #40]	; (80007ec <main+0x44>)
 80007c2:	f000 fa97 	bl	8000cf4 <initUart>
  HAL_TIM_Base_Start(&htim1);
 80007c6:	480a      	ldr	r0, [pc, #40]	; (80007f0 <main+0x48>)
 80007c8:	f001 fbb0 	bl	8001f2c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dht11_read();
 80007cc:	f7ff ff16 	bl	80005fc <dht11_read>
	  printf("T= %d, H= %d\n" , Temperature, Humidity);
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <main+0x4c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <main+0x50>)
 80007d6:	6812      	ldr	r2, [r2, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <main+0x54>)
 80007dc:	f002 ff74 	bl	80036c8 <iprintf>
	  //printf("%d\n", Temperature);
	  HAL_Delay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f000 fb7c 	bl	8000ee0 <HAL_Delay>
  {
 80007e8:	e7f0      	b.n	80007cc <main+0x24>
 80007ea:	bf00      	nop
 80007ec:	200000d4 	.word	0x200000d4
 80007f0:	2000008c 	.word	0x2000008c
 80007f4:	20000084 	.word	0x20000084
 80007f8:	20000088 	.word	0x20000088
 80007fc:	080043cc 	.word	0x080043cc

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 ffaf 	bl	8003772 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <SystemClock_Config+0xb4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <SystemClock_Config+0xb4>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <SystemClock_Config+0xb4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <SystemClock_Config+0xb8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <SystemClock_Config+0xb8>)
 800084a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <SystemClock_Config+0xb8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	4618      	mov	r0, r3
 8000872:	f000 feb3 	bl	80015dc <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800087c:	f000 f8cc 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f001 f916 	bl	8001acc <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008a6:	f000 f8b7 	bl	8000a18 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_TIM1_Init+0x98>)
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <MX_TIM1_Init+0x9c>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_TIM1_Init+0x98>)
 80008e0:	220f      	movs	r2, #15
 80008e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_TIM1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_TIM1_Init+0x98>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_TIM1_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_TIM1_Init+0x98>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_TIM1_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <MX_TIM1_Init+0x98>)
 8000906:	f001 fac1 	bl	8001e8c <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000910:	f000 f882 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4619      	mov	r1, r3
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_TIM1_Init+0x98>)
 8000922:	f001 fb5d 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800092c:	f000 f874 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_TIM1_Init+0x98>)
 800093e:	f001 fd3d 	bl	80023bc <HAL_TIMEx_MasterConfigSynchronization>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000948:	f000 f866 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000008c 	.word	0x2000008c
 8000958:	40010000 	.word	0x40010000

0800095c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART2_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000994:	f001 fd80 	bl	8002498 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f83b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000d4 	.word	0x200000d4
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_GPIO_Init+0x60>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <MX_GPIO_Init+0x60>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_GPIO_Init+0x60>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e6:	480b      	ldr	r0, [pc, #44]	; (8000a14 <MX_GPIO_Init+0x64>)
 80009e8:	f000 fdde 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80009ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0x64>)
 8000a04:	f000 fc34 	bl	8001270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d10d      	bne.n	8000aa2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_TIM_Base_MspInit+0x40>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <HAL_TIM_Base_MspInit+0x40>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <HAL_TIM_Base_MspInit+0x40>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40010000 	.word	0x40010000
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <HAL_UART_MspInit+0x94>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d133      	bne.n	8000b42 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_UART_MspInit+0x98>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <HAL_UART_MspInit+0x98>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_UART_MspInit+0x98>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0x98>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0x98>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_UART_MspInit+0x98>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b12:	230c      	movs	r3, #12
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <HAL_UART_MspInit+0x9c>)
 8000b2e:	f000 fb9f 	bl	8001270 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2026      	movs	r0, #38	; 0x26
 8000b38:	f000 fad1 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b3c:	2026      	movs	r0, #38	; 0x26
 8000b3e:	f000 faea 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f97c 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <USART2_IRQHandler+0x10>)
 8000bb2:	f001 fd71 	bl	8002698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000d4 	.word	0x200000d4

08000bc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
  }

  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c22:	605a      	str	r2, [r3, #4]
  return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_isatty>:

int _isatty(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f002 fdbc 	bl	8003810 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20020000 	.word	0x20020000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	2000011c 	.word	0x2000011c
 8000ccc:	20000378 	.word	0x20000378

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <initUart>:
int rxBufferPp;               // put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
   huart = inHuart;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <initUart+0x24>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
   HAL_UART_Receive_IT(&*huart, &rxChar, 1);
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <initUart+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2201      	movs	r2, #1
 8000d08:	4904      	ldr	r1, [pc, #16]	; (8000d1c <initUart+0x28>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fc9f 	bl	800264e <HAL_UART_Receive_IT>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000120 	.word	0x20000120
 8000d1c:	20000227 	.word	0x20000227

08000d20 <HAL_UART_RxCpltCallback>:

// 문자수신 처리
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
   rxBuffer[rxBufferPp++] = rxChar;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_UART_RxCpltCallback+0x4c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	490f      	ldr	r1, [pc, #60]	; (8000d6c <HAL_UART_RxCpltCallback+0x4c>)
 8000d30:	600a      	str	r2, [r1, #0]
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <HAL_UART_RxCpltCallback+0x50>)
 8000d34:	7811      	ldrb	r1, [r2, #0]
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <HAL_UART_RxCpltCallback+0x54>)
 8000d38:	54d1      	strb	r1, [r2, r3]
   rxBufferPp %= rxBufferMax;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_UART_RxCpltCallback+0x4c>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_UART_RxCpltCallback+0x58>)
 8000d40:	fb83 1302 	smull	r1, r3, r3, r2
 8000d44:	4413      	add	r3, r2
 8000d46:	11d9      	asrs	r1, r3, #7
 8000d48:	17d3      	asrs	r3, r2, #31
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	1ad1      	subs	r1, r2, r3
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_UART_RxCpltCallback+0x4c>)
 8000d56:	6019      	str	r1, [r3, #0]
   HAL_UART_Receive_IT(huart, &rxChar, 1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4905      	ldr	r1, [pc, #20]	; (8000d70 <HAL_UART_RxCpltCallback+0x50>)
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f001 fc76 	bl	800264e <HAL_UART_Receive_IT>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000124 	.word	0x20000124
 8000d70:	20000227 	.word	0x20000227
 8000d74:	20000128 	.word	0x20000128
 8000d78:	80808081 	.word	0x80808081

08000d7c <_write>:
   result = rxBuffer[rxBufferGp++];
   rxBufferGp %= rxBufferMax;
   return result;
}

int _write(int file, char *p, int len) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(huart, p, len, 1);
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <_write+0x28>)
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	2301      	movs	r3, #1
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	f001 fbd0 	bl	8002538 <HAL_UART_Transmit>
   return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000120 	.word	0x20000120

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dac:	f7ff ff90 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f002 fd21 	bl	800381c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fce5 	bl	80007a8 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dec:	08004438 	.word	0x08004438
  ldr r2, =_sbss
 8000df0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000df4:	20000378 	.word	0x20000378

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f94f 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fdf8 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f967 	bl	8001132 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f92f 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000228 	.word	0x20000228

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000228 	.word	0x20000228

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff3e 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff31 	bl	8000f8c <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff feb6 	bl	8000ec8 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d008      	beq.n	800117c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e052      	b.n	8001222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0216 	bic.w	r2, r2, #22
 800118a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800119a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d103      	bne.n	80011ac <HAL_DMA_Abort+0x62>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0208 	bic.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011cc:	e013      	b.n	80011f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ce:	f7ff fe7b 	bl	8000ec8 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d90c      	bls.n	80011f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2220      	movs	r2, #32
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e015      	b.n	8001222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e4      	bne.n	80011ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	223f      	movs	r2, #63	; 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d004      	beq.n	8001248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e00c      	b.n	8001262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2205      	movs	r2, #5
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e159      	b.n	8001540 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8148 	bne.w	800153a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d005      	beq.n	80012c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d130      	bne.n	8001324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 0201 	and.w	r2, r3, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b03      	cmp	r3, #3
 800132e:	d017      	beq.n	8001360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a2 	beq.w	800153a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b57      	ldr	r3, [pc, #348]	; (8001558 <HAL_GPIO_Init+0x2e8>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a56      	ldr	r2, [pc, #344]	; (8001558 <HAL_GPIO_Init+0x2e8>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b54      	ldr	r3, [pc, #336]	; (8001558 <HAL_GPIO_Init+0x2e8>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_GPIO_Init+0x2ec>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a49      	ldr	r2, [pc, #292]	; (8001560 <HAL_GPIO_Init+0x2f0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x202>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a48      	ldr	r2, [pc, #288]	; (8001564 <HAL_GPIO_Init+0x2f4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x1fe>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a47      	ldr	r2, [pc, #284]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x1fa>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a46      	ldr	r2, [pc, #280]	; (800156c <HAL_GPIO_Init+0x2fc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x1f6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a45      	ldr	r2, [pc, #276]	; (8001570 <HAL_GPIO_Init+0x300>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x1f2>
 800145e:	2304      	movs	r3, #4
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001462:	2307      	movs	r3, #7
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	; (800155c <HAL_GPIO_Init+0x2ec>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_GPIO_Init+0x304>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a2f      	ldr	r2, [pc, #188]	; (8001574 <HAL_GPIO_Init+0x304>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_GPIO_Init+0x304>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a24      	ldr	r2, [pc, #144]	; (8001574 <HAL_GPIO_Init+0x304>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HAL_GPIO_Init+0x304>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <HAL_GPIO_Init+0x304>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_GPIO_Init+0x304>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_GPIO_Init+0x304>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f aea2 	bls.w	800128c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40013c00 	.word	0x40013c00

08001578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e001      	b.n	800159a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c4:	e003      	b.n	80015ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	619a      	str	r2, [r3, #24]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e267      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d075      	beq.n	80016e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d00c      	beq.n	8001620 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001606:	4b85      	ldr	r3, [pc, #532]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160e:	2b08      	cmp	r3, #8
 8001610:	d112      	bne.n	8001638 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001612:	4b82      	ldr	r3, [pc, #520]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800161e:	d10b      	bne.n	8001638 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4b7e      	ldr	r3, [pc, #504]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d05b      	beq.n	80016e4 <HAL_RCC_OscConfig+0x108>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d157      	bne.n	80016e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e242      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x74>
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a75      	ldr	r2, [pc, #468]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0xb0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x98>
 800165a:	4b70      	ldr	r3, [pc, #448]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6f      	ldr	r2, [pc, #444]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b6d      	ldr	r3, [pc, #436]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a6c      	ldr	r2, [pc, #432]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0xb0>
 8001674:	4b69      	ldr	r3, [pc, #420]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a68      	ldr	r2, [pc, #416]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b66      	ldr	r3, [pc, #408]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a65      	ldr	r2, [pc, #404]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fc18 	bl	8000ec8 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fc14 	bl	8000ec8 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e207      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b5b      	ldr	r3, [pc, #364]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0xc0>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc04 	bl	8000ec8 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fc00 	bl	8000ec8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1f3      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	4b51      	ldr	r3, [pc, #324]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0xe8>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00b      	beq.n	8001716 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001706:	2b08      	cmp	r3, #8
 8001708:	d11c      	bne.n	8001744 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170a:	4b44      	ldr	r3, [pc, #272]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x152>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e1c7      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4937      	ldr	r1, [pc, #220]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e03a      	b.n	80017ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d020      	beq.n	800178e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x244>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff fbb9 	bl	8000ec8 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fbb5 	bl	8000ec8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1a8      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_RCC_OscConfig+0x240>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4925      	ldr	r1, [pc, #148]	; (800181c <HAL_RCC_OscConfig+0x240>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_RCC_OscConfig+0x244>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fb98 	bl	8000ec8 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fb94 	bl	8000ec8 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e187      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d036      	beq.n	8001834 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d016      	beq.n	80017fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_RCC_OscConfig+0x248>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff fb78 	bl	8000ec8 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff fb74 	bl	8000ec8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e167      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x240>)
 80017f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x200>
 80017fa:	e01b      	b.n	8001834 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_OscConfig+0x248>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff fb61 	bl	8000ec8 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	e00e      	b.n	8001828 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff fb5d 	bl	8000ec8 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d907      	bls.n	8001828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e150      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
 800181c:	40023800 	.word	0x40023800
 8001820:	42470000 	.word	0x42470000
 8001824:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 800182a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ea      	bne.n	800180a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8097 	beq.w	8001970 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b7d      	ldr	r3, [pc, #500]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a7c      	ldr	r2, [pc, #496]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b7a      	ldr	r3, [pc, #488]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b77      	ldr	r3, [pc, #476]	; (8001a50 <HAL_RCC_OscConfig+0x474>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d118      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b74      	ldr	r3, [pc, #464]	; (8001a50 <HAL_RCC_OscConfig+0x474>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a73      	ldr	r2, [pc, #460]	; (8001a50 <HAL_RCC_OscConfig+0x474>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7ff fb1d 	bl	8000ec8 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff fb19 	bl	8000ec8 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e10c      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	4b6a      	ldr	r3, [pc, #424]	; (8001a50 <HAL_RCC_OscConfig+0x474>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x2ea>
 80018b8:	4b64      	ldr	r3, [pc, #400]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a63      	ldr	r2, [pc, #396]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	e01c      	b.n	8001900 <HAL_RCC_OscConfig+0x324>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x30c>
 80018ce:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a5e      	ldr	r2, [pc, #376]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	4b5c      	ldr	r3, [pc, #368]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	4a5b      	ldr	r2, [pc, #364]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0x324>
 80018e8:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d015      	beq.n	8001934 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fade 	bl	8000ec8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff fada 	bl	8000ec8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0cb      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ee      	beq.n	8001910 <HAL_RCC_OscConfig+0x334>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff fac8 	bl	8000ec8 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff fac4 	bl	8000ec8 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0b5      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ee      	bne.n	800193c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a1 	beq.w	8001abc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	d05c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d141      	bne.n	8001a12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_RCC_OscConfig+0x478>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fa98 	bl	8000ec8 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fa94 	bl	8000ec8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e087      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	491b      	ldr	r1, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x478>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fa6d 	bl	8000ec8 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff fa69 	bl	8000ec8 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e05c      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x416>
 8001a10:	e054      	b.n	8001abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_RCC_OscConfig+0x478>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fa56 	bl	8000ec8 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff fa52 	bl	8000ec8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e045      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x444>
 8001a3e:	e03d      	b.n	8001abc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e038      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000
 8001a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x4ec>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d028      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d121      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d11a      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a88:	4013      	ands	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0cc      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d90c      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b65      	ldr	r3, [pc, #404]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b63      	ldr	r3, [pc, #396]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0b8      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b20:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b38:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	494d      	ldr	r1, [pc, #308]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d044      	beq.n	8001bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d119      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e07f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e067      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 0203 	bic.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4934      	ldr	r1, [pc, #208]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bbc:	f7ff f984 	bl	8000ec8 <HAL_GetTick>
 8001bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc4:	f7ff f980 	bl	8000ec8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e04f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 020c 	and.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1eb      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d20c      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e032      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4916      	ldr	r1, [pc, #88]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	490e      	ldr	r1, [pc, #56]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c52:	f000 f821 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	490a      	ldr	r1, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	5ccb      	ldrb	r3, [r1, r3]
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f8e4 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	080043dc 	.word	0x080043dc
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c9c:	b090      	sub	sp, #64	; 0x40
 8001c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca8:	2300      	movs	r3, #0
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb0:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d00d      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	f200 80a1 	bhi.w	8001e04 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x34>
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cca:	e09b      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x184>)
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cd0:	e09b      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cd6:	e098      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd8:	4b4f      	ldr	r3, [pc, #316]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce2:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d028      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cee:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	099b      	lsrs	r3, r3, #6
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	627a      	str	r2, [r7, #36]	; 0x24
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d00:	2100      	movs	r1, #0
 8001d02:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d04:	fb03 f201 	mul.w	r2, r3, r1
 8001d08:	2300      	movs	r3, #0
 8001d0a:	fb00 f303 	mul.w	r3, r0, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a43      	ldr	r2, [pc, #268]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d12:	fba0 1202 	umull	r1, r2, r0, r2
 8001d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d18:	460a      	mov	r2, r1
 8001d1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d1e:	4413      	add	r3, r2
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d24:	2200      	movs	r2, #0
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	61fa      	str	r2, [r7, #28]
 8001d2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d32:	f7fe faa5 	bl	8000280 <__aeabi_uldivmod>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d3e:	e053      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d40:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	2200      	movs	r2, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	617a      	str	r2, [r7, #20]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d52:	f04f 0b00 	mov.w	fp, #0
 8001d56:	4652      	mov	r2, sl
 8001d58:	465b      	mov	r3, fp
 8001d5a:	f04f 0000 	mov.w	r0, #0
 8001d5e:	f04f 0100 	mov.w	r1, #0
 8001d62:	0159      	lsls	r1, r3, #5
 8001d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d68:	0150      	lsls	r0, r2, #5
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	ebb2 080a 	subs.w	r8, r2, sl
 8001d72:	eb63 090b 	sbc.w	r9, r3, fp
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d8a:	ebb2 0408 	subs.w	r4, r2, r8
 8001d8e:	eb63 0509 	sbc.w	r5, r3, r9
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	00eb      	lsls	r3, r5, #3
 8001d9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001da0:	00e2      	lsls	r2, r4, #3
 8001da2:	4614      	mov	r4, r2
 8001da4:	461d      	mov	r5, r3
 8001da6:	eb14 030a 	adds.w	r3, r4, sl
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	eb45 030b 	adc.w	r3, r5, fp
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	028b      	lsls	r3, r1, #10
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc8:	4621      	mov	r1, r4
 8001dca:	028a      	lsls	r2, r1, #10
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	60fa      	str	r2, [r7, #12]
 8001dd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ddc:	f7fe fa50 	bl	8000280 <__aeabi_uldivmod>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4613      	mov	r3, r2
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	3301      	adds	r3, #1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e02:	e002      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3740      	adds	r7, #64	; 0x40
 8001e10:	46bd      	mov	sp, r7
 8001e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	017d7840 	.word	0x017d7840

08001e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0a9b      	lsrs	r3, r3, #10
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4903      	ldr	r1, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	080043ec 	.word	0x080043ec

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e68:	f7ff ffdc 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0b5b      	lsrs	r3, r3, #13
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	080043ec 	.word	0x080043ec

08001e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e041      	b.n	8001f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe fdde 	bl	8000a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f000 f950 	bl	8002170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d001      	beq.n	8001f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e03c      	b.n	8001fbe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_TIM_Base_Start+0xa0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d018      	beq.n	8001f88 <HAL_TIM_Base_Start+0x5c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5e:	d013      	beq.n	8001f88 <HAL_TIM_Base_Start+0x5c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <HAL_TIM_Base_Start+0xa4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00e      	beq.n	8001f88 <HAL_TIM_Base_Start+0x5c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_TIM_Base_Start+0xa8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_TIM_Base_Start+0x5c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_TIM_Base_Start+0xac>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_TIM_Base_Start+0x5c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <HAL_TIM_Base_Start+0xb0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d111      	bne.n	8001fac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d010      	beq.n	8001fbc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001faa:	e007      	b.n	8001fbc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40000800 	.word	0x40000800
 8001fd8:	40000c00 	.word	0x40000c00
 8001fdc:	40014000 	.word	0x40014000

08001fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_ConfigClockSource+0x1c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0b4      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x186>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800201a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002034:	d03e      	beq.n	80020b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203a:	f200 8087 	bhi.w	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002042:	f000 8086 	beq.w	8002152 <HAL_TIM_ConfigClockSource+0x172>
 8002046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204a:	d87f      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b70      	cmp	r3, #112	; 0x70
 800204e:	d01a      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0xa6>
 8002050:	2b70      	cmp	r3, #112	; 0x70
 8002052:	d87b      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b60      	cmp	r3, #96	; 0x60
 8002056:	d050      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x11a>
 8002058:	2b60      	cmp	r3, #96	; 0x60
 800205a:	d877      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b50      	cmp	r3, #80	; 0x50
 800205e:	d03c      	beq.n	80020da <HAL_TIM_ConfigClockSource+0xfa>
 8002060:	2b50      	cmp	r3, #80	; 0x50
 8002062:	d873      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d058      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x13a>
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d86f      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b30      	cmp	r3, #48	; 0x30
 800206e:	d064      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002070:	2b30      	cmp	r3, #48	; 0x30
 8002072:	d86b      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002074:	2b20      	cmp	r3, #32
 8002076:	d060      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002078:	2b20      	cmp	r3, #32
 800207a:	d867      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05c      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002080:	2b10      	cmp	r3, #16
 8002082:	d05a      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002084:	e062      	b.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002096:	f000 f971 	bl	800237c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	609a      	str	r2, [r3, #8]
      break;
 80020b2:	e04f      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020c4:	f000 f95a 	bl	800237c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d6:	609a      	str	r2, [r3, #8]
      break;
 80020d8:	e03c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e6:	461a      	mov	r2, r3
 80020e8:	f000 f8ce 	bl	8002288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2150      	movs	r1, #80	; 0x50
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f927 	bl	8002346 <TIM_ITRx_SetConfig>
      break;
 80020f8:	e02c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002106:	461a      	mov	r2, r3
 8002108:	f000 f8ed 	bl	80022e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2160      	movs	r1, #96	; 0x60
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f917 	bl	8002346 <TIM_ITRx_SetConfig>
      break;
 8002118:	e01c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002126:	461a      	mov	r2, r3
 8002128:	f000 f8ae 	bl	8002288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2140      	movs	r1, #64	; 0x40
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f907 	bl	8002346 <TIM_ITRx_SetConfig>
      break;
 8002138:	e00c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f000 f8fe 	bl	8002346 <TIM_ITRx_SetConfig>
      break;
 800214a:	e003      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      break;
 8002150:	e000      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3a      	ldr	r2, [pc, #232]	; (800226c <TIM_Base_SetConfig+0xfc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00f      	beq.n	80021a8 <TIM_Base_SetConfig+0x38>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218e:	d00b      	beq.n	80021a8 <TIM_Base_SetConfig+0x38>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a37      	ldr	r2, [pc, #220]	; (8002270 <TIM_Base_SetConfig+0x100>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <TIM_Base_SetConfig+0x38>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a36      	ldr	r2, [pc, #216]	; (8002274 <TIM_Base_SetConfig+0x104>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <TIM_Base_SetConfig+0x38>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a35      	ldr	r2, [pc, #212]	; (8002278 <TIM_Base_SetConfig+0x108>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d108      	bne.n	80021ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2b      	ldr	r2, [pc, #172]	; (800226c <TIM_Base_SetConfig+0xfc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a28      	ldr	r2, [pc, #160]	; (8002270 <TIM_Base_SetConfig+0x100>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a27      	ldr	r2, [pc, #156]	; (8002274 <TIM_Base_SetConfig+0x104>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <TIM_Base_SetConfig+0x108>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a25      	ldr	r2, [pc, #148]	; (800227c <TIM_Base_SetConfig+0x10c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <TIM_Base_SetConfig+0x110>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0x8a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <TIM_Base_SetConfig+0x114>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <TIM_Base_SetConfig+0xfc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d103      	bne.n	8002240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f023 0201 	bic.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	611a      	str	r2, [r3, #16]
  }
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40000c00 	.word	0x40000c00
 800227c:	40014000 	.word	0x40014000
 8002280:	40014400 	.word	0x40014400
 8002284:	40014800 	.word	0x40014800

08002288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f023 0201 	bic.w	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f023 030a 	bic.w	r3, r3, #10
 80022c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	621a      	str	r2, [r3, #32]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b087      	sub	sp, #28
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f023 0210 	bic.w	r2, r3, #16
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	031b      	lsls	r3, r3, #12
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002322:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	621a      	str	r2, [r3, #32]
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	f043 0307 	orr.w	r3, r3, #7
 8002368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	609a      	str	r2, [r3, #8]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	021a      	lsls	r2, r3, #8
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	431a      	orrs	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e050      	b.n	8002476 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d018      	beq.n	800244a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d013      	beq.n	800244a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a18      	ldr	r2, [pc, #96]	; (8002488 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00e      	beq.n	800244a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a13      	ldr	r2, [pc, #76]	; (8002494 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10c      	bne.n	8002464 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	4313      	orrs	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40010000 	.word	0x40010000
 8002488:	40000400 	.word	0x40000400
 800248c:	40000800 	.word	0x40000800
 8002490:	40000c00 	.word	0x40000c00
 8002494:	40014000 	.word	0x40014000

08002498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e042      	b.n	8002530 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fafa 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fdbd 	bl	800305c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b20      	cmp	r3, #32
 8002556:	d175      	bne.n	8002644 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_UART_Transmit+0x2c>
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e06e      	b.n	8002646 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2221      	movs	r2, #33	; 0x21
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002576:	f7fe fca7 	bl	8000ec8 <HAL_GetTick>
 800257a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002590:	d108      	bne.n	80025a4 <HAL_UART_Transmit+0x6c>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d104      	bne.n	80025a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e003      	b.n	80025ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025ac:	e02e      	b.n	800260c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2200      	movs	r2, #0
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fb1f 	bl	8002bfc <UART_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e03a      	b.n	8002646 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10b      	bne.n	80025ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	3302      	adds	r3, #2
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e007      	b.n	80025fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	3301      	adds	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1cb      	bne.n	80025ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2200      	movs	r2, #0
 800261e:	2140      	movs	r1, #64	; 0x40
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 faeb 	bl	8002bfc <UART_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e006      	b.n	8002646 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	4613      	mov	r3, r2
 800265a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b20      	cmp	r3, #32
 8002666:	d112      	bne.n	800268e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Receive_IT+0x26>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e00b      	b.n	8002690 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	461a      	mov	r2, r3
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fb12 	bl	8002cae <UART_Start_Receive_IT>
 800268a:	4603      	mov	r3, r0
 800268c:	e000      	b.n	8002690 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b0ba      	sub	sp, #232	; 0xe8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_UART_IRQHandler+0x66>
 80026ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fbf2 	bl	8002ee0 <UART_Receive_IT>
      return;
 80026fc:	e25b      	b.n	8002bb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 80de 	beq.w	80028c4 <HAL_UART_IRQHandler+0x22c>
 8002708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002718:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80d1 	beq.w	80028c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_UART_IRQHandler+0xae>
 800272e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_UART_IRQHandler+0xd2>
 8002752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f043 0202 	orr.w	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_UART_IRQHandler+0xf6>
 8002776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f043 0204 	orr.w	r2, r3, #4
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d011      	beq.n	80027be <HAL_UART_IRQHandler+0x126>
 800279a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f043 0208 	orr.w	r2, r3, #8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 81f2 	beq.w	8002bac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_UART_IRQHandler+0x14e>
 80027d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fb7d 	bl	8002ee0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <HAL_UART_IRQHandler+0x17a>
 800280a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d04f      	beq.n	80028b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa85 	bl	8002d22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d141      	bne.n	80028aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3314      	adds	r3, #20
 800282c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800283c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3314      	adds	r3, #20
 800284e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002852:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800285e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800286a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1d9      	bne.n	8002826 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d013      	beq.n	80028a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	4a7e      	ldr	r2, [pc, #504]	; (8002a78 <HAL_UART_IRQHandler+0x3e0>)
 8002880:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fccf 	bl	800122a <HAL_DMA_Abort_IT>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800289c:	4610      	mov	r0, r2
 800289e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	e00e      	b.n	80028c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f994 	bl	8002bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a8:	e00a      	b.n	80028c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f990 	bl	8002bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b0:	e006      	b.n	80028c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f98c 	bl	8002bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80028be:	e175      	b.n	8002bac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c0:	bf00      	nop
    return;
 80028c2:	e173      	b.n	8002bac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	f040 814f 	bne.w	8002b6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8148 	beq.w	8002b6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8141 	beq.w	8002b6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	f040 80b6 	bne.w	8002a7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800291c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8145 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800292a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800292e:	429a      	cmp	r2, r3
 8002930:	f080 813e 	bcs.w	8002bb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800293a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002946:	f000 8088 	beq.w	8002a5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002976:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800297a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002982:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800298e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1d9      	bne.n	800294a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3314      	adds	r3, #20
 800299c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3314      	adds	r3, #20
 80029b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029c6:	e841 2300 	strex	r3, r2, [r1]
 80029ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e1      	bne.n	8002996 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3314      	adds	r3, #20
 80029d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3314      	adds	r3, #20
 80029f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029fe:	e841 2300 	strex	r3, r2, [r1]
 8002a02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e3      	bne.n	80029d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a2a:	f023 0310 	bic.w	r3, r3, #16
 8002a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e3      	bne.n	8002a18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fb78 	bl	800114a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f8b7 	bl	8002be4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a76:	e09b      	b.n	8002bb0 <HAL_UART_IRQHandler+0x518>
 8002a78:	08002de9 	.word	0x08002de9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 808e 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8089 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ac6:	647a      	str	r2, [r7, #68]	; 0x44
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ace:	e841 2300 	strex	r3, r2, [r1]
 8002ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e3      	bne.n	8002aa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3314      	adds	r3, #20
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3314      	adds	r3, #20
 8002afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002afe:	633a      	str	r2, [r7, #48]	; 0x30
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e3      	bne.n	8002ada <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0310 	bic.w	r3, r3, #16
 8002b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b44:	61fa      	str	r2, [r7, #28]
 8002b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b48:	69b9      	ldr	r1, [r7, #24]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	e841 2300 	strex	r3, r2, [r1]
 8002b50:	617b      	str	r3, [r7, #20]
   return(result);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e3      	bne.n	8002b20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b62:	4619      	mov	r1, r3
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f83d 	bl	8002be4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b6a:	e023      	b.n	8002bb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <HAL_UART_IRQHandler+0x4f4>
 8002b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f943 	bl	8002e10 <UART_Transmit_IT>
    return;
 8002b8a:	e014      	b.n	8002bb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00e      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x51e>
 8002b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f983 	bl	8002eb0 <UART_EndTransmit_IT>
    return;
 8002baa:	e004      	b.n	8002bb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002bac:	bf00      	nop
 8002bae:	e002      	b.n	8002bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002bb0:	bf00      	nop
 8002bb2:	e000      	b.n	8002bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002bb4:	bf00      	nop
  }
}
 8002bb6:	37e8      	adds	r7, #232	; 0xe8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0c:	e03b      	b.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d037      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7fe f957 	bl	8000ec8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e03a      	b.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d023      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d020      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d01d      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d116      	bne.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f857 	bl	8002d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2208      	movs	r2, #8
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00f      	b.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d0b4      	beq.n	8002c0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2222      	movs	r2, #34	; 0x22
 8002cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0220 	orr.w	r2, r2, #32
 8002d12:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b095      	sub	sp, #84	; 0x54
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d4a:	643a      	str	r2, [r7, #64]	; 0x40
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e5      	bne.n	8002d2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3314      	adds	r3, #20
 8002d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3314      	adds	r3, #20
 8002d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e5      	bne.n	8002d5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d119      	bne.n	8002dce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f023 0310 	bic.w	r3, r3, #16
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dba:	61ba      	str	r2, [r7, #24]
 8002dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6979      	ldr	r1, [r7, #20]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e5      	bne.n	8002d9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ddc:	bf00      	nop
 8002dde:	3754      	adds	r7, #84	; 0x54
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff fee4 	bl	8002bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b21      	cmp	r3, #33	; 0x21
 8002e22:	d13e      	bne.n	8002ea2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2c:	d114      	bne.n	8002e58 <UART_Transmit_IT+0x48>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d110      	bne.n	8002e58 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	1c9a      	adds	r2, r3, #2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	621a      	str	r2, [r3, #32]
 8002e56:	e008      	b.n	8002e6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	1c59      	adds	r1, r3, #1
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6211      	str	r1, [r2, #32]
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4619      	mov	r1, r3
 8002e78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10f      	bne.n	8002e9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e000      	b.n	8002ea4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
  }
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fe73 	bl	8002bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08c      	sub	sp, #48	; 0x30
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b22      	cmp	r3, #34	; 0x22
 8002ef2:	f040 80ae 	bne.w	8003052 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efe:	d117      	bne.n	8002f30 <UART_Receive_IT+0x50>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d113      	bne.n	8002f30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2e:	e026      	b.n	8002f7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f42:	d007      	beq.n	8002f54 <UART_Receive_IT+0x74>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <UART_Receive_IT+0x82>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d106      	bne.n	8002f62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	e008      	b.n	8002f74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d15d      	bne.n	800304e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0220 	bic.w	r2, r2, #32
 8002fa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d135      	bne.n	8003044 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	613b      	str	r3, [r7, #16]
   return(result);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f023 0310 	bic.w	r3, r3, #16
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffe:	623a      	str	r2, [r7, #32]
 8003000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	69f9      	ldr	r1, [r7, #28]
 8003004:	6a3a      	ldr	r2, [r7, #32]
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	61bb      	str	r3, [r7, #24]
   return(result);
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e5      	bne.n	8002fde <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b10      	cmp	r3, #16
 800301e:	d10a      	bne.n	8003036 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800303a:	4619      	mov	r1, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fdd1 	bl	8002be4 <HAL_UARTEx_RxEventCallback>
 8003042:	e002      	b.n	800304a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7fd fe6b 	bl	8000d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e002      	b.n	8003054 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	e000      	b.n	8003054 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
  }
}
 8003054:	4618      	mov	r0, r3
 8003056:	3730      	adds	r7, #48	; 0x30
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003060:	b0c0      	sub	sp, #256	; 0x100
 8003062:	af00      	add	r7, sp, #0
 8003064:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	68d9      	ldr	r1, [r3, #12]
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	ea40 0301 	orr.w	r3, r0, r1
 8003084:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	431a      	orrs	r2, r3
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	431a      	orrs	r2, r3
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030b4:	f021 010c 	bic.w	r1, r1, #12
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030c2:	430b      	orrs	r3, r1
 80030c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d6:	6999      	ldr	r1, [r3, #24]
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	ea40 0301 	orr.w	r3, r0, r1
 80030e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b8f      	ldr	r3, [pc, #572]	; (8003328 <UART_SetConfig+0x2cc>)
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d005      	beq.n	80030fc <UART_SetConfig+0xa0>
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b8d      	ldr	r3, [pc, #564]	; (800332c <UART_SetConfig+0x2d0>)
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d104      	bne.n	8003106 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030fc:	f7fe feb2 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 8003100:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003104:	e003      	b.n	800310e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003106:	f7fe fe99 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 800310a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003118:	f040 810c 	bne.w	8003334 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800311c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003120:	2200      	movs	r2, #0
 8003122:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003126:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800312a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800312e:	4622      	mov	r2, r4
 8003130:	462b      	mov	r3, r5
 8003132:	1891      	adds	r1, r2, r2
 8003134:	65b9      	str	r1, [r7, #88]	; 0x58
 8003136:	415b      	adcs	r3, r3
 8003138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800313a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800313e:	4621      	mov	r1, r4
 8003140:	eb12 0801 	adds.w	r8, r2, r1
 8003144:	4629      	mov	r1, r5
 8003146:	eb43 0901 	adc.w	r9, r3, r1
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800315a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315e:	4690      	mov	r8, r2
 8003160:	4699      	mov	r9, r3
 8003162:	4623      	mov	r3, r4
 8003164:	eb18 0303 	adds.w	r3, r8, r3
 8003168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800316c:	462b      	mov	r3, r5
 800316e:	eb49 0303 	adc.w	r3, r9, r3
 8003172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003182:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003186:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800318a:	460b      	mov	r3, r1
 800318c:	18db      	adds	r3, r3, r3
 800318e:	653b      	str	r3, [r7, #80]	; 0x50
 8003190:	4613      	mov	r3, r2
 8003192:	eb42 0303 	adc.w	r3, r2, r3
 8003196:	657b      	str	r3, [r7, #84]	; 0x54
 8003198:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800319c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031a0:	f7fd f86e 	bl	8000280 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4b61      	ldr	r3, [pc, #388]	; (8003330 <UART_SetConfig+0x2d4>)
 80031aa:	fba3 2302 	umull	r2, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	011c      	lsls	r4, r3, #4
 80031b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	1891      	adds	r1, r2, r2
 80031ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80031cc:	415b      	adcs	r3, r3
 80031ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031d4:	4641      	mov	r1, r8
 80031d6:	eb12 0a01 	adds.w	sl, r2, r1
 80031da:	4649      	mov	r1, r9
 80031dc:	eb43 0b01 	adc.w	fp, r3, r1
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031f4:	4692      	mov	sl, r2
 80031f6:	469b      	mov	fp, r3
 80031f8:	4643      	mov	r3, r8
 80031fa:	eb1a 0303 	adds.w	r3, sl, r3
 80031fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003202:	464b      	mov	r3, r9
 8003204:	eb4b 0303 	adc.w	r3, fp, r3
 8003208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003218:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800321c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003220:	460b      	mov	r3, r1
 8003222:	18db      	adds	r3, r3, r3
 8003224:	643b      	str	r3, [r7, #64]	; 0x40
 8003226:	4613      	mov	r3, r2
 8003228:	eb42 0303 	adc.w	r3, r2, r3
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
 800322e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003232:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003236:	f7fd f823 	bl	8000280 <__aeabi_uldivmod>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4611      	mov	r1, r2
 8003240:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <UART_SetConfig+0x2d4>)
 8003242:	fba3 2301 	umull	r2, r3, r3, r1
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2264      	movs	r2, #100	; 0x64
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	1acb      	subs	r3, r1, r3
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003256:	4b36      	ldr	r3, [pc, #216]	; (8003330 <UART_SetConfig+0x2d4>)
 8003258:	fba3 2302 	umull	r2, r3, r3, r2
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003264:	441c      	add	r4, r3
 8003266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003270:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003274:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	1891      	adds	r1, r2, r2
 800327e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003280:	415b      	adcs	r3, r3
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003288:	4641      	mov	r1, r8
 800328a:	1851      	adds	r1, r2, r1
 800328c:	6339      	str	r1, [r7, #48]	; 0x30
 800328e:	4649      	mov	r1, r9
 8003290:	414b      	adcs	r3, r1
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032a0:	4659      	mov	r1, fp
 80032a2:	00cb      	lsls	r3, r1, #3
 80032a4:	4651      	mov	r1, sl
 80032a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032aa:	4651      	mov	r1, sl
 80032ac:	00ca      	lsls	r2, r1, #3
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	4642      	mov	r2, r8
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032bc:	464b      	mov	r3, r9
 80032be:	460a      	mov	r2, r1
 80032c0:	eb42 0303 	adc.w	r3, r2, r3
 80032c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032dc:	460b      	mov	r3, r1
 80032de:	18db      	adds	r3, r3, r3
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e2:	4613      	mov	r3, r2
 80032e4:	eb42 0303 	adc.w	r3, r2, r3
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032f2:	f7fc ffc5 	bl	8000280 <__aeabi_uldivmod>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <UART_SetConfig+0x2d4>)
 80032fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	2164      	movs	r1, #100	; 0x64
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	3332      	adds	r3, #50	; 0x32
 800330e:	4a08      	ldr	r2, [pc, #32]	; (8003330 <UART_SetConfig+0x2d4>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	f003 0207 	and.w	r2, r3, #7
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4422      	add	r2, r4
 8003322:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003324:	e106      	b.n	8003534 <UART_SetConfig+0x4d8>
 8003326:	bf00      	nop
 8003328:	40011000 	.word	0x40011000
 800332c:	40011400 	.word	0x40011400
 8003330:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800333e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003342:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003346:	4642      	mov	r2, r8
 8003348:	464b      	mov	r3, r9
 800334a:	1891      	adds	r1, r2, r2
 800334c:	6239      	str	r1, [r7, #32]
 800334e:	415b      	adcs	r3, r3
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
 8003352:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003356:	4641      	mov	r1, r8
 8003358:	1854      	adds	r4, r2, r1
 800335a:	4649      	mov	r1, r9
 800335c:	eb43 0501 	adc.w	r5, r3, r1
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	00eb      	lsls	r3, r5, #3
 800336a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800336e:	00e2      	lsls	r2, r4, #3
 8003370:	4614      	mov	r4, r2
 8003372:	461d      	mov	r5, r3
 8003374:	4643      	mov	r3, r8
 8003376:	18e3      	adds	r3, r4, r3
 8003378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800337c:	464b      	mov	r3, r9
 800337e:	eb45 0303 	adc.w	r3, r5, r3
 8003382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003392:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033a2:	4629      	mov	r1, r5
 80033a4:	008b      	lsls	r3, r1, #2
 80033a6:	4621      	mov	r1, r4
 80033a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ac:	4621      	mov	r1, r4
 80033ae:	008a      	lsls	r2, r1, #2
 80033b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033b4:	f7fc ff64 	bl	8000280 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4b60      	ldr	r3, [pc, #384]	; (8003540 <UART_SetConfig+0x4e4>)
 80033be:	fba3 2302 	umull	r2, r3, r3, r2
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	011c      	lsls	r4, r3, #4
 80033c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033d8:	4642      	mov	r2, r8
 80033da:	464b      	mov	r3, r9
 80033dc:	1891      	adds	r1, r2, r2
 80033de:	61b9      	str	r1, [r7, #24]
 80033e0:	415b      	adcs	r3, r3
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e8:	4641      	mov	r1, r8
 80033ea:	1851      	adds	r1, r2, r1
 80033ec:	6139      	str	r1, [r7, #16]
 80033ee:	4649      	mov	r1, r9
 80033f0:	414b      	adcs	r3, r1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003400:	4659      	mov	r1, fp
 8003402:	00cb      	lsls	r3, r1, #3
 8003404:	4651      	mov	r1, sl
 8003406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800340a:	4651      	mov	r1, sl
 800340c:	00ca      	lsls	r2, r1, #3
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	4603      	mov	r3, r0
 8003414:	4642      	mov	r2, r8
 8003416:	189b      	adds	r3, r3, r2
 8003418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800341c:	464b      	mov	r3, r9
 800341e:	460a      	mov	r2, r1
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	67bb      	str	r3, [r7, #120]	; 0x78
 8003432:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003440:	4649      	mov	r1, r9
 8003442:	008b      	lsls	r3, r1, #2
 8003444:	4641      	mov	r1, r8
 8003446:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800344a:	4641      	mov	r1, r8
 800344c:	008a      	lsls	r2, r1, #2
 800344e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003452:	f7fc ff15 	bl	8000280 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4611      	mov	r1, r2
 800345c:	4b38      	ldr	r3, [pc, #224]	; (8003540 <UART_SetConfig+0x4e4>)
 800345e:	fba3 2301 	umull	r2, r3, r3, r1
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2264      	movs	r2, #100	; 0x64
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	1acb      	subs	r3, r1, r3
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	3332      	adds	r3, #50	; 0x32
 8003470:	4a33      	ldr	r2, [pc, #204]	; (8003540 <UART_SetConfig+0x4e4>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347c:	441c      	add	r4, r3
 800347e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003482:	2200      	movs	r2, #0
 8003484:	673b      	str	r3, [r7, #112]	; 0x70
 8003486:	677a      	str	r2, [r7, #116]	; 0x74
 8003488:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	1891      	adds	r1, r2, r2
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	415b      	adcs	r3, r3
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800349c:	4641      	mov	r1, r8
 800349e:	1851      	adds	r1, r2, r1
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	4649      	mov	r1, r9
 80034a4:	414b      	adcs	r3, r1
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034b4:	4659      	mov	r1, fp
 80034b6:	00cb      	lsls	r3, r1, #3
 80034b8:	4651      	mov	r1, sl
 80034ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034be:	4651      	mov	r1, sl
 80034c0:	00ca      	lsls	r2, r1, #3
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	4642      	mov	r2, r8
 80034ca:	189b      	adds	r3, r3, r2
 80034cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80034ce:	464b      	mov	r3, r9
 80034d0:	460a      	mov	r2, r1
 80034d2:	eb42 0303 	adc.w	r3, r2, r3
 80034d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	663b      	str	r3, [r7, #96]	; 0x60
 80034e2:	667a      	str	r2, [r7, #100]	; 0x64
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034f0:	4649      	mov	r1, r9
 80034f2:	008b      	lsls	r3, r1, #2
 80034f4:	4641      	mov	r1, r8
 80034f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034fa:	4641      	mov	r1, r8
 80034fc:	008a      	lsls	r2, r1, #2
 80034fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003502:	f7fc febd 	bl	8000280 <__aeabi_uldivmod>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <UART_SetConfig+0x4e4>)
 800350c:	fba3 1302 	umull	r1, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2164      	movs	r1, #100	; 0x64
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	3332      	adds	r3, #50	; 0x32
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <UART_SetConfig+0x4e4>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4422      	add	r2, r4
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800353a:	46bd      	mov	sp, r7
 800353c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003540:	51eb851f 	.word	0x51eb851f

08003544 <std>:
 8003544:	2300      	movs	r3, #0
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
 800354a:	e9c0 3300 	strd	r3, r3, [r0]
 800354e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003552:	6083      	str	r3, [r0, #8]
 8003554:	8181      	strh	r1, [r0, #12]
 8003556:	6643      	str	r3, [r0, #100]	; 0x64
 8003558:	81c2      	strh	r2, [r0, #14]
 800355a:	6183      	str	r3, [r0, #24]
 800355c:	4619      	mov	r1, r3
 800355e:	2208      	movs	r2, #8
 8003560:	305c      	adds	r0, #92	; 0x5c
 8003562:	f000 f906 	bl	8003772 <memset>
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <std+0x58>)
 8003568:	6263      	str	r3, [r4, #36]	; 0x24
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <std+0x5c>)
 800356c:	62a3      	str	r3, [r4, #40]	; 0x28
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <std+0x60>)
 8003570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <std+0x64>)
 8003574:	6323      	str	r3, [r4, #48]	; 0x30
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <std+0x68>)
 8003578:	6224      	str	r4, [r4, #32]
 800357a:	429c      	cmp	r4, r3
 800357c:	d006      	beq.n	800358c <std+0x48>
 800357e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003582:	4294      	cmp	r4, r2
 8003584:	d002      	beq.n	800358c <std+0x48>
 8003586:	33d0      	adds	r3, #208	; 0xd0
 8003588:	429c      	cmp	r4, r3
 800358a:	d105      	bne.n	8003598 <std+0x54>
 800358c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003594:	f000 b966 	b.w	8003864 <__retarget_lock_init_recursive>
 8003598:	bd10      	pop	{r4, pc}
 800359a:	bf00      	nop
 800359c:	080036ed 	.word	0x080036ed
 80035a0:	0800370f 	.word	0x0800370f
 80035a4:	08003747 	.word	0x08003747
 80035a8:	0800376b 	.word	0x0800376b
 80035ac:	2000022c 	.word	0x2000022c

080035b0 <stdio_exit_handler>:
 80035b0:	4a02      	ldr	r2, [pc, #8]	; (80035bc <stdio_exit_handler+0xc>)
 80035b2:	4903      	ldr	r1, [pc, #12]	; (80035c0 <stdio_exit_handler+0x10>)
 80035b4:	4803      	ldr	r0, [pc, #12]	; (80035c4 <stdio_exit_handler+0x14>)
 80035b6:	f000 b869 	b.w	800368c <_fwalk_sglue>
 80035ba:	bf00      	nop
 80035bc:	2000000c 	.word	0x2000000c
 80035c0:	08004111 	.word	0x08004111
 80035c4:	20000018 	.word	0x20000018

080035c8 <cleanup_stdio>:
 80035c8:	6841      	ldr	r1, [r0, #4]
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <cleanup_stdio+0x34>)
 80035cc:	4299      	cmp	r1, r3
 80035ce:	b510      	push	{r4, lr}
 80035d0:	4604      	mov	r4, r0
 80035d2:	d001      	beq.n	80035d8 <cleanup_stdio+0x10>
 80035d4:	f000 fd9c 	bl	8004110 <_fflush_r>
 80035d8:	68a1      	ldr	r1, [r4, #8]
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <cleanup_stdio+0x38>)
 80035dc:	4299      	cmp	r1, r3
 80035de:	d002      	beq.n	80035e6 <cleanup_stdio+0x1e>
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 fd95 	bl	8004110 <_fflush_r>
 80035e6:	68e1      	ldr	r1, [r4, #12]
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <cleanup_stdio+0x3c>)
 80035ea:	4299      	cmp	r1, r3
 80035ec:	d004      	beq.n	80035f8 <cleanup_stdio+0x30>
 80035ee:	4620      	mov	r0, r4
 80035f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f4:	f000 bd8c 	b.w	8004110 <_fflush_r>
 80035f8:	bd10      	pop	{r4, pc}
 80035fa:	bf00      	nop
 80035fc:	2000022c 	.word	0x2000022c
 8003600:	20000294 	.word	0x20000294
 8003604:	200002fc 	.word	0x200002fc

08003608 <global_stdio_init.part.0>:
 8003608:	b510      	push	{r4, lr}
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <global_stdio_init.part.0+0x30>)
 800360c:	4c0b      	ldr	r4, [pc, #44]	; (800363c <global_stdio_init.part.0+0x34>)
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <global_stdio_init.part.0+0x38>)
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	4620      	mov	r0, r4
 8003614:	2200      	movs	r2, #0
 8003616:	2104      	movs	r1, #4
 8003618:	f7ff ff94 	bl	8003544 <std>
 800361c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003620:	2201      	movs	r2, #1
 8003622:	2109      	movs	r1, #9
 8003624:	f7ff ff8e 	bl	8003544 <std>
 8003628:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800362c:	2202      	movs	r2, #2
 800362e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003632:	2112      	movs	r1, #18
 8003634:	f7ff bf86 	b.w	8003544 <std>
 8003638:	20000364 	.word	0x20000364
 800363c:	2000022c 	.word	0x2000022c
 8003640:	080035b1 	.word	0x080035b1

08003644 <__sfp_lock_acquire>:
 8003644:	4801      	ldr	r0, [pc, #4]	; (800364c <__sfp_lock_acquire+0x8>)
 8003646:	f000 b90e 	b.w	8003866 <__retarget_lock_acquire_recursive>
 800364a:	bf00      	nop
 800364c:	2000036d 	.word	0x2000036d

08003650 <__sfp_lock_release>:
 8003650:	4801      	ldr	r0, [pc, #4]	; (8003658 <__sfp_lock_release+0x8>)
 8003652:	f000 b909 	b.w	8003868 <__retarget_lock_release_recursive>
 8003656:	bf00      	nop
 8003658:	2000036d 	.word	0x2000036d

0800365c <__sinit>:
 800365c:	b510      	push	{r4, lr}
 800365e:	4604      	mov	r4, r0
 8003660:	f7ff fff0 	bl	8003644 <__sfp_lock_acquire>
 8003664:	6a23      	ldr	r3, [r4, #32]
 8003666:	b11b      	cbz	r3, 8003670 <__sinit+0x14>
 8003668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800366c:	f7ff bff0 	b.w	8003650 <__sfp_lock_release>
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <__sinit+0x28>)
 8003672:	6223      	str	r3, [r4, #32]
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <__sinit+0x2c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f5      	bne.n	8003668 <__sinit+0xc>
 800367c:	f7ff ffc4 	bl	8003608 <global_stdio_init.part.0>
 8003680:	e7f2      	b.n	8003668 <__sinit+0xc>
 8003682:	bf00      	nop
 8003684:	080035c9 	.word	0x080035c9
 8003688:	20000364 	.word	0x20000364

0800368c <_fwalk_sglue>:
 800368c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003690:	4607      	mov	r7, r0
 8003692:	4688      	mov	r8, r1
 8003694:	4614      	mov	r4, r2
 8003696:	2600      	movs	r6, #0
 8003698:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800369c:	f1b9 0901 	subs.w	r9, r9, #1
 80036a0:	d505      	bpl.n	80036ae <_fwalk_sglue+0x22>
 80036a2:	6824      	ldr	r4, [r4, #0]
 80036a4:	2c00      	cmp	r4, #0
 80036a6:	d1f7      	bne.n	8003698 <_fwalk_sglue+0xc>
 80036a8:	4630      	mov	r0, r6
 80036aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ae:	89ab      	ldrh	r3, [r5, #12]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d907      	bls.n	80036c4 <_fwalk_sglue+0x38>
 80036b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036b8:	3301      	adds	r3, #1
 80036ba:	d003      	beq.n	80036c4 <_fwalk_sglue+0x38>
 80036bc:	4629      	mov	r1, r5
 80036be:	4638      	mov	r0, r7
 80036c0:	47c0      	blx	r8
 80036c2:	4306      	orrs	r6, r0
 80036c4:	3568      	adds	r5, #104	; 0x68
 80036c6:	e7e9      	b.n	800369c <_fwalk_sglue+0x10>

080036c8 <iprintf>:
 80036c8:	b40f      	push	{r0, r1, r2, r3}
 80036ca:	b507      	push	{r0, r1, r2, lr}
 80036cc:	4906      	ldr	r1, [pc, #24]	; (80036e8 <iprintf+0x20>)
 80036ce:	ab04      	add	r3, sp, #16
 80036d0:	6808      	ldr	r0, [r1, #0]
 80036d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80036d6:	6881      	ldr	r1, [r0, #8]
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	f000 f9e9 	bl	8003ab0 <_vfiprintf_r>
 80036de:	b003      	add	sp, #12
 80036e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036e4:	b004      	add	sp, #16
 80036e6:	4770      	bx	lr
 80036e8:	20000064 	.word	0x20000064

080036ec <__sread>:
 80036ec:	b510      	push	{r4, lr}
 80036ee:	460c      	mov	r4, r1
 80036f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f4:	f000 f868 	bl	80037c8 <_read_r>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	bfab      	itete	ge
 80036fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003700:	181b      	addge	r3, r3, r0
 8003702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003706:	bfac      	ite	ge
 8003708:	6563      	strge	r3, [r4, #84]	; 0x54
 800370a:	81a3      	strhlt	r3, [r4, #12]
 800370c:	bd10      	pop	{r4, pc}

0800370e <__swrite>:
 800370e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003712:	461f      	mov	r7, r3
 8003714:	898b      	ldrh	r3, [r1, #12]
 8003716:	05db      	lsls	r3, r3, #23
 8003718:	4605      	mov	r5, r0
 800371a:	460c      	mov	r4, r1
 800371c:	4616      	mov	r6, r2
 800371e:	d505      	bpl.n	800372c <__swrite+0x1e>
 8003720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003724:	2302      	movs	r3, #2
 8003726:	2200      	movs	r2, #0
 8003728:	f000 f83c 	bl	80037a4 <_lseek_r>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	4632      	mov	r2, r6
 800373a:	463b      	mov	r3, r7
 800373c:	4628      	mov	r0, r5
 800373e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003742:	f000 b853 	b.w	80037ec <_write_r>

08003746 <__sseek>:
 8003746:	b510      	push	{r4, lr}
 8003748:	460c      	mov	r4, r1
 800374a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374e:	f000 f829 	bl	80037a4 <_lseek_r>
 8003752:	1c43      	adds	r3, r0, #1
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	bf15      	itete	ne
 8003758:	6560      	strne	r0, [r4, #84]	; 0x54
 800375a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800375e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003762:	81a3      	strheq	r3, [r4, #12]
 8003764:	bf18      	it	ne
 8003766:	81a3      	strhne	r3, [r4, #12]
 8003768:	bd10      	pop	{r4, pc}

0800376a <__sclose>:
 800376a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376e:	f000 b809 	b.w	8003784 <_close_r>

08003772 <memset>:
 8003772:	4402      	add	r2, r0
 8003774:	4603      	mov	r3, r0
 8003776:	4293      	cmp	r3, r2
 8003778:	d100      	bne.n	800377c <memset+0xa>
 800377a:	4770      	bx	lr
 800377c:	f803 1b01 	strb.w	r1, [r3], #1
 8003780:	e7f9      	b.n	8003776 <memset+0x4>
	...

08003784 <_close_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4d06      	ldr	r5, [pc, #24]	; (80037a0 <_close_r+0x1c>)
 8003788:	2300      	movs	r3, #0
 800378a:	4604      	mov	r4, r0
 800378c:	4608      	mov	r0, r1
 800378e:	602b      	str	r3, [r5, #0]
 8003790:	f7fd fa33 	bl	8000bfa <_close>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_close_r+0x1a>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	b103      	cbz	r3, 800379e <_close_r+0x1a>
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	20000368 	.word	0x20000368

080037a4 <_lseek_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4d07      	ldr	r5, [pc, #28]	; (80037c4 <_lseek_r+0x20>)
 80037a8:	4604      	mov	r4, r0
 80037aa:	4608      	mov	r0, r1
 80037ac:	4611      	mov	r1, r2
 80037ae:	2200      	movs	r2, #0
 80037b0:	602a      	str	r2, [r5, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f7fd fa48 	bl	8000c48 <_lseek>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d102      	bne.n	80037c2 <_lseek_r+0x1e>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	b103      	cbz	r3, 80037c2 <_lseek_r+0x1e>
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
 80037c4:	20000368 	.word	0x20000368

080037c8 <_read_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4d07      	ldr	r5, [pc, #28]	; (80037e8 <_read_r+0x20>)
 80037cc:	4604      	mov	r4, r0
 80037ce:	4608      	mov	r0, r1
 80037d0:	4611      	mov	r1, r2
 80037d2:	2200      	movs	r2, #0
 80037d4:	602a      	str	r2, [r5, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f7fd f9f2 	bl	8000bc0 <_read>
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	d102      	bne.n	80037e6 <_read_r+0x1e>
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	b103      	cbz	r3, 80037e6 <_read_r+0x1e>
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	bd38      	pop	{r3, r4, r5, pc}
 80037e8:	20000368 	.word	0x20000368

080037ec <_write_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4d07      	ldr	r5, [pc, #28]	; (800380c <_write_r+0x20>)
 80037f0:	4604      	mov	r4, r0
 80037f2:	4608      	mov	r0, r1
 80037f4:	4611      	mov	r1, r2
 80037f6:	2200      	movs	r2, #0
 80037f8:	602a      	str	r2, [r5, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	f7fd fabe 	bl	8000d7c <_write>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d102      	bne.n	800380a <_write_r+0x1e>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	b103      	cbz	r3, 800380a <_write_r+0x1e>
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	bd38      	pop	{r3, r4, r5, pc}
 800380c:	20000368 	.word	0x20000368

08003810 <__errno>:
 8003810:	4b01      	ldr	r3, [pc, #4]	; (8003818 <__errno+0x8>)
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000064 	.word	0x20000064

0800381c <__libc_init_array>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	4d0d      	ldr	r5, [pc, #52]	; (8003854 <__libc_init_array+0x38>)
 8003820:	4c0d      	ldr	r4, [pc, #52]	; (8003858 <__libc_init_array+0x3c>)
 8003822:	1b64      	subs	r4, r4, r5
 8003824:	10a4      	asrs	r4, r4, #2
 8003826:	2600      	movs	r6, #0
 8003828:	42a6      	cmp	r6, r4
 800382a:	d109      	bne.n	8003840 <__libc_init_array+0x24>
 800382c:	4d0b      	ldr	r5, [pc, #44]	; (800385c <__libc_init_array+0x40>)
 800382e:	4c0c      	ldr	r4, [pc, #48]	; (8003860 <__libc_init_array+0x44>)
 8003830:	f000 fdc0 	bl	80043b4 <_init>
 8003834:	1b64      	subs	r4, r4, r5
 8003836:	10a4      	asrs	r4, r4, #2
 8003838:	2600      	movs	r6, #0
 800383a:	42a6      	cmp	r6, r4
 800383c:	d105      	bne.n	800384a <__libc_init_array+0x2e>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	f855 3b04 	ldr.w	r3, [r5], #4
 8003844:	4798      	blx	r3
 8003846:	3601      	adds	r6, #1
 8003848:	e7ee      	b.n	8003828 <__libc_init_array+0xc>
 800384a:	f855 3b04 	ldr.w	r3, [r5], #4
 800384e:	4798      	blx	r3
 8003850:	3601      	adds	r6, #1
 8003852:	e7f2      	b.n	800383a <__libc_init_array+0x1e>
 8003854:	08004430 	.word	0x08004430
 8003858:	08004430 	.word	0x08004430
 800385c:	08004430 	.word	0x08004430
 8003860:	08004434 	.word	0x08004434

08003864 <__retarget_lock_init_recursive>:
 8003864:	4770      	bx	lr

08003866 <__retarget_lock_acquire_recursive>:
 8003866:	4770      	bx	lr

08003868 <__retarget_lock_release_recursive>:
 8003868:	4770      	bx	lr
	...

0800386c <_free_r>:
 800386c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800386e:	2900      	cmp	r1, #0
 8003870:	d044      	beq.n	80038fc <_free_r+0x90>
 8003872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003876:	9001      	str	r0, [sp, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f1a1 0404 	sub.w	r4, r1, #4
 800387e:	bfb8      	it	lt
 8003880:	18e4      	addlt	r4, r4, r3
 8003882:	f000 f8df 	bl	8003a44 <__malloc_lock>
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <_free_r+0x94>)
 8003888:	9801      	ldr	r0, [sp, #4]
 800388a:	6813      	ldr	r3, [r2, #0]
 800388c:	b933      	cbnz	r3, 800389c <_free_r+0x30>
 800388e:	6063      	str	r3, [r4, #4]
 8003890:	6014      	str	r4, [r2, #0]
 8003892:	b003      	add	sp, #12
 8003894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003898:	f000 b8da 	b.w	8003a50 <__malloc_unlock>
 800389c:	42a3      	cmp	r3, r4
 800389e:	d908      	bls.n	80038b2 <_free_r+0x46>
 80038a0:	6825      	ldr	r5, [r4, #0]
 80038a2:	1961      	adds	r1, r4, r5
 80038a4:	428b      	cmp	r3, r1
 80038a6:	bf01      	itttt	eq
 80038a8:	6819      	ldreq	r1, [r3, #0]
 80038aa:	685b      	ldreq	r3, [r3, #4]
 80038ac:	1949      	addeq	r1, r1, r5
 80038ae:	6021      	streq	r1, [r4, #0]
 80038b0:	e7ed      	b.n	800388e <_free_r+0x22>
 80038b2:	461a      	mov	r2, r3
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	b10b      	cbz	r3, 80038bc <_free_r+0x50>
 80038b8:	42a3      	cmp	r3, r4
 80038ba:	d9fa      	bls.n	80038b2 <_free_r+0x46>
 80038bc:	6811      	ldr	r1, [r2, #0]
 80038be:	1855      	adds	r5, r2, r1
 80038c0:	42a5      	cmp	r5, r4
 80038c2:	d10b      	bne.n	80038dc <_free_r+0x70>
 80038c4:	6824      	ldr	r4, [r4, #0]
 80038c6:	4421      	add	r1, r4
 80038c8:	1854      	adds	r4, r2, r1
 80038ca:	42a3      	cmp	r3, r4
 80038cc:	6011      	str	r1, [r2, #0]
 80038ce:	d1e0      	bne.n	8003892 <_free_r+0x26>
 80038d0:	681c      	ldr	r4, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	6053      	str	r3, [r2, #4]
 80038d6:	440c      	add	r4, r1
 80038d8:	6014      	str	r4, [r2, #0]
 80038da:	e7da      	b.n	8003892 <_free_r+0x26>
 80038dc:	d902      	bls.n	80038e4 <_free_r+0x78>
 80038de:	230c      	movs	r3, #12
 80038e0:	6003      	str	r3, [r0, #0]
 80038e2:	e7d6      	b.n	8003892 <_free_r+0x26>
 80038e4:	6825      	ldr	r5, [r4, #0]
 80038e6:	1961      	adds	r1, r4, r5
 80038e8:	428b      	cmp	r3, r1
 80038ea:	bf04      	itt	eq
 80038ec:	6819      	ldreq	r1, [r3, #0]
 80038ee:	685b      	ldreq	r3, [r3, #4]
 80038f0:	6063      	str	r3, [r4, #4]
 80038f2:	bf04      	itt	eq
 80038f4:	1949      	addeq	r1, r1, r5
 80038f6:	6021      	streq	r1, [r4, #0]
 80038f8:	6054      	str	r4, [r2, #4]
 80038fa:	e7ca      	b.n	8003892 <_free_r+0x26>
 80038fc:	b003      	add	sp, #12
 80038fe:	bd30      	pop	{r4, r5, pc}
 8003900:	20000370 	.word	0x20000370

08003904 <sbrk_aligned>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4e0e      	ldr	r6, [pc, #56]	; (8003940 <sbrk_aligned+0x3c>)
 8003908:	460c      	mov	r4, r1
 800390a:	6831      	ldr	r1, [r6, #0]
 800390c:	4605      	mov	r5, r0
 800390e:	b911      	cbnz	r1, 8003916 <sbrk_aligned+0x12>
 8003910:	f000 fcbc 	bl	800428c <_sbrk_r>
 8003914:	6030      	str	r0, [r6, #0]
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f000 fcb7 	bl	800428c <_sbrk_r>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	d00a      	beq.n	8003938 <sbrk_aligned+0x34>
 8003922:	1cc4      	adds	r4, r0, #3
 8003924:	f024 0403 	bic.w	r4, r4, #3
 8003928:	42a0      	cmp	r0, r4
 800392a:	d007      	beq.n	800393c <sbrk_aligned+0x38>
 800392c:	1a21      	subs	r1, r4, r0
 800392e:	4628      	mov	r0, r5
 8003930:	f000 fcac 	bl	800428c <_sbrk_r>
 8003934:	3001      	adds	r0, #1
 8003936:	d101      	bne.n	800393c <sbrk_aligned+0x38>
 8003938:	f04f 34ff 	mov.w	r4, #4294967295
 800393c:	4620      	mov	r0, r4
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	20000374 	.word	0x20000374

08003944 <_malloc_r>:
 8003944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003948:	1ccd      	adds	r5, r1, #3
 800394a:	f025 0503 	bic.w	r5, r5, #3
 800394e:	3508      	adds	r5, #8
 8003950:	2d0c      	cmp	r5, #12
 8003952:	bf38      	it	cc
 8003954:	250c      	movcc	r5, #12
 8003956:	2d00      	cmp	r5, #0
 8003958:	4607      	mov	r7, r0
 800395a:	db01      	blt.n	8003960 <_malloc_r+0x1c>
 800395c:	42a9      	cmp	r1, r5
 800395e:	d905      	bls.n	800396c <_malloc_r+0x28>
 8003960:	230c      	movs	r3, #12
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	2600      	movs	r6, #0
 8003966:	4630      	mov	r0, r6
 8003968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800396c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a40 <_malloc_r+0xfc>
 8003970:	f000 f868 	bl	8003a44 <__malloc_lock>
 8003974:	f8d8 3000 	ldr.w	r3, [r8]
 8003978:	461c      	mov	r4, r3
 800397a:	bb5c      	cbnz	r4, 80039d4 <_malloc_r+0x90>
 800397c:	4629      	mov	r1, r5
 800397e:	4638      	mov	r0, r7
 8003980:	f7ff ffc0 	bl	8003904 <sbrk_aligned>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	4604      	mov	r4, r0
 8003988:	d155      	bne.n	8003a36 <_malloc_r+0xf2>
 800398a:	f8d8 4000 	ldr.w	r4, [r8]
 800398e:	4626      	mov	r6, r4
 8003990:	2e00      	cmp	r6, #0
 8003992:	d145      	bne.n	8003a20 <_malloc_r+0xdc>
 8003994:	2c00      	cmp	r4, #0
 8003996:	d048      	beq.n	8003a2a <_malloc_r+0xe6>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	4631      	mov	r1, r6
 800399c:	4638      	mov	r0, r7
 800399e:	eb04 0903 	add.w	r9, r4, r3
 80039a2:	f000 fc73 	bl	800428c <_sbrk_r>
 80039a6:	4581      	cmp	r9, r0
 80039a8:	d13f      	bne.n	8003a2a <_malloc_r+0xe6>
 80039aa:	6821      	ldr	r1, [r4, #0]
 80039ac:	1a6d      	subs	r5, r5, r1
 80039ae:	4629      	mov	r1, r5
 80039b0:	4638      	mov	r0, r7
 80039b2:	f7ff ffa7 	bl	8003904 <sbrk_aligned>
 80039b6:	3001      	adds	r0, #1
 80039b8:	d037      	beq.n	8003a2a <_malloc_r+0xe6>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	442b      	add	r3, r5
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	f8d8 3000 	ldr.w	r3, [r8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d038      	beq.n	8003a3a <_malloc_r+0xf6>
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	42a2      	cmp	r2, r4
 80039cc:	d12b      	bne.n	8003a26 <_malloc_r+0xe2>
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	e00f      	b.n	80039f4 <_malloc_r+0xb0>
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	1b52      	subs	r2, r2, r5
 80039d8:	d41f      	bmi.n	8003a1a <_malloc_r+0xd6>
 80039da:	2a0b      	cmp	r2, #11
 80039dc:	d917      	bls.n	8003a0e <_malloc_r+0xca>
 80039de:	1961      	adds	r1, r4, r5
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	6025      	str	r5, [r4, #0]
 80039e4:	bf18      	it	ne
 80039e6:	6059      	strne	r1, [r3, #4]
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	bf08      	it	eq
 80039ec:	f8c8 1000 	streq.w	r1, [r8]
 80039f0:	5162      	str	r2, [r4, r5]
 80039f2:	604b      	str	r3, [r1, #4]
 80039f4:	4638      	mov	r0, r7
 80039f6:	f104 060b 	add.w	r6, r4, #11
 80039fa:	f000 f829 	bl	8003a50 <__malloc_unlock>
 80039fe:	f026 0607 	bic.w	r6, r6, #7
 8003a02:	1d23      	adds	r3, r4, #4
 8003a04:	1af2      	subs	r2, r6, r3
 8003a06:	d0ae      	beq.n	8003966 <_malloc_r+0x22>
 8003a08:	1b9b      	subs	r3, r3, r6
 8003a0a:	50a3      	str	r3, [r4, r2]
 8003a0c:	e7ab      	b.n	8003966 <_malloc_r+0x22>
 8003a0e:	42a3      	cmp	r3, r4
 8003a10:	6862      	ldr	r2, [r4, #4]
 8003a12:	d1dd      	bne.n	80039d0 <_malloc_r+0x8c>
 8003a14:	f8c8 2000 	str.w	r2, [r8]
 8003a18:	e7ec      	b.n	80039f4 <_malloc_r+0xb0>
 8003a1a:	4623      	mov	r3, r4
 8003a1c:	6864      	ldr	r4, [r4, #4]
 8003a1e:	e7ac      	b.n	800397a <_malloc_r+0x36>
 8003a20:	4634      	mov	r4, r6
 8003a22:	6876      	ldr	r6, [r6, #4]
 8003a24:	e7b4      	b.n	8003990 <_malloc_r+0x4c>
 8003a26:	4613      	mov	r3, r2
 8003a28:	e7cc      	b.n	80039c4 <_malloc_r+0x80>
 8003a2a:	230c      	movs	r3, #12
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f000 f80e 	bl	8003a50 <__malloc_unlock>
 8003a34:	e797      	b.n	8003966 <_malloc_r+0x22>
 8003a36:	6025      	str	r5, [r4, #0]
 8003a38:	e7dc      	b.n	80039f4 <_malloc_r+0xb0>
 8003a3a:	605b      	str	r3, [r3, #4]
 8003a3c:	deff      	udf	#255	; 0xff
 8003a3e:	bf00      	nop
 8003a40:	20000370 	.word	0x20000370

08003a44 <__malloc_lock>:
 8003a44:	4801      	ldr	r0, [pc, #4]	; (8003a4c <__malloc_lock+0x8>)
 8003a46:	f7ff bf0e 	b.w	8003866 <__retarget_lock_acquire_recursive>
 8003a4a:	bf00      	nop
 8003a4c:	2000036c 	.word	0x2000036c

08003a50 <__malloc_unlock>:
 8003a50:	4801      	ldr	r0, [pc, #4]	; (8003a58 <__malloc_unlock+0x8>)
 8003a52:	f7ff bf09 	b.w	8003868 <__retarget_lock_release_recursive>
 8003a56:	bf00      	nop
 8003a58:	2000036c 	.word	0x2000036c

08003a5c <__sfputc_r>:
 8003a5c:	6893      	ldr	r3, [r2, #8]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	b410      	push	{r4}
 8003a64:	6093      	str	r3, [r2, #8]
 8003a66:	da08      	bge.n	8003a7a <__sfputc_r+0x1e>
 8003a68:	6994      	ldr	r4, [r2, #24]
 8003a6a:	42a3      	cmp	r3, r4
 8003a6c:	db01      	blt.n	8003a72 <__sfputc_r+0x16>
 8003a6e:	290a      	cmp	r1, #10
 8003a70:	d103      	bne.n	8003a7a <__sfputc_r+0x1e>
 8003a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a76:	f000 bb73 	b.w	8004160 <__swbuf_r>
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	1c58      	adds	r0, r3, #1
 8003a7e:	6010      	str	r0, [r2, #0]
 8003a80:	7019      	strb	r1, [r3, #0]
 8003a82:	4608      	mov	r0, r1
 8003a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <__sfputs_r>:
 8003a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	460f      	mov	r7, r1
 8003a90:	4614      	mov	r4, r2
 8003a92:	18d5      	adds	r5, r2, r3
 8003a94:	42ac      	cmp	r4, r5
 8003a96:	d101      	bne.n	8003a9c <__sfputs_r+0x12>
 8003a98:	2000      	movs	r0, #0
 8003a9a:	e007      	b.n	8003aac <__sfputs_r+0x22>
 8003a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa0:	463a      	mov	r2, r7
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f7ff ffda 	bl	8003a5c <__sfputc_r>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d1f3      	bne.n	8003a94 <__sfputs_r+0xa>
 8003aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ab0 <_vfiprintf_r>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	460d      	mov	r5, r1
 8003ab6:	b09d      	sub	sp, #116	; 0x74
 8003ab8:	4614      	mov	r4, r2
 8003aba:	4698      	mov	r8, r3
 8003abc:	4606      	mov	r6, r0
 8003abe:	b118      	cbz	r0, 8003ac8 <_vfiprintf_r+0x18>
 8003ac0:	6a03      	ldr	r3, [r0, #32]
 8003ac2:	b90b      	cbnz	r3, 8003ac8 <_vfiprintf_r+0x18>
 8003ac4:	f7ff fdca 	bl	800365c <__sinit>
 8003ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003aca:	07d9      	lsls	r1, r3, #31
 8003acc:	d405      	bmi.n	8003ada <_vfiprintf_r+0x2a>
 8003ace:	89ab      	ldrh	r3, [r5, #12]
 8003ad0:	059a      	lsls	r2, r3, #22
 8003ad2:	d402      	bmi.n	8003ada <_vfiprintf_r+0x2a>
 8003ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ad6:	f7ff fec6 	bl	8003866 <__retarget_lock_acquire_recursive>
 8003ada:	89ab      	ldrh	r3, [r5, #12]
 8003adc:	071b      	lsls	r3, r3, #28
 8003ade:	d501      	bpl.n	8003ae4 <_vfiprintf_r+0x34>
 8003ae0:	692b      	ldr	r3, [r5, #16]
 8003ae2:	b99b      	cbnz	r3, 8003b0c <_vfiprintf_r+0x5c>
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f000 fb78 	bl	80041dc <__swsetup_r>
 8003aec:	b170      	cbz	r0, 8003b0c <_vfiprintf_r+0x5c>
 8003aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003af0:	07dc      	lsls	r4, r3, #31
 8003af2:	d504      	bpl.n	8003afe <_vfiprintf_r+0x4e>
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	b01d      	add	sp, #116	; 0x74
 8003afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003afe:	89ab      	ldrh	r3, [r5, #12]
 8003b00:	0598      	lsls	r0, r3, #22
 8003b02:	d4f7      	bmi.n	8003af4 <_vfiprintf_r+0x44>
 8003b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b06:	f7ff feaf 	bl	8003868 <__retarget_lock_release_recursive>
 8003b0a:	e7f3      	b.n	8003af4 <_vfiprintf_r+0x44>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b10:	2320      	movs	r3, #32
 8003b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b1a:	2330      	movs	r3, #48	; 0x30
 8003b1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003cd0 <_vfiprintf_r+0x220>
 8003b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b24:	f04f 0901 	mov.w	r9, #1
 8003b28:	4623      	mov	r3, r4
 8003b2a:	469a      	mov	sl, r3
 8003b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b30:	b10a      	cbz	r2, 8003b36 <_vfiprintf_r+0x86>
 8003b32:	2a25      	cmp	r2, #37	; 0x25
 8003b34:	d1f9      	bne.n	8003b2a <_vfiprintf_r+0x7a>
 8003b36:	ebba 0b04 	subs.w	fp, sl, r4
 8003b3a:	d00b      	beq.n	8003b54 <_vfiprintf_r+0xa4>
 8003b3c:	465b      	mov	r3, fp
 8003b3e:	4622      	mov	r2, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	4630      	mov	r0, r6
 8003b44:	f7ff ffa1 	bl	8003a8a <__sfputs_r>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	f000 80a9 	beq.w	8003ca0 <_vfiprintf_r+0x1f0>
 8003b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b50:	445a      	add	r2, fp
 8003b52:	9209      	str	r2, [sp, #36]	; 0x24
 8003b54:	f89a 3000 	ldrb.w	r3, [sl]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a1 	beq.w	8003ca0 <_vfiprintf_r+0x1f0>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b68:	f10a 0a01 	add.w	sl, sl, #1
 8003b6c:	9304      	str	r3, [sp, #16]
 8003b6e:	9307      	str	r3, [sp, #28]
 8003b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b74:	931a      	str	r3, [sp, #104]	; 0x68
 8003b76:	4654      	mov	r4, sl
 8003b78:	2205      	movs	r2, #5
 8003b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b7e:	4854      	ldr	r0, [pc, #336]	; (8003cd0 <_vfiprintf_r+0x220>)
 8003b80:	f7fc fb2e 	bl	80001e0 <memchr>
 8003b84:	9a04      	ldr	r2, [sp, #16]
 8003b86:	b9d8      	cbnz	r0, 8003bc0 <_vfiprintf_r+0x110>
 8003b88:	06d1      	lsls	r1, r2, #27
 8003b8a:	bf44      	itt	mi
 8003b8c:	2320      	movmi	r3, #32
 8003b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b92:	0713      	lsls	r3, r2, #28
 8003b94:	bf44      	itt	mi
 8003b96:	232b      	movmi	r3, #43	; 0x2b
 8003b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ba2:	d015      	beq.n	8003bd0 <_vfiprintf_r+0x120>
 8003ba4:	9a07      	ldr	r2, [sp, #28]
 8003ba6:	4654      	mov	r4, sl
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f04f 0c0a 	mov.w	ip, #10
 8003bae:	4621      	mov	r1, r4
 8003bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb4:	3b30      	subs	r3, #48	; 0x30
 8003bb6:	2b09      	cmp	r3, #9
 8003bb8:	d94d      	bls.n	8003c56 <_vfiprintf_r+0x1a6>
 8003bba:	b1b0      	cbz	r0, 8003bea <_vfiprintf_r+0x13a>
 8003bbc:	9207      	str	r2, [sp, #28]
 8003bbe:	e014      	b.n	8003bea <_vfiprintf_r+0x13a>
 8003bc0:	eba0 0308 	sub.w	r3, r0, r8
 8003bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	9304      	str	r3, [sp, #16]
 8003bcc:	46a2      	mov	sl, r4
 8003bce:	e7d2      	b.n	8003b76 <_vfiprintf_r+0xc6>
 8003bd0:	9b03      	ldr	r3, [sp, #12]
 8003bd2:	1d19      	adds	r1, r3, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	9103      	str	r1, [sp, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bfbb      	ittet	lt
 8003bdc:	425b      	neglt	r3, r3
 8003bde:	f042 0202 	orrlt.w	r2, r2, #2
 8003be2:	9307      	strge	r3, [sp, #28]
 8003be4:	9307      	strlt	r3, [sp, #28]
 8003be6:	bfb8      	it	lt
 8003be8:	9204      	strlt	r2, [sp, #16]
 8003bea:	7823      	ldrb	r3, [r4, #0]
 8003bec:	2b2e      	cmp	r3, #46	; 0x2e
 8003bee:	d10c      	bne.n	8003c0a <_vfiprintf_r+0x15a>
 8003bf0:	7863      	ldrb	r3, [r4, #1]
 8003bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf4:	d134      	bne.n	8003c60 <_vfiprintf_r+0x1b0>
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	1d1a      	adds	r2, r3, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	9203      	str	r2, [sp, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bfb8      	it	lt
 8003c02:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c06:	3402      	adds	r4, #2
 8003c08:	9305      	str	r3, [sp, #20]
 8003c0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003ce0 <_vfiprintf_r+0x230>
 8003c0e:	7821      	ldrb	r1, [r4, #0]
 8003c10:	2203      	movs	r2, #3
 8003c12:	4650      	mov	r0, sl
 8003c14:	f7fc fae4 	bl	80001e0 <memchr>
 8003c18:	b138      	cbz	r0, 8003c2a <_vfiprintf_r+0x17a>
 8003c1a:	9b04      	ldr	r3, [sp, #16]
 8003c1c:	eba0 000a 	sub.w	r0, r0, sl
 8003c20:	2240      	movs	r2, #64	; 0x40
 8003c22:	4082      	lsls	r2, r0
 8003c24:	4313      	orrs	r3, r2
 8003c26:	3401      	adds	r4, #1
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2e:	4829      	ldr	r0, [pc, #164]	; (8003cd4 <_vfiprintf_r+0x224>)
 8003c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c34:	2206      	movs	r2, #6
 8003c36:	f7fc fad3 	bl	80001e0 <memchr>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d03f      	beq.n	8003cbe <_vfiprintf_r+0x20e>
 8003c3e:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <_vfiprintf_r+0x228>)
 8003c40:	bb1b      	cbnz	r3, 8003c8a <_vfiprintf_r+0x1da>
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	3307      	adds	r3, #7
 8003c46:	f023 0307 	bic.w	r3, r3, #7
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	9303      	str	r3, [sp, #12]
 8003c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c50:	443b      	add	r3, r7
 8003c52:	9309      	str	r3, [sp, #36]	; 0x24
 8003c54:	e768      	b.n	8003b28 <_vfiprintf_r+0x78>
 8003c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	e7a6      	b.n	8003bae <_vfiprintf_r+0xfe>
 8003c60:	2300      	movs	r3, #0
 8003c62:	3401      	adds	r4, #1
 8003c64:	9305      	str	r3, [sp, #20]
 8003c66:	4619      	mov	r1, r3
 8003c68:	f04f 0c0a 	mov.w	ip, #10
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c72:	3a30      	subs	r2, #48	; 0x30
 8003c74:	2a09      	cmp	r2, #9
 8003c76:	d903      	bls.n	8003c80 <_vfiprintf_r+0x1d0>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0c6      	beq.n	8003c0a <_vfiprintf_r+0x15a>
 8003c7c:	9105      	str	r1, [sp, #20]
 8003c7e:	e7c4      	b.n	8003c0a <_vfiprintf_r+0x15a>
 8003c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c84:	4604      	mov	r4, r0
 8003c86:	2301      	movs	r3, #1
 8003c88:	e7f0      	b.n	8003c6c <_vfiprintf_r+0x1bc>
 8003c8a:	ab03      	add	r3, sp, #12
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	462a      	mov	r2, r5
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <_vfiprintf_r+0x22c>)
 8003c92:	a904      	add	r1, sp, #16
 8003c94:	4630      	mov	r0, r6
 8003c96:	f3af 8000 	nop.w
 8003c9a:	4607      	mov	r7, r0
 8003c9c:	1c78      	adds	r0, r7, #1
 8003c9e:	d1d6      	bne.n	8003c4e <_vfiprintf_r+0x19e>
 8003ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ca2:	07d9      	lsls	r1, r3, #31
 8003ca4:	d405      	bmi.n	8003cb2 <_vfiprintf_r+0x202>
 8003ca6:	89ab      	ldrh	r3, [r5, #12]
 8003ca8:	059a      	lsls	r2, r3, #22
 8003caa:	d402      	bmi.n	8003cb2 <_vfiprintf_r+0x202>
 8003cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cae:	f7ff fddb 	bl	8003868 <__retarget_lock_release_recursive>
 8003cb2:	89ab      	ldrh	r3, [r5, #12]
 8003cb4:	065b      	lsls	r3, r3, #25
 8003cb6:	f53f af1d 	bmi.w	8003af4 <_vfiprintf_r+0x44>
 8003cba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cbc:	e71c      	b.n	8003af8 <_vfiprintf_r+0x48>
 8003cbe:	ab03      	add	r3, sp, #12
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <_vfiprintf_r+0x22c>)
 8003cc6:	a904      	add	r1, sp, #16
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f000 f879 	bl	8003dc0 <_printf_i>
 8003cce:	e7e4      	b.n	8003c9a <_vfiprintf_r+0x1ea>
 8003cd0:	080043f4 	.word	0x080043f4
 8003cd4:	080043fe 	.word	0x080043fe
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	08003a8b 	.word	0x08003a8b
 8003ce0:	080043fa 	.word	0x080043fa

08003ce4 <_printf_common>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	4616      	mov	r6, r2
 8003cea:	4699      	mov	r9, r3
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bfb8      	it	lt
 8003cf8:	4613      	movlt	r3, r2
 8003cfa:	6033      	str	r3, [r6, #0]
 8003cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d00:	4607      	mov	r7, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	b10a      	cbz	r2, 8003d0a <_printf_common+0x26>
 8003d06:	3301      	adds	r3, #1
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	0699      	lsls	r1, r3, #26
 8003d0e:	bf42      	ittt	mi
 8003d10:	6833      	ldrmi	r3, [r6, #0]
 8003d12:	3302      	addmi	r3, #2
 8003d14:	6033      	strmi	r3, [r6, #0]
 8003d16:	6825      	ldr	r5, [r4, #0]
 8003d18:	f015 0506 	ands.w	r5, r5, #6
 8003d1c:	d106      	bne.n	8003d2c <_printf_common+0x48>
 8003d1e:	f104 0a19 	add.w	sl, r4, #25
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	6832      	ldr	r2, [r6, #0]
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	42ab      	cmp	r3, r5
 8003d2a:	dc26      	bgt.n	8003d7a <_printf_common+0x96>
 8003d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d30:	1e13      	subs	r3, r2, #0
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	bf18      	it	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	0692      	lsls	r2, r2, #26
 8003d3a:	d42b      	bmi.n	8003d94 <_printf_common+0xb0>
 8003d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d40:	4649      	mov	r1, r9
 8003d42:	4638      	mov	r0, r7
 8003d44:	47c0      	blx	r8
 8003d46:	3001      	adds	r0, #1
 8003d48:	d01e      	beq.n	8003d88 <_printf_common+0xa4>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	6922      	ldr	r2, [r4, #16]
 8003d4e:	f003 0306 	and.w	r3, r3, #6
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf02      	ittt	eq
 8003d56:	68e5      	ldreq	r5, [r4, #12]
 8003d58:	6833      	ldreq	r3, [r6, #0]
 8003d5a:	1aed      	subeq	r5, r5, r3
 8003d5c:	68a3      	ldr	r3, [r4, #8]
 8003d5e:	bf0c      	ite	eq
 8003d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d64:	2500      	movne	r5, #0
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bfc4      	itt	gt
 8003d6a:	1a9b      	subgt	r3, r3, r2
 8003d6c:	18ed      	addgt	r5, r5, r3
 8003d6e:	2600      	movs	r6, #0
 8003d70:	341a      	adds	r4, #26
 8003d72:	42b5      	cmp	r5, r6
 8003d74:	d11a      	bne.n	8003dac <_printf_common+0xc8>
 8003d76:	2000      	movs	r0, #0
 8003d78:	e008      	b.n	8003d8c <_printf_common+0xa8>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4652      	mov	r2, sl
 8003d7e:	4649      	mov	r1, r9
 8003d80:	4638      	mov	r0, r7
 8003d82:	47c0      	blx	r8
 8003d84:	3001      	adds	r0, #1
 8003d86:	d103      	bne.n	8003d90 <_printf_common+0xac>
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d90:	3501      	adds	r5, #1
 8003d92:	e7c6      	b.n	8003d22 <_printf_common+0x3e>
 8003d94:	18e1      	adds	r1, r4, r3
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	2030      	movs	r0, #48	; 0x30
 8003d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d9e:	4422      	add	r2, r4
 8003da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003da8:	3302      	adds	r3, #2
 8003daa:	e7c7      	b.n	8003d3c <_printf_common+0x58>
 8003dac:	2301      	movs	r3, #1
 8003dae:	4622      	mov	r2, r4
 8003db0:	4649      	mov	r1, r9
 8003db2:	4638      	mov	r0, r7
 8003db4:	47c0      	blx	r8
 8003db6:	3001      	adds	r0, #1
 8003db8:	d0e6      	beq.n	8003d88 <_printf_common+0xa4>
 8003dba:	3601      	adds	r6, #1
 8003dbc:	e7d9      	b.n	8003d72 <_printf_common+0x8e>
	...

08003dc0 <_printf_i>:
 8003dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	7e0f      	ldrb	r7, [r1, #24]
 8003dc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dc8:	2f78      	cmp	r7, #120	; 0x78
 8003dca:	4691      	mov	r9, r2
 8003dcc:	4680      	mov	r8, r0
 8003dce:	460c      	mov	r4, r1
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dd6:	d807      	bhi.n	8003de8 <_printf_i+0x28>
 8003dd8:	2f62      	cmp	r7, #98	; 0x62
 8003dda:	d80a      	bhi.n	8003df2 <_printf_i+0x32>
 8003ddc:	2f00      	cmp	r7, #0
 8003dde:	f000 80d4 	beq.w	8003f8a <_printf_i+0x1ca>
 8003de2:	2f58      	cmp	r7, #88	; 0x58
 8003de4:	f000 80c0 	beq.w	8003f68 <_printf_i+0x1a8>
 8003de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003df0:	e03a      	b.n	8003e68 <_printf_i+0xa8>
 8003df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003df6:	2b15      	cmp	r3, #21
 8003df8:	d8f6      	bhi.n	8003de8 <_printf_i+0x28>
 8003dfa:	a101      	add	r1, pc, #4	; (adr r1, 8003e00 <_printf_i+0x40>)
 8003dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e00:	08003e59 	.word	0x08003e59
 8003e04:	08003e6d 	.word	0x08003e6d
 8003e08:	08003de9 	.word	0x08003de9
 8003e0c:	08003de9 	.word	0x08003de9
 8003e10:	08003de9 	.word	0x08003de9
 8003e14:	08003de9 	.word	0x08003de9
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003de9 	.word	0x08003de9
 8003e20:	08003de9 	.word	0x08003de9
 8003e24:	08003de9 	.word	0x08003de9
 8003e28:	08003de9 	.word	0x08003de9
 8003e2c:	08003f71 	.word	0x08003f71
 8003e30:	08003e99 	.word	0x08003e99
 8003e34:	08003f2b 	.word	0x08003f2b
 8003e38:	08003de9 	.word	0x08003de9
 8003e3c:	08003de9 	.word	0x08003de9
 8003e40:	08003f93 	.word	0x08003f93
 8003e44:	08003de9 	.word	0x08003de9
 8003e48:	08003e99 	.word	0x08003e99
 8003e4c:	08003de9 	.word	0x08003de9
 8003e50:	08003de9 	.word	0x08003de9
 8003e54:	08003f33 	.word	0x08003f33
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	602a      	str	r2, [r5, #0]
 8003e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e09f      	b.n	8003fac <_printf_i+0x1ec>
 8003e6c:	6820      	ldr	r0, [r4, #0]
 8003e6e:	682b      	ldr	r3, [r5, #0]
 8003e70:	0607      	lsls	r7, r0, #24
 8003e72:	f103 0104 	add.w	r1, r3, #4
 8003e76:	6029      	str	r1, [r5, #0]
 8003e78:	d501      	bpl.n	8003e7e <_printf_i+0xbe>
 8003e7a:	681e      	ldr	r6, [r3, #0]
 8003e7c:	e003      	b.n	8003e86 <_printf_i+0xc6>
 8003e7e:	0646      	lsls	r6, r0, #25
 8003e80:	d5fb      	bpl.n	8003e7a <_printf_i+0xba>
 8003e82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e86:	2e00      	cmp	r6, #0
 8003e88:	da03      	bge.n	8003e92 <_printf_i+0xd2>
 8003e8a:	232d      	movs	r3, #45	; 0x2d
 8003e8c:	4276      	negs	r6, r6
 8003e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e92:	485a      	ldr	r0, [pc, #360]	; (8003ffc <_printf_i+0x23c>)
 8003e94:	230a      	movs	r3, #10
 8003e96:	e012      	b.n	8003ebe <_printf_i+0xfe>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	1d19      	adds	r1, r3, #4
 8003e9e:	6029      	str	r1, [r5, #0]
 8003ea0:	0605      	lsls	r5, r0, #24
 8003ea2:	d501      	bpl.n	8003ea8 <_printf_i+0xe8>
 8003ea4:	681e      	ldr	r6, [r3, #0]
 8003ea6:	e002      	b.n	8003eae <_printf_i+0xee>
 8003ea8:	0641      	lsls	r1, r0, #25
 8003eaa:	d5fb      	bpl.n	8003ea4 <_printf_i+0xe4>
 8003eac:	881e      	ldrh	r6, [r3, #0]
 8003eae:	4853      	ldr	r0, [pc, #332]	; (8003ffc <_printf_i+0x23c>)
 8003eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2308      	moveq	r3, #8
 8003eb6:	230a      	movne	r3, #10
 8003eb8:	2100      	movs	r1, #0
 8003eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ebe:	6865      	ldr	r5, [r4, #4]
 8003ec0:	60a5      	str	r5, [r4, #8]
 8003ec2:	2d00      	cmp	r5, #0
 8003ec4:	bfa2      	ittt	ge
 8003ec6:	6821      	ldrge	r1, [r4, #0]
 8003ec8:	f021 0104 	bicge.w	r1, r1, #4
 8003ecc:	6021      	strge	r1, [r4, #0]
 8003ece:	b90e      	cbnz	r6, 8003ed4 <_printf_i+0x114>
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	d04b      	beq.n	8003f6c <_printf_i+0x1ac>
 8003ed4:	4615      	mov	r5, r2
 8003ed6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003eda:	fb03 6711 	mls	r7, r3, r1, r6
 8003ede:	5dc7      	ldrb	r7, [r0, r7]
 8003ee0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ee4:	4637      	mov	r7, r6
 8003ee6:	42bb      	cmp	r3, r7
 8003ee8:	460e      	mov	r6, r1
 8003eea:	d9f4      	bls.n	8003ed6 <_printf_i+0x116>
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d10b      	bne.n	8003f08 <_printf_i+0x148>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	07de      	lsls	r6, r3, #31
 8003ef4:	d508      	bpl.n	8003f08 <_printf_i+0x148>
 8003ef6:	6923      	ldr	r3, [r4, #16]
 8003ef8:	6861      	ldr	r1, [r4, #4]
 8003efa:	4299      	cmp	r1, r3
 8003efc:	bfde      	ittt	le
 8003efe:	2330      	movle	r3, #48	; 0x30
 8003f00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f08:	1b52      	subs	r2, r2, r5
 8003f0a:	6122      	str	r2, [r4, #16]
 8003f0c:	f8cd a000 	str.w	sl, [sp]
 8003f10:	464b      	mov	r3, r9
 8003f12:	aa03      	add	r2, sp, #12
 8003f14:	4621      	mov	r1, r4
 8003f16:	4640      	mov	r0, r8
 8003f18:	f7ff fee4 	bl	8003ce4 <_printf_common>
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	d14a      	bne.n	8003fb6 <_printf_i+0x1f6>
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	b004      	add	sp, #16
 8003f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	f043 0320 	orr.w	r3, r3, #32
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	4833      	ldr	r0, [pc, #204]	; (8004000 <_printf_i+0x240>)
 8003f34:	2778      	movs	r7, #120	; 0x78
 8003f36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	6829      	ldr	r1, [r5, #0]
 8003f3e:	061f      	lsls	r7, r3, #24
 8003f40:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f44:	d402      	bmi.n	8003f4c <_printf_i+0x18c>
 8003f46:	065f      	lsls	r7, r3, #25
 8003f48:	bf48      	it	mi
 8003f4a:	b2b6      	uxthmi	r6, r6
 8003f4c:	07df      	lsls	r7, r3, #31
 8003f4e:	bf48      	it	mi
 8003f50:	f043 0320 	orrmi.w	r3, r3, #32
 8003f54:	6029      	str	r1, [r5, #0]
 8003f56:	bf48      	it	mi
 8003f58:	6023      	strmi	r3, [r4, #0]
 8003f5a:	b91e      	cbnz	r6, 8003f64 <_printf_i+0x1a4>
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	f023 0320 	bic.w	r3, r3, #32
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	2310      	movs	r3, #16
 8003f66:	e7a7      	b.n	8003eb8 <_printf_i+0xf8>
 8003f68:	4824      	ldr	r0, [pc, #144]	; (8003ffc <_printf_i+0x23c>)
 8003f6a:	e7e4      	b.n	8003f36 <_printf_i+0x176>
 8003f6c:	4615      	mov	r5, r2
 8003f6e:	e7bd      	b.n	8003eec <_printf_i+0x12c>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	6826      	ldr	r6, [r4, #0]
 8003f74:	6961      	ldr	r1, [r4, #20]
 8003f76:	1d18      	adds	r0, r3, #4
 8003f78:	6028      	str	r0, [r5, #0]
 8003f7a:	0635      	lsls	r5, r6, #24
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	d501      	bpl.n	8003f84 <_printf_i+0x1c4>
 8003f80:	6019      	str	r1, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <_printf_i+0x1ca>
 8003f84:	0670      	lsls	r0, r6, #25
 8003f86:	d5fb      	bpl.n	8003f80 <_printf_i+0x1c0>
 8003f88:	8019      	strh	r1, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	6123      	str	r3, [r4, #16]
 8003f8e:	4615      	mov	r5, r2
 8003f90:	e7bc      	b.n	8003f0c <_printf_i+0x14c>
 8003f92:	682b      	ldr	r3, [r5, #0]
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	602a      	str	r2, [r5, #0]
 8003f98:	681d      	ldr	r5, [r3, #0]
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f7fc f91e 	bl	80001e0 <memchr>
 8003fa4:	b108      	cbz	r0, 8003faa <_printf_i+0x1ea>
 8003fa6:	1b40      	subs	r0, r0, r5
 8003fa8:	6060      	str	r0, [r4, #4]
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	6123      	str	r3, [r4, #16]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb4:	e7aa      	b.n	8003f0c <_printf_i+0x14c>
 8003fb6:	6923      	ldr	r3, [r4, #16]
 8003fb8:	462a      	mov	r2, r5
 8003fba:	4649      	mov	r1, r9
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	47d0      	blx	sl
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d0ad      	beq.n	8003f20 <_printf_i+0x160>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	079b      	lsls	r3, r3, #30
 8003fc8:	d413      	bmi.n	8003ff2 <_printf_i+0x232>
 8003fca:	68e0      	ldr	r0, [r4, #12]
 8003fcc:	9b03      	ldr	r3, [sp, #12]
 8003fce:	4298      	cmp	r0, r3
 8003fd0:	bfb8      	it	lt
 8003fd2:	4618      	movlt	r0, r3
 8003fd4:	e7a6      	b.n	8003f24 <_printf_i+0x164>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4632      	mov	r2, r6
 8003fda:	4649      	mov	r1, r9
 8003fdc:	4640      	mov	r0, r8
 8003fde:	47d0      	blx	sl
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d09d      	beq.n	8003f20 <_printf_i+0x160>
 8003fe4:	3501      	adds	r5, #1
 8003fe6:	68e3      	ldr	r3, [r4, #12]
 8003fe8:	9903      	ldr	r1, [sp, #12]
 8003fea:	1a5b      	subs	r3, r3, r1
 8003fec:	42ab      	cmp	r3, r5
 8003fee:	dcf2      	bgt.n	8003fd6 <_printf_i+0x216>
 8003ff0:	e7eb      	b.n	8003fca <_printf_i+0x20a>
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	f104 0619 	add.w	r6, r4, #25
 8003ff8:	e7f5      	b.n	8003fe6 <_printf_i+0x226>
 8003ffa:	bf00      	nop
 8003ffc:	08004405 	.word	0x08004405
 8004000:	08004416 	.word	0x08004416

08004004 <__sflush_r>:
 8004004:	898a      	ldrh	r2, [r1, #12]
 8004006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400a:	4605      	mov	r5, r0
 800400c:	0710      	lsls	r0, r2, #28
 800400e:	460c      	mov	r4, r1
 8004010:	d458      	bmi.n	80040c4 <__sflush_r+0xc0>
 8004012:	684b      	ldr	r3, [r1, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	dc05      	bgt.n	8004024 <__sflush_r+0x20>
 8004018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	dc02      	bgt.n	8004024 <__sflush_r+0x20>
 800401e:	2000      	movs	r0, #0
 8004020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004026:	2e00      	cmp	r6, #0
 8004028:	d0f9      	beq.n	800401e <__sflush_r+0x1a>
 800402a:	2300      	movs	r3, #0
 800402c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004030:	682f      	ldr	r7, [r5, #0]
 8004032:	6a21      	ldr	r1, [r4, #32]
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	d032      	beq.n	800409e <__sflush_r+0x9a>
 8004038:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	075a      	lsls	r2, r3, #29
 800403e:	d505      	bpl.n	800404c <__sflush_r+0x48>
 8004040:	6863      	ldr	r3, [r4, #4]
 8004042:	1ac0      	subs	r0, r0, r3
 8004044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004046:	b10b      	cbz	r3, 800404c <__sflush_r+0x48>
 8004048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800404a:	1ac0      	subs	r0, r0, r3
 800404c:	2300      	movs	r3, #0
 800404e:	4602      	mov	r2, r0
 8004050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004052:	6a21      	ldr	r1, [r4, #32]
 8004054:	4628      	mov	r0, r5
 8004056:	47b0      	blx	r6
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	d106      	bne.n	800406c <__sflush_r+0x68>
 800405e:	6829      	ldr	r1, [r5, #0]
 8004060:	291d      	cmp	r1, #29
 8004062:	d82b      	bhi.n	80040bc <__sflush_r+0xb8>
 8004064:	4a29      	ldr	r2, [pc, #164]	; (800410c <__sflush_r+0x108>)
 8004066:	410a      	asrs	r2, r1
 8004068:	07d6      	lsls	r6, r2, #31
 800406a:	d427      	bmi.n	80040bc <__sflush_r+0xb8>
 800406c:	2200      	movs	r2, #0
 800406e:	6062      	str	r2, [r4, #4]
 8004070:	04d9      	lsls	r1, r3, #19
 8004072:	6922      	ldr	r2, [r4, #16]
 8004074:	6022      	str	r2, [r4, #0]
 8004076:	d504      	bpl.n	8004082 <__sflush_r+0x7e>
 8004078:	1c42      	adds	r2, r0, #1
 800407a:	d101      	bne.n	8004080 <__sflush_r+0x7c>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b903      	cbnz	r3, 8004082 <__sflush_r+0x7e>
 8004080:	6560      	str	r0, [r4, #84]	; 0x54
 8004082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004084:	602f      	str	r7, [r5, #0]
 8004086:	2900      	cmp	r1, #0
 8004088:	d0c9      	beq.n	800401e <__sflush_r+0x1a>
 800408a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800408e:	4299      	cmp	r1, r3
 8004090:	d002      	beq.n	8004098 <__sflush_r+0x94>
 8004092:	4628      	mov	r0, r5
 8004094:	f7ff fbea 	bl	800386c <_free_r>
 8004098:	2000      	movs	r0, #0
 800409a:	6360      	str	r0, [r4, #52]	; 0x34
 800409c:	e7c0      	b.n	8004020 <__sflush_r+0x1c>
 800409e:	2301      	movs	r3, #1
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b0      	blx	r6
 80040a4:	1c41      	adds	r1, r0, #1
 80040a6:	d1c8      	bne.n	800403a <__sflush_r+0x36>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0c5      	beq.n	800403a <__sflush_r+0x36>
 80040ae:	2b1d      	cmp	r3, #29
 80040b0:	d001      	beq.n	80040b6 <__sflush_r+0xb2>
 80040b2:	2b16      	cmp	r3, #22
 80040b4:	d101      	bne.n	80040ba <__sflush_r+0xb6>
 80040b6:	602f      	str	r7, [r5, #0]
 80040b8:	e7b1      	b.n	800401e <__sflush_r+0x1a>
 80040ba:	89a3      	ldrh	r3, [r4, #12]
 80040bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c0:	81a3      	strh	r3, [r4, #12]
 80040c2:	e7ad      	b.n	8004020 <__sflush_r+0x1c>
 80040c4:	690f      	ldr	r7, [r1, #16]
 80040c6:	2f00      	cmp	r7, #0
 80040c8:	d0a9      	beq.n	800401e <__sflush_r+0x1a>
 80040ca:	0793      	lsls	r3, r2, #30
 80040cc:	680e      	ldr	r6, [r1, #0]
 80040ce:	bf08      	it	eq
 80040d0:	694b      	ldreq	r3, [r1, #20]
 80040d2:	600f      	str	r7, [r1, #0]
 80040d4:	bf18      	it	ne
 80040d6:	2300      	movne	r3, #0
 80040d8:	eba6 0807 	sub.w	r8, r6, r7
 80040dc:	608b      	str	r3, [r1, #8]
 80040de:	f1b8 0f00 	cmp.w	r8, #0
 80040e2:	dd9c      	ble.n	800401e <__sflush_r+0x1a>
 80040e4:	6a21      	ldr	r1, [r4, #32]
 80040e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040e8:	4643      	mov	r3, r8
 80040ea:	463a      	mov	r2, r7
 80040ec:	4628      	mov	r0, r5
 80040ee:	47b0      	blx	r6
 80040f0:	2800      	cmp	r0, #0
 80040f2:	dc06      	bgt.n	8004102 <__sflush_r+0xfe>
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	e78e      	b.n	8004020 <__sflush_r+0x1c>
 8004102:	4407      	add	r7, r0
 8004104:	eba8 0800 	sub.w	r8, r8, r0
 8004108:	e7e9      	b.n	80040de <__sflush_r+0xda>
 800410a:	bf00      	nop
 800410c:	dfbffffe 	.word	0xdfbffffe

08004110 <_fflush_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	690b      	ldr	r3, [r1, #16]
 8004114:	4605      	mov	r5, r0
 8004116:	460c      	mov	r4, r1
 8004118:	b913      	cbnz	r3, 8004120 <_fflush_r+0x10>
 800411a:	2500      	movs	r5, #0
 800411c:	4628      	mov	r0, r5
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	b118      	cbz	r0, 800412a <_fflush_r+0x1a>
 8004122:	6a03      	ldr	r3, [r0, #32]
 8004124:	b90b      	cbnz	r3, 800412a <_fflush_r+0x1a>
 8004126:	f7ff fa99 	bl	800365c <__sinit>
 800412a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f3      	beq.n	800411a <_fflush_r+0xa>
 8004132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004134:	07d0      	lsls	r0, r2, #31
 8004136:	d404      	bmi.n	8004142 <_fflush_r+0x32>
 8004138:	0599      	lsls	r1, r3, #22
 800413a:	d402      	bmi.n	8004142 <_fflush_r+0x32>
 800413c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413e:	f7ff fb92 	bl	8003866 <__retarget_lock_acquire_recursive>
 8004142:	4628      	mov	r0, r5
 8004144:	4621      	mov	r1, r4
 8004146:	f7ff ff5d 	bl	8004004 <__sflush_r>
 800414a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800414c:	07da      	lsls	r2, r3, #31
 800414e:	4605      	mov	r5, r0
 8004150:	d4e4      	bmi.n	800411c <_fflush_r+0xc>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	059b      	lsls	r3, r3, #22
 8004156:	d4e1      	bmi.n	800411c <_fflush_r+0xc>
 8004158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800415a:	f7ff fb85 	bl	8003868 <__retarget_lock_release_recursive>
 800415e:	e7dd      	b.n	800411c <_fflush_r+0xc>

08004160 <__swbuf_r>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	460e      	mov	r6, r1
 8004164:	4614      	mov	r4, r2
 8004166:	4605      	mov	r5, r0
 8004168:	b118      	cbz	r0, 8004172 <__swbuf_r+0x12>
 800416a:	6a03      	ldr	r3, [r0, #32]
 800416c:	b90b      	cbnz	r3, 8004172 <__swbuf_r+0x12>
 800416e:	f7ff fa75 	bl	800365c <__sinit>
 8004172:	69a3      	ldr	r3, [r4, #24]
 8004174:	60a3      	str	r3, [r4, #8]
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	071a      	lsls	r2, r3, #28
 800417a:	d525      	bpl.n	80041c8 <__swbuf_r+0x68>
 800417c:	6923      	ldr	r3, [r4, #16]
 800417e:	b31b      	cbz	r3, 80041c8 <__swbuf_r+0x68>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	6922      	ldr	r2, [r4, #16]
 8004184:	1a98      	subs	r0, r3, r2
 8004186:	6963      	ldr	r3, [r4, #20]
 8004188:	b2f6      	uxtb	r6, r6
 800418a:	4283      	cmp	r3, r0
 800418c:	4637      	mov	r7, r6
 800418e:	dc04      	bgt.n	800419a <__swbuf_r+0x3a>
 8004190:	4621      	mov	r1, r4
 8004192:	4628      	mov	r0, r5
 8004194:	f7ff ffbc 	bl	8004110 <_fflush_r>
 8004198:	b9e0      	cbnz	r0, 80041d4 <__swbuf_r+0x74>
 800419a:	68a3      	ldr	r3, [r4, #8]
 800419c:	3b01      	subs	r3, #1
 800419e:	60a3      	str	r3, [r4, #8]
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	6022      	str	r2, [r4, #0]
 80041a6:	701e      	strb	r6, [r3, #0]
 80041a8:	6962      	ldr	r2, [r4, #20]
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d004      	beq.n	80041ba <__swbuf_r+0x5a>
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	07db      	lsls	r3, r3, #31
 80041b4:	d506      	bpl.n	80041c4 <__swbuf_r+0x64>
 80041b6:	2e0a      	cmp	r6, #10
 80041b8:	d104      	bne.n	80041c4 <__swbuf_r+0x64>
 80041ba:	4621      	mov	r1, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	f7ff ffa7 	bl	8004110 <_fflush_r>
 80041c2:	b938      	cbnz	r0, 80041d4 <__swbuf_r+0x74>
 80041c4:	4638      	mov	r0, r7
 80041c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c8:	4621      	mov	r1, r4
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 f806 	bl	80041dc <__swsetup_r>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d0d5      	beq.n	8004180 <__swbuf_r+0x20>
 80041d4:	f04f 37ff 	mov.w	r7, #4294967295
 80041d8:	e7f4      	b.n	80041c4 <__swbuf_r+0x64>
	...

080041dc <__swsetup_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <__swsetup_r+0xac>)
 80041e0:	4605      	mov	r5, r0
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	460c      	mov	r4, r1
 80041e6:	b118      	cbz	r0, 80041f0 <__swsetup_r+0x14>
 80041e8:	6a03      	ldr	r3, [r0, #32]
 80041ea:	b90b      	cbnz	r3, 80041f0 <__swsetup_r+0x14>
 80041ec:	f7ff fa36 	bl	800365c <__sinit>
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041f6:	0718      	lsls	r0, r3, #28
 80041f8:	d422      	bmi.n	8004240 <__swsetup_r+0x64>
 80041fa:	06d9      	lsls	r1, r3, #27
 80041fc:	d407      	bmi.n	800420e <__swsetup_r+0x32>
 80041fe:	2309      	movs	r3, #9
 8004200:	602b      	str	r3, [r5, #0]
 8004202:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004206:	81a3      	strh	r3, [r4, #12]
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	e034      	b.n	8004278 <__swsetup_r+0x9c>
 800420e:	0758      	lsls	r0, r3, #29
 8004210:	d512      	bpl.n	8004238 <__swsetup_r+0x5c>
 8004212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004214:	b141      	cbz	r1, 8004228 <__swsetup_r+0x4c>
 8004216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800421a:	4299      	cmp	r1, r3
 800421c:	d002      	beq.n	8004224 <__swsetup_r+0x48>
 800421e:	4628      	mov	r0, r5
 8004220:	f7ff fb24 	bl	800386c <_free_r>
 8004224:	2300      	movs	r3, #0
 8004226:	6363      	str	r3, [r4, #52]	; 0x34
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800422e:	81a3      	strh	r3, [r4, #12]
 8004230:	2300      	movs	r3, #0
 8004232:	6063      	str	r3, [r4, #4]
 8004234:	6923      	ldr	r3, [r4, #16]
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	f043 0308 	orr.w	r3, r3, #8
 800423e:	81a3      	strh	r3, [r4, #12]
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	b94b      	cbnz	r3, 8004258 <__swsetup_r+0x7c>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800424a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424e:	d003      	beq.n	8004258 <__swsetup_r+0x7c>
 8004250:	4621      	mov	r1, r4
 8004252:	4628      	mov	r0, r5
 8004254:	f000 f850 	bl	80042f8 <__smakebuf_r>
 8004258:	89a0      	ldrh	r0, [r4, #12]
 800425a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800425e:	f010 0301 	ands.w	r3, r0, #1
 8004262:	d00a      	beq.n	800427a <__swsetup_r+0x9e>
 8004264:	2300      	movs	r3, #0
 8004266:	60a3      	str	r3, [r4, #8]
 8004268:	6963      	ldr	r3, [r4, #20]
 800426a:	425b      	negs	r3, r3
 800426c:	61a3      	str	r3, [r4, #24]
 800426e:	6923      	ldr	r3, [r4, #16]
 8004270:	b943      	cbnz	r3, 8004284 <__swsetup_r+0xa8>
 8004272:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004276:	d1c4      	bne.n	8004202 <__swsetup_r+0x26>
 8004278:	bd38      	pop	{r3, r4, r5, pc}
 800427a:	0781      	lsls	r1, r0, #30
 800427c:	bf58      	it	pl
 800427e:	6963      	ldrpl	r3, [r4, #20]
 8004280:	60a3      	str	r3, [r4, #8]
 8004282:	e7f4      	b.n	800426e <__swsetup_r+0x92>
 8004284:	2000      	movs	r0, #0
 8004286:	e7f7      	b.n	8004278 <__swsetup_r+0x9c>
 8004288:	20000064 	.word	0x20000064

0800428c <_sbrk_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d06      	ldr	r5, [pc, #24]	; (80042a8 <_sbrk_r+0x1c>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fc fce4 	bl	8000c64 <_sbrk>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_sbrk_r+0x1a>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_sbrk_r+0x1a>
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	20000368 	.word	0x20000368

080042ac <__swhatbuf_r>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	460c      	mov	r4, r1
 80042b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b4:	2900      	cmp	r1, #0
 80042b6:	b096      	sub	sp, #88	; 0x58
 80042b8:	4615      	mov	r5, r2
 80042ba:	461e      	mov	r6, r3
 80042bc:	da0d      	bge.n	80042da <__swhatbuf_r+0x2e>
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	bf0c      	ite	eq
 80042ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80042ce:	2340      	movne	r3, #64	; 0x40
 80042d0:	2000      	movs	r0, #0
 80042d2:	6031      	str	r1, [r6, #0]
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	b016      	add	sp, #88	; 0x58
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
 80042da:	466a      	mov	r2, sp
 80042dc:	f000 f848 	bl	8004370 <_fstat_r>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	dbec      	blt.n	80042be <__swhatbuf_r+0x12>
 80042e4:	9901      	ldr	r1, [sp, #4]
 80042e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80042ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80042ee:	4259      	negs	r1, r3
 80042f0:	4159      	adcs	r1, r3
 80042f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042f6:	e7eb      	b.n	80042d0 <__swhatbuf_r+0x24>

080042f8 <__smakebuf_r>:
 80042f8:	898b      	ldrh	r3, [r1, #12]
 80042fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042fc:	079d      	lsls	r5, r3, #30
 80042fe:	4606      	mov	r6, r0
 8004300:	460c      	mov	r4, r1
 8004302:	d507      	bpl.n	8004314 <__smakebuf_r+0x1c>
 8004304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	6123      	str	r3, [r4, #16]
 800430c:	2301      	movs	r3, #1
 800430e:	6163      	str	r3, [r4, #20]
 8004310:	b002      	add	sp, #8
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	ab01      	add	r3, sp, #4
 8004316:	466a      	mov	r2, sp
 8004318:	f7ff ffc8 	bl	80042ac <__swhatbuf_r>
 800431c:	9900      	ldr	r1, [sp, #0]
 800431e:	4605      	mov	r5, r0
 8004320:	4630      	mov	r0, r6
 8004322:	f7ff fb0f 	bl	8003944 <_malloc_r>
 8004326:	b948      	cbnz	r0, 800433c <__smakebuf_r+0x44>
 8004328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800432c:	059a      	lsls	r2, r3, #22
 800432e:	d4ef      	bmi.n	8004310 <__smakebuf_r+0x18>
 8004330:	f023 0303 	bic.w	r3, r3, #3
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	e7e3      	b.n	8004304 <__smakebuf_r+0xc>
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	6020      	str	r0, [r4, #0]
 8004340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004344:	81a3      	strh	r3, [r4, #12]
 8004346:	9b00      	ldr	r3, [sp, #0]
 8004348:	6163      	str	r3, [r4, #20]
 800434a:	9b01      	ldr	r3, [sp, #4]
 800434c:	6120      	str	r0, [r4, #16]
 800434e:	b15b      	cbz	r3, 8004368 <__smakebuf_r+0x70>
 8004350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004354:	4630      	mov	r0, r6
 8004356:	f000 f81d 	bl	8004394 <_isatty_r>
 800435a:	b128      	cbz	r0, 8004368 <__smakebuf_r+0x70>
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	81a3      	strh	r3, [r4, #12]
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	431d      	orrs	r5, r3
 800436c:	81a5      	strh	r5, [r4, #12]
 800436e:	e7cf      	b.n	8004310 <__smakebuf_r+0x18>

08004370 <_fstat_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4d07      	ldr	r5, [pc, #28]	; (8004390 <_fstat_r+0x20>)
 8004374:	2300      	movs	r3, #0
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	f7fc fc48 	bl	8000c12 <_fstat>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	d102      	bne.n	800438c <_fstat_r+0x1c>
 8004386:	682b      	ldr	r3, [r5, #0]
 8004388:	b103      	cbz	r3, 800438c <_fstat_r+0x1c>
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	bd38      	pop	{r3, r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	20000368 	.word	0x20000368

08004394 <_isatty_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d06      	ldr	r5, [pc, #24]	; (80043b0 <_isatty_r+0x1c>)
 8004398:	2300      	movs	r3, #0
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f7fc fc47 	bl	8000c32 <_isatty>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_isatty_r+0x1a>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_isatty_r+0x1a>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000368 	.word	0x20000368

080043b4 <_init>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr

080043c0 <_fini>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr
