
ultrasonicRadar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005178  08005178  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005180  08005180  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  08005194  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005194  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d780  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eba  00000000  00000000  0002d7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  0002f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d5  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b02  00000000  00000000  00030d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5cd  00000000  00000000  0004681f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dec0  00000000  00000000  00054dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035d8  00000000  00000000  000e2cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e6284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005140 	.word	0x08005140

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005140 	.word	0x08005140

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b970 	b.w	8000cac <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	460d      	mov	r5, r1
 80009ec:	4604      	mov	r4, r0
 80009ee:	460f      	mov	r7, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14a      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4694      	mov	ip, r2
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0xe2>
 80009fa:	fab2 f382 	clz	r3, r2
 80009fe:	b143      	cbz	r3, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a04:	f1c3 0220 	rsb	r2, r3, #32
 8000a08:	409f      	lsls	r7, r3
 8000a0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	409c      	lsls	r4, r3
 8000a12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a16:	fa1f f58c 	uxth.w	r5, ip
 8000a1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a1e:	0c22      	lsrs	r2, r4, #16
 8000a20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a28:	fb01 f005 	mul.w	r0, r1, r5
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x62>
 8000a30:	eb1c 0202 	adds.w	r2, ip, r2
 8000a34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a38:	f080 811c 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	f240 8119 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a42:	3902      	subs	r1, #2
 8000a44:	4462      	add	r2, ip
 8000a46:	1a12      	subs	r2, r2, r0
 8000a48:	b2a4      	uxth	r4, r4
 8000a4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a56:	fb00 f505 	mul.w	r5, r0, r5
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x90>
 8000a5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a66:	f080 8107 	bcs.w	8000c78 <__udivmoddi4+0x294>
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	f240 8104 	bls.w	8000c78 <__udivmoddi4+0x294>
 8000a70:	4464      	add	r4, ip
 8000a72:	3802      	subs	r0, #2
 8000a74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a78:	1b64      	subs	r4, r4, r5
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b11e      	cbz	r6, 8000a86 <__udivmoddi4+0xa2>
 8000a7e:	40dc      	lsrs	r4, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	e9c6 4300 	strd	r4, r3, [r6]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0xbc>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80ed 	beq.w	8000c6e <__udivmoddi4+0x28a>
 8000a94:	2100      	movs	r1, #0
 8000a96:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa0:	fab3 f183 	clz	r1, r3
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d149      	bne.n	8000b3c <__udivmoddi4+0x158>
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	d302      	bcc.n	8000ab2 <__udivmoddi4+0xce>
 8000aac:	4282      	cmp	r2, r0
 8000aae:	f200 80f8 	bhi.w	8000ca2 <__udivmoddi4+0x2be>
 8000ab2:	1a84      	subs	r4, r0, r2
 8000ab4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4617      	mov	r7, r2
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	d0e2      	beq.n	8000a86 <__udivmoddi4+0xa2>
 8000ac0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac4:	e7df      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000ac6:	b902      	cbnz	r2, 8000aca <__udivmoddi4+0xe6>
 8000ac8:	deff      	udf	#255	; 0xff
 8000aca:	fab2 f382 	clz	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8090 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ae8:	0c22      	lsrs	r2, r4, #16
 8000aea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aee:	fb0e f005 	mul.w	r0, lr, r5
 8000af2:	4290      	cmp	r0, r2
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af6:	eb1c 0202 	adds.w	r2, ip, r2
 8000afa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4290      	cmp	r0, r2
 8000b02:	f200 80cb 	bhi.w	8000c9c <__udivmoddi4+0x2b8>
 8000b06:	4645      	mov	r5, r8
 8000b08:	1a12      	subs	r2, r2, r0
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b10:	fb07 2210 	mls	r2, r7, r0, r2
 8000b14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b18:	fb0e fe00 	mul.w	lr, lr, r0
 8000b1c:	45a6      	cmp	lr, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x14e>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x14c>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f200 80bb 	bhi.w	8000ca6 <__udivmoddi4+0x2c2>
 8000b30:	4610      	mov	r0, r2
 8000b32:	eba4 040e 	sub.w	r4, r4, lr
 8000b36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3a:	e79f      	b.n	8000a7c <__udivmoddi4+0x98>
 8000b3c:	f1c1 0720 	rsb	r7, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b52:	40fd      	lsrs	r5, r7
 8000b54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b5e:	fa1f fe8c 	uxth.w	lr, ip
 8000b62:	fb09 5518 	mls	r5, r9, r8, r5
 8000b66:	0c1c      	lsrs	r4, r3, #16
 8000b68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	fa02 f201 	lsl.w	r2, r2, r1
 8000b76:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b84:	f080 8088 	bcs.w	8000c98 <__udivmoddi4+0x2b4>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	f240 8085 	bls.w	8000c98 <__udivmoddi4+0x2b4>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	4464      	add	r4, ip
 8000b94:	1b64      	subs	r4, r4, r5
 8000b96:	b29d      	uxth	r5, r3
 8000b98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bb4:	d26c      	bcs.n	8000c90 <__udivmoddi4+0x2ac>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	d96a      	bls.n	8000c90 <__udivmoddi4+0x2ac>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	4464      	add	r4, ip
 8000bbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bc6:	eba4 040e 	sub.w	r4, r4, lr
 8000bca:	42ac      	cmp	r4, r5
 8000bcc:	46c8      	mov	r8, r9
 8000bce:	46ae      	mov	lr, r5
 8000bd0:	d356      	bcc.n	8000c80 <__udivmoddi4+0x29c>
 8000bd2:	d053      	beq.n	8000c7c <__udivmoddi4+0x298>
 8000bd4:	b156      	cbz	r6, 8000bec <__udivmoddi4+0x208>
 8000bd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bda:	eb64 040e 	sbc.w	r4, r4, lr
 8000bde:	fa04 f707 	lsl.w	r7, r4, r7
 8000be2:	40ca      	lsrs	r2, r1
 8000be4:	40cc      	lsrs	r4, r1
 8000be6:	4317      	orrs	r7, r2
 8000be8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	f1c3 0120 	rsb	r1, r3, #32
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000c00:	fa25 f101 	lsr.w	r1, r5, r1
 8000c04:	409d      	lsls	r5, r3
 8000c06:	432a      	orrs	r2, r5
 8000c08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1510 	mls	r5, r7, r0, r1
 8000c18:	0c11      	lsrs	r1, r2, #16
 8000c1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c22:	428d      	cmp	r5, r1
 8000c24:	fa04 f403 	lsl.w	r4, r4, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x258>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c32:	d22f      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c34:	428d      	cmp	r5, r1
 8000c36:	d92d      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1b49      	subs	r1, r1, r5
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c44:	fb07 1115 	mls	r1, r7, r5, r1
 8000c48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c50:	4291      	cmp	r1, r2
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x282>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c5c:	d216      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000c5e:	4291      	cmp	r1, r2
 8000c60:	d914      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000c62:	3d02      	subs	r5, #2
 8000c64:	4462      	add	r2, ip
 8000c66:	1a52      	subs	r2, r2, r1
 8000c68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c6c:	e738      	b.n	8000ae0 <__udivmoddi4+0xfc>
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4630      	mov	r0, r6
 8000c72:	e708      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000c74:	4639      	mov	r1, r7
 8000c76:	e6e6      	b.n	8000a46 <__udivmoddi4+0x62>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	e6fb      	b.n	8000a74 <__udivmoddi4+0x90>
 8000c7c:	4548      	cmp	r0, r9
 8000c7e:	d2a9      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c80:	ebb9 0802 	subs.w	r8, r9, r2
 8000c84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	e7a3      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8c:	4645      	mov	r5, r8
 8000c8e:	e7ea      	b.n	8000c66 <__udivmoddi4+0x282>
 8000c90:	462b      	mov	r3, r5
 8000c92:	e794      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c94:	4640      	mov	r0, r8
 8000c96:	e7d1      	b.n	8000c3c <__udivmoddi4+0x258>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	e77b      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9c:	3d02      	subs	r5, #2
 8000c9e:	4462      	add	r2, ip
 8000ca0:	e732      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e70a      	b.n	8000abc <__udivmoddi4+0xd8>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	e742      	b.n	8000b32 <__udivmoddi4+0x14e>

08000cac <__aeabi_idiv0>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	69b9      	ldr	r1, [r7, #24]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	fb03 f202 	mul.w	r2, r3, r2
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	4413      	add	r3, r2
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <delay_us>:
uint32_t 	IC_Val2 = 0;
uint32_t 	Difference = 0;
uint8_t 	IsFirstCaptured = 0;
uint8_t 	Distance = 0;

void delay_us(uint16_t time) {
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	htim11.Instance->CNT = 0;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <delay_us+0x30>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim11.Instance->CNT < time);
 8000cfa:	bf00      	nop
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <delay_us+0x30>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3f9      	bcc.n	8000cfc <delay_us+0x14>
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000b8 	.word	0x200000b8
 8000d1c:	00000000 	.word	0x00000000

08000d20 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7f1b      	ldrb	r3, [r3, #28]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	f040 8083 	bne.w	8000e38 <HAL_TIM_IC_CaptureCallback+0x118>
		if(IsFirstCaptured == 0) {
 8000d32:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d11a      	bne.n	8000d70 <HAL_TIM_IC_CaptureCallback+0x50>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 fc29 	bl	8003594 <HAL_TIM_ReadCapturedValue>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a41      	ldr	r2, [pc, #260]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d46:	6013      	str	r3, [r2, #0]
			IsFirstCaptured = 1;
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a1a      	ldr	r2, [r3, #32]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 020a 	bic.w	r2, r2, #10
 8000d5c:	621a      	str	r2, [r3, #32]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a1a      	ldr	r2, [r3, #32]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 0202 	orr.w	r2, r2, #2
 8000d6c:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}
	}
}
 8000d6e:	e063      	b.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x118>
		else if(IsFirstCaptured == 1) {
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d15f      	bne.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f002 fc0a 	bl	8003594 <HAL_TIM_ReadCapturedValue>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a33      	ldr	r2, [pc, #204]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d84:	6013      	str	r3, [r2, #0]
			htim->Instance->CNT = 0;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
			if(IC_Val2 > IC_Val1) {
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d907      	bls.n	8000daa <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e00f      	b.n	8000dca <HAL_TIM_IC_CaptureCallback+0xaa>
			else if(IC_Val2 < IC_Val1) {
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d209      	bcs.n	8000dca <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000dc4:	33ff      	adds	r3, #255	; 0xff
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dc8:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034 / 2;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fb44 	bl	800045c <__aeabi_ui2d>
 8000dd4:	a31a      	add	r3, pc, #104	; (adr r3, 8000e40 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dda:	f7ff fbb9 	bl	8000550 <__aeabi_dmul>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dee:	f7ff fcd9 	bl	80007a4 <__aeabi_ddiv>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fdbb 	bl	8000974 <__aeabi_d2uiz>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e04:	701a      	strb	r2, [r3, #0]
			IsFirstCaptured = 0;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a1a      	ldr	r2, [r3, #32]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 020a 	bic.w	r2, r2, #10
 8000e1a:	621a      	str	r2, [r3, #32]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6a12      	ldr	r2, [r2, #32]
 8000e26:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0202 	bic.w	r2, r2, #2
 8000e36:	60da      	str	r2, [r3, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	b020c49c 	.word	0xb020c49c
 8000e44:	3fa16872 	.word	0x3fa16872
 8000e48:	20000154 	.word	0x20000154
 8000e4c:	20000148 	.word	0x20000148
 8000e50:	2000014c 	.word	0x2000014c
 8000e54:	20000150 	.word	0x20000150
 8000e58:	20000155 	.word	0x20000155

08000e5c <getDistance>:

uint32_t getDistance() {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <getDistance+0x3c>)
 8000e66:	f001 f8e5 	bl	8002034 <HAL_GPIO_WritePin>
	delay_us(10);
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f7ff ff3c 	bl	8000ce8 <delay_us>
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	4808      	ldr	r0, [pc, #32]	; (8000e98 <getDistance+0x3c>)
 8000e76:	f001 f8dd 	bl	8002034 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <getDistance+0x40>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <getDistance+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0202 	orr.w	r2, r2, #2
 8000e88:	60da      	str	r2, [r3, #12]
	delay_us(100);
 8000e8a:	2064      	movs	r0, #100	; 0x64
 8000e8c:	f7ff ff2c 	bl	8000ce8 <delay_us>
	return Distance;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <getDistance+0x44>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	20000070 	.word	0x20000070
 8000ea0:	20000155 	.word	0x20000155

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eaa:	f000 fd29 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eae:	f000 f84d 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb2:	f000 fa13 	bl	80012dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000eb6:	f000 f8b1 	bl	800101c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000eba:	f000 f951 	bl	8001160 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000ebe:	f000 f9bf 	bl	8001240 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f9e1 	bl	8001288 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 8000ec6:	481d      	ldr	r0, [pc, #116]	; (8000f3c <main+0x98>)
 8000ec8:	f000 fbbe 	bl	8001648 <initUart>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	481c      	ldr	r0, [pc, #112]	; (8000f40 <main+0x9c>)
 8000ed0:	f001 fe26 	bl	8002b20 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	481b      	ldr	r0, [pc, #108]	; (8000f44 <main+0xa0>)
 8000ed8:	f001 ff2c 	bl	8002d34 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim11);
 8000edc:	481a      	ldr	r0, [pc, #104]	; (8000f48 <main+0xa4>)
 8000ede:	f001 fd6b 	bl	80029b8 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  protocol_t txData, rxData;
	  rxData = receivePacket();
 8000ee2:	f000 fc73 	bl	80017cc <receivePacket>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	603b      	str	r3, [r7, #0]
	  if(rxData.cmd == 'R') {
 8000eea:	783b      	ldrb	r3, [r7, #0]
 8000eec:	2b52      	cmp	r3, #82	; 0x52
 8000eee:	d118      	bne.n	8000f22 <main+0x7e>
		htim1.Instance->CCR1 = map(rxData.data, 0, 180, 500, 2300);
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000efe:	22b4      	movs	r2, #180	; 0xb4
 8000f00:	2100      	movs	r1, #0
 8000f02:	f7ff fed5 	bl	8000cb0 <map>
 8000f06:	4602      	mov	r2, r0
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <main+0x9c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
		txData.cmd = 'A';
 8000f0e:	2341      	movs	r3, #65	; 0x41
 8000f10:	713b      	strb	r3, [r7, #4]
		txData.data = getDistance();
 8000f12:	f7ff ffa3 	bl	8000e5c <getDistance>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	80fb      	strh	r3, [r7, #6]
		transmitPacket(txData);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 fc0b 	bl	8001738 <transmitPacket>
	  }
	  if(rxData.cmd == 'p') {
 8000f22:	783b      	ldrb	r3, [r7, #0]
 8000f24:	2b70      	cmp	r3, #112	; 0x70
 8000f26:	d1dc      	bne.n	8000ee2 <main+0x3e>
		  txData.cmd='B';
 8000f28:	2342      	movs	r3, #66	; 0x42
 8000f2a:	713b      	strb	r3, [r7, #4]
		  txData.data = 0x321;
 8000f2c:	f240 3321 	movw	r3, #801	; 0x321
 8000f30:	80fb      	strh	r3, [r7, #6]
		  transmitPacket(txData);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fc00 	bl	8001738 <transmitPacket>
  {
 8000f38:	e7d3      	b.n	8000ee2 <main+0x3e>
 8000f3a:	bf00      	nop
 8000f3c:	20000100 	.word	0x20000100
 8000f40:	20000028 	.word	0x20000028
 8000f44:	20000070 	.word	0x20000070
 8000f48:	200000b8 	.word	0x200000b8

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 f8c4 	bl	80050e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <SystemClock_Config+0xc8>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a26      	ldr	r2, [pc, #152]	; (8001014 <SystemClock_Config+0xc8>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <SystemClock_Config+0xc8>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <SystemClock_Config+0xcc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <SystemClock_Config+0xcc>)
 8000f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <SystemClock_Config+0xcc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 f849 	bl	8002068 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fdc:	f000 f9b0 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2103      	movs	r1, #3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 faab 	bl	8002558 <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001008:	f000 f99a 	bl	8001340 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3750      	adds	r7, #80	; 0x50
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b096      	sub	sp, #88	; 0x58
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f004 f847 	bl	80050e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800105a:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <MX_TIM1_Init+0x13c>)
 800105c:	4a3f      	ldr	r2, [pc, #252]	; (800115c <MX_TIM1_Init+0x140>)
 800105e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001060:	4b3d      	ldr	r3, [pc, #244]	; (8001158 <MX_TIM1_Init+0x13c>)
 8001062:	2263      	movs	r2, #99	; 0x63
 8001064:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_TIM1_Init+0x13c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800106c:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <MX_TIM1_Init+0x13c>)
 800106e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001072:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b38      	ldr	r3, [pc, #224]	; (8001158 <MX_TIM1_Init+0x13c>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <MX_TIM1_Init+0x13c>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b35      	ldr	r3, [pc, #212]	; (8001158 <MX_TIM1_Init+0x13c>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001086:	4834      	ldr	r0, [pc, #208]	; (8001158 <MX_TIM1_Init+0x13c>)
 8001088:	f001 fc46 	bl	8002918 <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001092:	f000 f955 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800109c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010a0:	4619      	mov	r1, r3
 80010a2:	482d      	ldr	r0, [pc, #180]	; (8001158 <MX_TIM1_Init+0x13c>)
 80010a4:	f002 f9ae 	bl	8003404 <HAL_TIM_ConfigClockSource>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010ae:	f000 f947 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b2:	4829      	ldr	r0, [pc, #164]	; (8001158 <MX_TIM1_Init+0x13c>)
 80010b4:	f001 fcda 	bl	8002a6c <HAL_TIM_PWM_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010be:	f000 f93f 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010ce:	4619      	mov	r1, r3
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <MX_TIM1_Init+0x13c>)
 80010d2:	f002 fec1 	bl	8003e58 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010dc:	f000 f930 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e0:	2360      	movs	r3, #96	; 0x60
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1500-1;
 80010e4:	f240 53db 	movw	r3, #1499	; 0x5db
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	4814      	ldr	r0, [pc, #80]	; (8001158 <MX_TIM1_Init+0x13c>)
 8001108:	f002 f8ba 	bl	8003280 <HAL_TIM_PWM_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001112:	f000 f915 	bl	8001340 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM1_Init+0x13c>)
 800113a:	f002 fefb 	bl	8003f34 <HAL_TIMEx_ConfigBreakDeadTime>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001144:	f000 f8fc 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM1_Init+0x13c>)
 800114a:	f000 f9a3 	bl	8001494 <HAL_TIM_MspPostInit>

}
 800114e:	bf00      	nop
 8001150:	3758      	adds	r7, #88	; 0x58
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000028 	.word	0x20000028
 800115c:	40010000 	.word	0x40010000

08001160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_TIM3_Init+0xd8>)
 800118c:	4a2b      	ldr	r2, [pc, #172]	; (800123c <MX_TIM3_Init+0xdc>)
 800118e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <MX_TIM3_Init+0xd8>)
 8001192:	2263      	movs	r2, #99	; 0x63
 8001194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <MX_TIM3_Init+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_TIM3_Init+0xd8>)
 800119e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <MX_TIM3_Init+0xd8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_TIM3_Init+0xd8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <MX_TIM3_Init+0xd8>)
 80011b2:	f001 fbb1 	bl	8002918 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80011bc:	f000 f8c0 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	4619      	mov	r1, r3
 80011cc:	481a      	ldr	r0, [pc, #104]	; (8001238 <MX_TIM3_Init+0xd8>)
 80011ce:	f002 f919 	bl	8003404 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011d8:	f000 f8b2 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011dc:	4816      	ldr	r0, [pc, #88]	; (8001238 <MX_TIM3_Init+0xd8>)
 80011de:	f001 fd4f 	bl	8002c80 <HAL_TIM_IC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011e8:	f000 f8aa 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	480f      	ldr	r0, [pc, #60]	; (8001238 <MX_TIM3_Init+0xd8>)
 80011fc:	f002 fe2c 	bl	8003e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001206:	f000 f89b 	bl	8001340 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800120e:	2301      	movs	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_TIM3_Init+0xd8>)
 8001222:	f001 ff91 	bl	8003148 <HAL_TIM_IC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800122c:	f000 f888 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000070 	.word	0x20000070
 800123c:	40000400 	.word	0x40000400

08001240 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_TIM11_Init+0x40>)
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <MX_TIM11_Init+0x44>)
 8001248:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_TIM11_Init+0x40>)
 800124c:	2263      	movs	r2, #99	; 0x63
 800124e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_TIM11_Init+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_TIM11_Init+0x40>)
 8001258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_TIM11_Init+0x40>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_TIM11_Init+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_TIM11_Init+0x40>)
 800126c:	f001 fb54 	bl	8002918 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001276:	f000 f863 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000b8 	.word	0x200000b8
 8001284:	40014800 	.word	0x40014800

08001288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <MX_USART2_UART_Init+0x50>)
 8001290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f002 fe9e 	bl	8004000 <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ca:	f000 f839 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000100 	.word	0x20000100
 80012d8:	40004400 	.word	0x40004400

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_GPIO_Init+0x5c>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <MX_GPIO_Init+0x5c>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <MX_GPIO_Init+0x5c>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <MX_GPIO_Init+0x60>)
 8001312:	f000 fe8f 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : trigger_Pin */
  GPIO_InitStruct.Pin = trigger_Pin;
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(trigger_GPIO_Port, &GPIO_InitStruct);
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_GPIO_Init+0x60>)
 800132c:	f000 fcfe 	bl	8001d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_MspInit+0x4c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a31      	ldr	r2, [pc, #196]	; (8001480 <HAL_TIM_Base_MspInit+0xe4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10e      	bne.n	80013dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80013da:	e04c      	b.n	8001476 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a29      	ldr	r2, [pc, #164]	; (8001488 <HAL_TIM_Base_MspInit+0xec>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d134      	bne.n	8001450 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = echo_Pin;
 800141e:	2340      	movs	r3, #64	; 0x40
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800142e:	2302      	movs	r3, #2
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(echo_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4814      	ldr	r0, [pc, #80]	; (800148c <HAL_TIM_Base_MspInit+0xf0>)
 800143a:	f000 fc77 	bl	8001d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	201d      	movs	r0, #29
 8001444:	f000 fba9 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001448:	201d      	movs	r0, #29
 800144a:	f000 fbc2 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
}
 800144e:	e012      	b.n	8001476 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM11)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_TIM_Base_MspInit+0xf4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10d      	bne.n	8001476 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_TIM_Base_MspInit+0xe8>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	; 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40010000 	.word	0x40010000
 8001484:	40023800 	.word	0x40023800
 8001488:	40000400 	.word	0x40000400
 800148c:	40020000 	.word	0x40020000
 8001490:	40014800 	.word	0x40014800

08001494 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <HAL_TIM_MspPostInit+0x68>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d11e      	bne.n	80014f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_TIM_MspPostInit+0x6c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_TIM_MspPostInit+0x6c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_TIM_MspPostInit+0x6c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = servo_Pin;
 80014d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_TIM_MspPostInit+0x70>)
 80014f0:	f000 fc1c 	bl	8001d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014f4:	bf00      	nop
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40010000 	.word	0x40010000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_UART_MspInit+0x94>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d133      	bne.n	8001592 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_UART_MspInit+0x98>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_UART_MspInit+0x98>)
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_UART_MspInit+0x98>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0x98>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_UART_MspInit+0x98>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_UART_MspInit+0x98>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001562:	230c      	movs	r3, #12
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001572:	2307      	movs	r3, #7
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_UART_MspInit+0x9c>)
 800157e:	f000 fbd5 	bl	8001d2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2026      	movs	r0, #38	; 0x26
 8001588:	f000 fb07 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800158c:	2026      	movs	r0, #38	; 0x26
 800158e:	f000 fb20 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40004400 	.word	0x40004400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 f9d6 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <TIM3_IRQHandler+0x10>)
 8001602:	f001 fcb1 	bl	8002f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000070 	.word	0x20000070

08001610 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <USART2_IRQHandler+0x10>)
 8001616:	f002 fdf3 	bl	8004200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000100 	.word	0x20000100

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <initUart>:
int rxBufferPp;               // put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
   huart = inHuart;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <initUart+0x24>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
   HAL_UART_Receive_IT(&*huart, &rxChar, 1);
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <initUart+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4904      	ldr	r1, [pc, #16]	; (8001670 <initUart+0x28>)
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fda9 	bl	80041b6 <HAL_UART_Receive_IT>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000158 	.word	0x20000158
 8001670:	20000263 	.word	0x20000263

08001674 <HAL_UART_RxCpltCallback>:

// 문자수신 처리
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
   rxBuffer[rxBufferPp++] = rxChar;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_UART_RxCpltCallback+0x4c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	490f      	ldr	r1, [pc, #60]	; (80016c0 <HAL_UART_RxCpltCallback+0x4c>)
 8001684:	600a      	str	r2, [r1, #0]
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_UART_RxCpltCallback+0x50>)
 8001688:	7811      	ldrb	r1, [r2, #0]
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_UART_RxCpltCallback+0x54>)
 800168c:	54d1      	strb	r1, [r2, r3]
   rxBufferPp %= rxBufferMax;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_UART_RxCpltCallback+0x4c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_UART_RxCpltCallback+0x58>)
 8001694:	fb83 1302 	smull	r1, r3, r3, r2
 8001698:	4413      	add	r3, r2
 800169a:	11d9      	asrs	r1, r3, #7
 800169c:	17d3      	asrs	r3, r2, #31
 800169e:	1ac9      	subs	r1, r1, r3
 80016a0:	460b      	mov	r3, r1
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	1a5b      	subs	r3, r3, r1
 80016a6:	1ad1      	subs	r1, r2, r3
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_UART_RxCpltCallback+0x4c>)
 80016aa:	6019      	str	r1, [r3, #0]
   HAL_UART_Receive_IT(huart, &rxChar, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	4905      	ldr	r1, [pc, #20]	; (80016c4 <HAL_UART_RxCpltCallback+0x50>)
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f002 fd80 	bl	80041b6 <HAL_UART_Receive_IT>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000160 	.word	0x20000160
 80016c4:	20000263 	.word	0x20000263
 80016c8:	20000164 	.word	0x20000164
 80016cc:	80808081 	.word	0x80808081

080016d0 <getChar>:

// 버퍼에서 문자 꺼내오기
int16_t getChar() {
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
   int16_t result;
   if(rxBufferGp == rxBufferPp) return -1;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <getChar+0x58>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <getChar+0x5c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d102      	bne.n	80016e8 <getChar+0x18>
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e018      	b.n	800171a <getChar+0x4a>
   result = rxBuffer[rxBufferGp++];
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <getChar+0x58>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <getChar+0x58>)
 80016f0:	600a      	str	r2, [r1, #0]
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <getChar+0x60>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	80fb      	strh	r3, [r7, #6]
   rxBufferGp %= rxBufferMax;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <getChar+0x58>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <getChar+0x64>)
 80016fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001702:	4413      	add	r3, r2
 8001704:	11d9      	asrs	r1, r3, #7
 8001706:	17d3      	asrs	r3, r2, #31
 8001708:	1ac9      	subs	r1, r1, r3
 800170a:	460b      	mov	r3, r1
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	1a5b      	subs	r3, r3, r1
 8001710:	1ad1      	subs	r1, r2, r3
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <getChar+0x58>)
 8001714:	6019      	str	r1, [r3, #0]
   return result;
 8001716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000015c 	.word	0x2000015c
 800172c:	20000160 	.word	0x20000160
 8001730:	20000164 	.word	0x20000164
 8001734:	80808081 	.word	0x80808081

08001738 <transmitPacket>:


//packet 전송
void transmitPacket(protocol_t data) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	// 사전준비, CRC, STX, ETX
	//big endian
	uint8_t buffer[] = {STX, 0, 0, 0, 0, ETX};
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <transmitPacket+0x8c>)
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	e892 0003 	ldmia.w	r2, {r0, r1}
 800174a:	6018      	str	r0, [r3, #0]
 800174c:	3304      	adds	r3, #4
 800174e:	8019      	strh	r1, [r3, #0]
	buffer[1] = data.cmd;
 8001750:	793b      	ldrb	r3, [r7, #4]
 8001752:	727b      	strb	r3, [r7, #9]
	buffer[2] = ( data.data >>7 ) | 0x80;
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	09db      	lsrs	r3, r3, #7
 8001758:	b29b      	uxth	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001760:	b2db      	uxtb	r3, r3
 8001762:	72bb      	strb	r3, [r7, #10]
	buffer[3] = (data.data & 0x7f) | 0x80;
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	b25b      	sxtb	r3, r3
 8001768:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800176c:	b25b      	sxtb	r3, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	72fb      	strb	r3, [r7, #11]
	buffer[4] = buffer[0]+buffer[1]+buffer[2]+buffer[3];
 8001772:	7a3a      	ldrb	r2, [r7, #8]
 8001774:	7a7b      	ldrb	r3, [r7, #9]
 8001776:	4413      	add	r3, r2
 8001778:	b2da      	uxtb	r2, r3
 800177a:	7abb      	ldrb	r3, [r7, #10]
 800177c:	4413      	add	r3, r2
 800177e:	b2da      	uxtb	r2, r3
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	4413      	add	r3, r2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	733b      	strb	r3, [r7, #12]
	//데이터 전송
   HAL_UART_Transmit(huart, buffer, sizeof(buffer), 1);
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <transmitPacket+0x90>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	f107 0108 	add.w	r1, r7, #8
 8001790:	2301      	movs	r3, #1
 8001792:	2206      	movs	r2, #6
 8001794:	f002 fc84 	bl	80040a0 <HAL_UART_Transmit>
   while (HAL_UART_GetState(huart) == HAL_UART_STATE_BUSY_TX
 8001798:	bf00      	nop
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <transmitPacket+0x90>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 ffe0 	bl	8004764 <HAL_UART_GetState>
 80017a4:	4603      	mov	r3, r0
   || HAL_UART_GetState(huart) == HAL_UART_STATE_BUSY_TX_RX);
 80017a6:	2b21      	cmp	r3, #33	; 0x21
 80017a8:	d0f7      	beq.n	800179a <transmitPacket+0x62>
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <transmitPacket+0x90>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 ffd8 	bl	8004764 <HAL_UART_GetState>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b23      	cmp	r3, #35	; 0x23
 80017b8:	d0ef      	beq.n	800179a <transmitPacket+0x62>
   //while (HAL_UART_GetState(huart) ! = HAL_UART_STATE_READY);
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	08005158 	.word	0x08005158
 80017c8:	20000158 	.word	0x20000158

080017cc <receivePacket>:
protocol_t receivePacket() {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
	protocol_t result;
	uint8_t buffer[6];
	uint8_t count = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout;

	int16_t ch = getChar();
 80017d6:	f7ff ff7b 	bl	80016d0 <getChar>
 80017da:	4603      	mov	r3, r0
 80017dc:	83bb      	strh	r3, [r7, #28]
	memset(&result, 0, sizeof(protocol_t));
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	2204      	movs	r2, #4
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fc7e 	bl	80050e8 <memset>
	if(ch == STX) {
 80017ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d14e      	bne.n	8001892 <receivePacket+0xc6>

		buffer[count++]= ch;
 80017f4:	7ffb      	ldrb	r3, [r7, #31]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	77fa      	strb	r2, [r7, #31]
 80017fa:	8bba      	ldrh	r2, [r7, #28]
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	3320      	adds	r3, #32
 8001800:	443b      	add	r3, r7
 8001802:	f803 2c20 	strb.w	r2, [r3, #-32]
		timeout = HAL_GetTick();
 8001806:	f000 f8e1 	bl	80019cc <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]
		while(ch != ETX) {
 800180c:	e01c      	b.n	8001848 <receivePacket+0x7c>
			ch = getChar();
 800180e:	f7ff ff5f 	bl	80016d0 <getChar>
 8001812:	4603      	mov	r3, r0
 8001814:	83bb      	strh	r3, [r7, #28]
			if(ch !=-1) {
 8001816:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800181a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181e:	d008      	beq.n	8001832 <receivePacket+0x66>
				buffer[count++] = ch;
 8001820:	7ffb      	ldrb	r3, [r7, #31]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	77fa      	strb	r2, [r7, #31]
 8001826:	8bba      	ldrh	r2, [r7, #28]
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	3320      	adds	r3, #32
 800182c:	443b      	add	r3, r7
 800182e:	f803 2c20 	strb.w	r2, [r3, #-32]
			}
			if(HAL_GetTick() - timeout >- 2) return result;
 8001832:	f000 f8cb 	bl	80019cc <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d102      	bne.n	8001848 <receivePacket+0x7c>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e026      	b.n	8001896 <receivePacket+0xca>
		while(ch != ETX) {
 8001848:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d1de      	bne.n	800180e <receivePacket+0x42>


		}
		//crc 검사
		uint8_t crc =0;
 8001850:	2300      	movs	r3, #0
 8001852:	76fb      	strb	r3, [r7, #27]
		for(int i =0; i<4; i++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e009      	b.n	800186e <receivePacket+0xa2>
			crc +=buffer[i];
 800185a:	463a      	mov	r2, r7
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	4413      	add	r3, r2
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	7efb      	ldrb	r3, [r7, #27]
 8001864:	4413      	add	r3, r2
 8001866:	76fb      	strb	r3, [r7, #27]
		for(int i =0; i<4; i++)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3301      	adds	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b03      	cmp	r3, #3
 8001872:	ddf2      	ble.n	800185a <receivePacket+0x8e>
		if (crc !=buffer[4]) return result;
 8001874:	793b      	ldrb	r3, [r7, #4]
 8001876:	7efa      	ldrb	r2, [r7, #27]
 8001878:	429a      	cmp	r2, r3
 800187a:	d002      	beq.n	8001882 <receivePacket+0xb6>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e009      	b.n	8001896 <receivePacket+0xca>
		//정상 수신 완료 후 데이터 파싱 (parser, parsing)
        result.cmd =  buffer[1];
 8001882:	787b      	ldrb	r3, [r7, #1]
 8001884:	723b      	strb	r3, [r7, #8]
        result.data = buffer[3] & 0x7f;
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	b29b      	uxth	r3, r3
 800188a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800188e:	b29b      	uxth	r3, r3
 8001890:	817b      	strh	r3, [r7, #10]
        result.data !=(buffer[2] & 0x7f) << 7;
	}
	return result;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	60fb      	str	r3, [r7, #12]
}
 8001896:	2300      	movs	r3, #0
 8001898:	89ba      	ldrh	r2, [r7, #12]
 800189a:	f362 030f 	bfi	r3, r2, #0, #16
 800189e:	89fa      	ldrh	r2, [r7, #14]
 80018a0:	f362 431f 	bfi	r3, r2, #16, #16
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018b0:	f7ff feb8 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	; (80018ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	; (80018f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018da:	f003 fc0d 	bl	80050f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff fae1 	bl	8000ea4 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018f0:	08005188 	.word	0x08005188
  ldr r2, =_sbss
 80018f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018f8:	20000268 	.word	0x20000268

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f92b 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fd0a 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f943 	bl	8001bee <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 f90b 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000264 	.word	0x20000264

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000264 	.word	0x20000264

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff feda 	bl	80019cc <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d008      	beq.n	8001c38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e052      	b.n	8001cde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0216 	bic.w	r2, r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d103      	bne.n	8001c68 <HAL_DMA_Abort+0x62>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0208 	bic.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c88:	e013      	b.n	8001cb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c8a:	f7ff fe9f 	bl	80019cc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d90c      	bls.n	8001cb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e015      	b.n	8001cde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e4      	bne.n	8001c8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	223f      	movs	r2, #63	; 0x3f
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d004      	beq.n	8001d04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e00c      	b.n	8001d1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2205      	movs	r2, #5
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e159      	b.n	8001ffc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 8148 	bne.w	8001ff6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d005      	beq.n	8001d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d130      	bne.n	8001de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 0201 	and.w	r2, r3, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d017      	beq.n	8001e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d123      	bne.n	8001e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	69b9      	ldr	r1, [r7, #24]
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a2 	beq.w	8001ff6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a56      	ldr	r2, [pc, #344]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b54      	ldr	r3, [pc, #336]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ece:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_GPIO_Init+0x2ec>)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a49      	ldr	r2, [pc, #292]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d019      	beq.n	8001f2e <HAL_GPIO_Init+0x202>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a48      	ldr	r2, [pc, #288]	; (8002020 <HAL_GPIO_Init+0x2f4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0x1fe>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a47      	ldr	r2, [pc, #284]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00d      	beq.n	8001f26 <HAL_GPIO_Init+0x1fa>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a46      	ldr	r2, [pc, #280]	; (8002028 <HAL_GPIO_Init+0x2fc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x1f6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a45      	ldr	r2, [pc, #276]	; (800202c <HAL_GPIO_Init+0x300>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_GPIO_Init+0x1f2>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e008      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f22:	2303      	movs	r3, #3
 8001f24:	e004      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f002 0203 	and.w	r2, r2, #3
 8001f36:	0092      	lsls	r2, r2, #2
 8001f38:	4093      	lsls	r3, r2
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f40:	4935      	ldr	r1, [pc, #212]	; (8002018 <HAL_GPIO_Init+0x2ec>)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3302      	adds	r3, #2
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4e:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f72:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f9c:	4a24      	ldr	r2, [pc, #144]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff0:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b0f      	cmp	r3, #15
 8002000:	f67f aea2 	bls.w	8001d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	40013800 	.word	0x40013800
 800201c:	40020000 	.word	0x40020000
 8002020:	40020400 	.word	0x40020400
 8002024:	40020800 	.word	0x40020800
 8002028:	40020c00 	.word	0x40020c00
 800202c:	40021000 	.word	0x40021000
 8002030:	40013c00 	.word	0x40013c00

08002034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	619a      	str	r2, [r3, #24]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e267      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d075      	beq.n	8002172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002086:	4b88      	ldr	r3, [pc, #544]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d00c      	beq.n	80020ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002092:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209a:	2b08      	cmp	r3, #8
 800209c:	d112      	bne.n	80020c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209e:	4b82      	ldr	r3, [pc, #520]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d05b      	beq.n	8002170 <HAL_RCC_OscConfig+0x108>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d157      	bne.n	8002170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e242      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020cc:	d106      	bne.n	80020dc <HAL_RCC_OscConfig+0x74>
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e01d      	b.n	8002118 <HAL_RCC_OscConfig+0xb0>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x98>
 80020e6:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a6f      	ldr	r2, [pc, #444]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6c      	ldr	r2, [pc, #432]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0xb0>
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a68      	ldr	r2, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a65      	ldr	r2, [pc, #404]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff fc54 	bl	80019cc <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff fc50 	bl	80019cc <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e207      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b5b      	ldr	r3, [pc, #364]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0xc0>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fc40 	bl	80019cc <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff fc3c 	bl	80019cc <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1f3      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	4b51      	ldr	r3, [pc, #324]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0xe8>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d063      	beq.n	8002246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217e:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002192:	2b08      	cmp	r3, #8
 8002194:	d11c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002196:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d116      	bne.n	80021d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_RCC_OscConfig+0x152>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1c7      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4937      	ldr	r1, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	e03a      	b.n	8002246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCC_OscConfig+0x244>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff fbf5 	bl	80019cc <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e6:	f7ff fbf1 	bl	80019cc <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1a8      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4925      	ldr	r1, [pc, #148]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
 8002218:	e015      	b.n	8002246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_OscConfig+0x244>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff fbd4 	bl	80019cc <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002228:	f7ff fbd0 	bl	80019cc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e187      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d036      	beq.n	80022c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d016      	beq.n	8002288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_RCC_OscConfig+0x248>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002260:	f7ff fbb4 	bl	80019cc <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002268:	f7ff fbb0 	bl	80019cc <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e167      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800227c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x200>
 8002286:	e01b      	b.n	80022c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_OscConfig+0x248>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7ff fb9d 	bl	80019cc <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	e00e      	b.n	80022b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7ff fb99 	bl	80019cc <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d907      	bls.n	80022b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e150      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
 80022a8:	40023800 	.word	0x40023800
 80022ac:	42470000 	.word	0x42470000
 80022b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ea      	bne.n	8002296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8097 	beq.w	80023fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b7d      	ldr	r3, [pc, #500]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a7c      	ldr	r2, [pc, #496]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b7a      	ldr	r3, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b77      	ldr	r3, [pc, #476]	; (80024dc <HAL_RCC_OscConfig+0x474>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230a:	4b74      	ldr	r3, [pc, #464]	; (80024dc <HAL_RCC_OscConfig+0x474>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a73      	ldr	r2, [pc, #460]	; (80024dc <HAL_RCC_OscConfig+0x474>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7ff fb59 	bl	80019cc <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7ff fb55 	bl	80019cc <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e10c      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x474>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x2ea>
 8002344:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	4a63      	ldr	r2, [pc, #396]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6713      	str	r3, [r2, #112]	; 0x70
 8002350:	e01c      	b.n	800238c <HAL_RCC_OscConfig+0x324>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b05      	cmp	r3, #5
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x30c>
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	4a5e      	ldr	r2, [pc, #376]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6713      	str	r3, [r2, #112]	; 0x70
 8002366:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	4a5b      	ldr	r2, [pc, #364]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6713      	str	r3, [r2, #112]	; 0x70
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0x324>
 8002374:	4b58      	ldr	r3, [pc, #352]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a57      	ldr	r2, [pc, #348]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
 8002380:	4b55      	ldr	r3, [pc, #340]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a54      	ldr	r2, [pc, #336]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002386:	f023 0304 	bic.w	r3, r3, #4
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002394:	f7ff fb1a 	bl	80019cc <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7ff fb16 	bl	80019cc <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0cb      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0ee      	beq.n	800239c <HAL_RCC_OscConfig+0x334>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff fb04 	bl	80019cc <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c6:	e00a      	b.n	80023de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7ff fb00 	bl	80019cc <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e0b5      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023de:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1ee      	bne.n	80023c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	4b39      	ldr	r3, [pc, #228]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	4a38      	ldr	r2, [pc, #224]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a1 	beq.w	8002548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b08      	cmp	r3, #8
 8002410:	d05c      	beq.n	80024cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d141      	bne.n	800249e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <HAL_RCC_OscConfig+0x478>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff fad4 	bl	80019cc <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff fad0 	bl	80019cc <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e087      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	019b      	lsls	r3, r3, #6
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	3b01      	subs	r3, #1
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	491b      	ldr	r1, [pc, #108]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_RCC_OscConfig+0x478>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7ff faa9 	bl	80019cc <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247e:	f7ff faa5 	bl	80019cc <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e05c      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x416>
 800249c:	e054      	b.n	8002548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_RCC_OscConfig+0x478>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fa92 	bl	80019cc <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7ff fa8e 	bl	80019cc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e045      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x444>
 80024ca:	e03d      	b.n	8002548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e038      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40007000 	.word	0x40007000
 80024e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x4ec>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d028      	beq.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d121      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d11a      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800251a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800251c:	4293      	cmp	r3, r2
 800251e:	d111      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	3b01      	subs	r3, #1
 800252e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0cc      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b68      	ldr	r3, [pc, #416]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d90c      	bls.n	8002594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b65      	ldr	r3, [pc, #404]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a58      	ldr	r2, [pc, #352]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d044      	beq.n	8002678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d119      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d003      	beq.n	8002616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002612:	2b03      	cmp	r3, #3
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e067      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002636:	4b37      	ldr	r3, [pc, #220]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4934      	ldr	r1, [pc, #208]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002648:	f7ff f9c0 	bl	80019cc <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	e00a      	b.n	8002666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7ff f9bc 	bl	80019cc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e04f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 020c 	and.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d1eb      	bne.n	8002650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d20c      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f821 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	490a      	ldr	r1, [pc, #40]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	5ccb      	ldrb	r3, [r1, r3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f920 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023c00 	.word	0x40023c00
 8002714:	40023800 	.word	0x40023800
 8002718:	08005160 	.word	0x08005160
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002728:	b090      	sub	sp, #64	; 0x40
 800272a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
 8002730:	2300      	movs	r3, #0
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002734:	2300      	movs	r3, #0
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800273c:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d00d      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x40>
 8002748:	2b08      	cmp	r3, #8
 800274a:	f200 80a1 	bhi.w	8002890 <HAL_RCC_GetSysClockFreq+0x16c>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x34>
 8002752:	2b04      	cmp	r3, #4
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x3a>
 8002756:	e09b      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800275a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800275c:	e09b      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800275e:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002762:	e098      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276e:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d028      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	2200      	movs	r2, #0
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	627a      	str	r2, [r7, #36]	; 0x24
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800278c:	2100      	movs	r1, #0
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002790:	fb03 f201 	mul.w	r2, r3, r1
 8002794:	2300      	movs	r3, #0
 8002796:	fb00 f303 	mul.w	r3, r0, r3
 800279a:	4413      	add	r3, r2
 800279c:	4a43      	ldr	r2, [pc, #268]	; (80028ac <HAL_RCC_GetSysClockFreq+0x188>)
 800279e:	fba0 1202 	umull	r1, r2, r0, r2
 80027a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027a4:	460a      	mov	r2, r1
 80027a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80027a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027aa:	4413      	add	r3, r2
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	2200      	movs	r2, #0
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	61fa      	str	r2, [r7, #28]
 80027b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027be:	f7fe f8f9 	bl	80009b4 <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4613      	mov	r3, r2
 80027c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ca:	e053      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027cc:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	2200      	movs	r2, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	617a      	str	r2, [r7, #20]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027de:	f04f 0b00 	mov.w	fp, #0
 80027e2:	4652      	mov	r2, sl
 80027e4:	465b      	mov	r3, fp
 80027e6:	f04f 0000 	mov.w	r0, #0
 80027ea:	f04f 0100 	mov.w	r1, #0
 80027ee:	0159      	lsls	r1, r3, #5
 80027f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f4:	0150      	lsls	r0, r2, #5
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	ebb2 080a 	subs.w	r8, r2, sl
 80027fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800280e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002812:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002816:	ebb2 0408 	subs.w	r4, r2, r8
 800281a:	eb63 0509 	sbc.w	r5, r3, r9
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	00eb      	lsls	r3, r5, #3
 8002828:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800282c:	00e2      	lsls	r2, r4, #3
 800282e:	4614      	mov	r4, r2
 8002830:	461d      	mov	r5, r3
 8002832:	eb14 030a 	adds.w	r3, r4, sl
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	eb45 030b 	adc.w	r3, r5, fp
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800284a:	4629      	mov	r1, r5
 800284c:	028b      	lsls	r3, r1, #10
 800284e:	4621      	mov	r1, r4
 8002850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002854:	4621      	mov	r1, r4
 8002856:	028a      	lsls	r2, r1, #10
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285e:	2200      	movs	r2, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	60fa      	str	r2, [r7, #12]
 8002864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002868:	f7fe f8a4 	bl	80009b4 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	0c1b      	lsrs	r3, r3, #16
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	3301      	adds	r3, #1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800288e:	e002      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002898:	4618      	mov	r0, r3
 800289a:	3740      	adds	r7, #64	; 0x40
 800289c:	46bd      	mov	sp, r7
 800289e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	00f42400 	.word	0x00f42400
 80028ac:	017d7840 	.word	0x017d7840

080028b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028cc:	f7ff fff0 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	0a9b      	lsrs	r3, r3, #10
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4903      	ldr	r1, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	08005170 	.word	0x08005170

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028f4:	f7ff ffdc 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0b5b      	lsrs	r3, r3, #13
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4903      	ldr	r1, [pc, #12]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	08005170 	.word	0x08005170

08002918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e041      	b.n	80029ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fd2c 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 fe88 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e03c      	b.n	8002a4a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <HAL_TIM_Base_Start+0xa0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d018      	beq.n	8002a14 <HAL_TIM_Base_Start+0x5c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ea:	d013      	beq.n	8002a14 <HAL_TIM_Base_Start+0x5c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <HAL_TIM_Base_Start+0xa4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00e      	beq.n	8002a14 <HAL_TIM_Base_Start+0x5c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <HAL_TIM_Base_Start+0xa8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_TIM_Base_Start+0x5c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <HAL_TIM_Base_Start+0xac>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_TIM_Base_Start+0x5c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_TIM_Base_Start+0xb0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d010      	beq.n	8002a48 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a36:	e007      	b.n	8002a48 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	40014000 	.word	0x40014000

08002a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e041      	b.n	8002b02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f839 	bl	8002b0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f000 fdde 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_TIM_PWM_Start+0x24>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	bf14      	ite	ne
 8002b3c:	2301      	movne	r3, #1
 8002b3e:	2300      	moveq	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	e022      	b.n	8002b8a <HAL_TIM_PWM_Start+0x6a>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d109      	bne.n	8002b5e <HAL_TIM_PWM_Start+0x3e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	bf14      	ite	ne
 8002b56:	2301      	movne	r3, #1
 8002b58:	2300      	moveq	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	e015      	b.n	8002b8a <HAL_TIM_PWM_Start+0x6a>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d109      	bne.n	8002b78 <HAL_TIM_PWM_Start+0x58>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e008      	b.n	8002b8a <HAL_TIM_PWM_Start+0x6a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e068      	b.n	8002c64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0x82>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba0:	e013      	b.n	8002bca <HAL_TIM_PWM_Start+0xaa>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d104      	bne.n	8002bb2 <HAL_TIM_PWM_Start+0x92>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb0:	e00b      	b.n	8002bca <HAL_TIM_PWM_Start+0xaa>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0xa2>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc0:	e003      	b.n	8002bca <HAL_TIM_PWM_Start+0xaa>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	6839      	ldr	r1, [r7, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 f91a 	bl	8003e0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <HAL_TIM_PWM_Start+0x14c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_TIM_PWM_Start+0x14c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d018      	beq.n	8002c2e <HAL_TIM_PWM_Start+0x10e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c04:	d013      	beq.n	8002c2e <HAL_TIM_PWM_Start+0x10e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_TIM_PWM_Start+0x150>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_TIM_PWM_Start+0x10e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_TIM_PWM_Start+0x154>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_TIM_PWM_Start+0x10e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_TIM_PWM_Start+0x158>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_TIM_PWM_Start+0x10e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <HAL_TIM_PWM_Start+0x15c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d111      	bne.n	8002c52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d010      	beq.n	8002c62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c50:	e007      	b.n	8002c62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40014000 	.word	0x40014000

08002c80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e041      	b.n	8002d16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f839 	bl	8002d1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	f000 fcd4 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_IC_Start_IT+0x1e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e013      	b.n	8002d7a <HAL_TIM_IC_Start_IT+0x46>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_IC_Start_IT+0x2e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	e00b      	b.n	8002d7a <HAL_TIM_IC_Start_IT+0x46>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d104      	bne.n	8002d72 <HAL_TIM_IC_Start_IT+0x3e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	e003      	b.n	8002d7a <HAL_TIM_IC_Start_IT+0x46>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d104      	bne.n	8002d8c <HAL_TIM_IC_Start_IT+0x58>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e013      	b.n	8002db4 <HAL_TIM_IC_Start_IT+0x80>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d104      	bne.n	8002d9c <HAL_TIM_IC_Start_IT+0x68>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e00b      	b.n	8002db4 <HAL_TIM_IC_Start_IT+0x80>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d104      	bne.n	8002dac <HAL_TIM_IC_Start_IT+0x78>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e003      	b.n	8002db4 <HAL_TIM_IC_Start_IT+0x80>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002db6:	7bbb      	ldrb	r3, [r7, #14]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dbc:	7b7b      	ldrb	r3, [r7, #13]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0c2      	b.n	8002f4c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_IC_Start_IT+0xa2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd4:	e013      	b.n	8002dfe <HAL_TIM_IC_Start_IT+0xca>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_IC_Start_IT+0xb2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de4:	e00b      	b.n	8002dfe <HAL_TIM_IC_Start_IT+0xca>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_IC_Start_IT+0xc2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df4:	e003      	b.n	8002dfe <HAL_TIM_IC_Start_IT+0xca>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_IC_Start_IT+0xda>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0c:	e013      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x102>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_IC_Start_IT+0xea>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e1c:	e00b      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x102>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_IC_Start_IT+0xfa>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e2c:	e003      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x102>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	d841      	bhi.n	8002ec0 <HAL_TIM_IC_Start_IT+0x18c>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_TIM_IC_Start_IT+0x110>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e79 	.word	0x08002e79
 8002e48:	08002ec1 	.word	0x08002ec1
 8002e4c:	08002ec1 	.word	0x08002ec1
 8002e50:	08002ec1 	.word	0x08002ec1
 8002e54:	08002e8b 	.word	0x08002e8b
 8002e58:	08002ec1 	.word	0x08002ec1
 8002e5c:	08002ec1 	.word	0x08002ec1
 8002e60:	08002ec1 	.word	0x08002ec1
 8002e64:	08002e9d 	.word	0x08002e9d
 8002e68:	08002ec1 	.word	0x08002ec1
 8002e6c:	08002ec1 	.word	0x08002ec1
 8002e70:	08002ec1 	.word	0x08002ec1
 8002e74:	08002eaf 	.word	0x08002eaf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0202 	orr.w	r2, r2, #2
 8002e86:	60da      	str	r2, [r3, #12]
      break;
 8002e88:	e01d      	b.n	8002ec6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0204 	orr.w	r2, r2, #4
 8002e98:	60da      	str	r2, [r3, #12]
      break;
 8002e9a:	e014      	b.n	8002ec6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0208 	orr.w	r2, r2, #8
 8002eaa:	60da      	str	r2, [r3, #12]
      break;
 8002eac:	e00b      	b.n	8002ec6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0210 	orr.w	r2, r2, #16
 8002ebc:	60da      	str	r2, [r3, #12]
      break;
 8002ebe:	e002      	b.n	8002ec6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d13e      	bne.n	8002f4a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	6839      	ldr	r1, [r7, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 ff99 	bl	8003e0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <HAL_TIM_IC_Start_IT+0x220>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d018      	beq.n	8002f16 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eec:	d013      	beq.n	8002f16 <HAL_TIM_IC_Start_IT+0x1e2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_TIM_IC_Start_IT+0x224>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_TIM_IC_Start_IT+0x228>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_TIM_IC_Start_IT+0x22c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <HAL_TIM_IC_Start_IT+0x230>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d111      	bne.n	8002f3a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b06      	cmp	r3, #6
 8002f26:	d010      	beq.n	8002f4a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f38:	e007      	b.n	8002f4a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40014000 	.word	0x40014000

08002f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d020      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01b      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0202 	mvn.w	r2, #2
 8002f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd feb4 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fb38 	bl	8003630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fb3f 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d020      	beq.n	8003018 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0204 	mvn.w	r2, #4
 8002fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fe8e 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fb12 	bl	8003630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fb19 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d020      	beq.n	8003064 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0208 	mvn.w	r2, #8
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd fe68 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 faec 	bl	8003630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 faf3 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	d020      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0210 	mvn.w	r2, #16
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2208      	movs	r2, #8
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd fe42 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fac6 	bl	8003630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 facd 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0201 	mvn.w	r2, #1
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 faa4 	bl	800361c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 ff7a 	bl	8003fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00c      	beq.n	800311c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa9e 	bl	8003658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0220 	mvn.w	r2, #32
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 ff4c 	bl	8003fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003162:	2302      	movs	r3, #2
 8003164:	e088      	b.n	8003278 <HAL_TIM_IC_ConfigChannel+0x130>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003184:	f000 fc8a 	bl	8003a9c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 020c 	bic.w	r2, r2, #12
 8003196:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6999      	ldr	r1, [r3, #24]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	619a      	str	r2, [r3, #24]
 80031aa:	e060      	b.n	800326e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d11c      	bne.n	80031ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80031c2:	f000 fd02 	bl	8003bca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6999      	ldr	r1, [r3, #24]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	021a      	lsls	r2, r3, #8
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	619a      	str	r2, [r3, #24]
 80031ea:	e040      	b.n	800326e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d11b      	bne.n	800322a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003202:	f000 fd4f 	bl	8003ca4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 020c 	bic.w	r2, r2, #12
 8003214:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69d9      	ldr	r1, [r3, #28]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	61da      	str	r2, [r3, #28]
 8003228:	e021      	b.n	800326e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d11c      	bne.n	800326a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003240:	f000 fd6c 	bl	8003d1c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003252:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69d9      	ldr	r1, [r3, #28]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	021a      	lsls	r2, r3, #8
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	61da      	str	r2, [r3, #28]
 8003268:	e001      	b.n	800326e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800329a:	2302      	movs	r3, #2
 800329c:	e0ae      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b0c      	cmp	r3, #12
 80032aa:	f200 809f 	bhi.w	80033ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032ae:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	080033ed 	.word	0x080033ed
 80032bc:	080033ed 	.word	0x080033ed
 80032c0:	080033ed 	.word	0x080033ed
 80032c4:	08003329 	.word	0x08003329
 80032c8:	080033ed 	.word	0x080033ed
 80032cc:	080033ed 	.word	0x080033ed
 80032d0:	080033ed 	.word	0x080033ed
 80032d4:	0800336b 	.word	0x0800336b
 80032d8:	080033ed 	.word	0x080033ed
 80032dc:	080033ed 	.word	0x080033ed
 80032e0:	080033ed 	.word	0x080033ed
 80032e4:	080033ab 	.word	0x080033ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa48 	bl	8003784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0208 	orr.w	r2, r2, #8
 8003302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0204 	bic.w	r2, r2, #4
 8003312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6999      	ldr	r1, [r3, #24]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	619a      	str	r2, [r3, #24]
      break;
 8003326:	e064      	b.n	80033f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fa8e 	bl	8003850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6999      	ldr	r1, [r3, #24]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	021a      	lsls	r2, r3, #8
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	619a      	str	r2, [r3, #24]
      break;
 8003368:	e043      	b.n	80033f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fad9 	bl	8003928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0208 	orr.w	r2, r2, #8
 8003384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0204 	bic.w	r2, r2, #4
 8003394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69d9      	ldr	r1, [r3, #28]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	61da      	str	r2, [r3, #28]
      break;
 80033a8:	e023      	b.n	80033f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fb23 	bl	80039fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	021a      	lsls	r2, r3, #8
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	61da      	str	r2, [r3, #28]
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	75fb      	strb	r3, [r7, #23]
      break;
 80033f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIM_ConfigClockSource+0x1c>
 800341c:	2302      	movs	r3, #2
 800341e:	e0b4      	b.n	800358a <HAL_TIM_ConfigClockSource+0x186>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800343e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003458:	d03e      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0xd4>
 800345a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345e:	f200 8087 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003466:	f000 8086 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x172>
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346e:	d87f      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b70      	cmp	r3, #112	; 0x70
 8003472:	d01a      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0xa6>
 8003474:	2b70      	cmp	r3, #112	; 0x70
 8003476:	d87b      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b60      	cmp	r3, #96	; 0x60
 800347a:	d050      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x11a>
 800347c:	2b60      	cmp	r3, #96	; 0x60
 800347e:	d877      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b50      	cmp	r3, #80	; 0x50
 8003482:	d03c      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0xfa>
 8003484:	2b50      	cmp	r3, #80	; 0x50
 8003486:	d873      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d058      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x13a>
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d86f      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b30      	cmp	r3, #48	; 0x30
 8003492:	d064      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15a>
 8003494:	2b30      	cmp	r3, #48	; 0x30
 8003496:	d86b      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 8003498:	2b20      	cmp	r3, #32
 800349a:	d060      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15a>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d867      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05c      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15a>
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d05a      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15a>
 80034a8:	e062      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ba:	f000 fc87 	bl	8003dcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	609a      	str	r2, [r3, #8]
      break;
 80034d6:	e04f      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034e8:	f000 fc70 	bl	8003dcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fa:	609a      	str	r2, [r3, #8]
      break;
 80034fc:	e03c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	461a      	mov	r2, r3
 800350c:	f000 fb2e 	bl	8003b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2150      	movs	r1, #80	; 0x50
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fc3d 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 800351c:	e02c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	461a      	mov	r2, r3
 800352c:	f000 fb8a 	bl	8003c44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2160      	movs	r1, #96	; 0x60
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fc2d 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 800353c:	e01c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	461a      	mov	r2, r3
 800354c:	f000 fb0e 	bl	8003b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2140      	movs	r1, #64	; 0x40
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fc1d 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 800355c:	e00c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f000 fc14 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 800356e:	e003      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e000      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d831      	bhi.n	800360c <HAL_TIM_ReadCapturedValue+0x78>
 80035a8:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	0800360d 	.word	0x0800360d
 80035b8:	0800360d 	.word	0x0800360d
 80035bc:	0800360d 	.word	0x0800360d
 80035c0:	080035ef 	.word	0x080035ef
 80035c4:	0800360d 	.word	0x0800360d
 80035c8:	0800360d 	.word	0x0800360d
 80035cc:	0800360d 	.word	0x0800360d
 80035d0:	080035f9 	.word	0x080035f9
 80035d4:	0800360d 	.word	0x0800360d
 80035d8:	0800360d 	.word	0x0800360d
 80035dc:	0800360d 	.word	0x0800360d
 80035e0:	08003603 	.word	0x08003603
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	60fb      	str	r3, [r7, #12]

      break;
 80035ec:	e00f      	b.n	800360e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	60fb      	str	r3, [r7, #12]

      break;
 80035f6:	e00a      	b.n	800360e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	60fb      	str	r3, [r7, #12]

      break;
 8003600:	e005      	b.n	800360e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	60fb      	str	r3, [r7, #12]

      break;
 800360a:	e000      	b.n	800360e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800360c:	bf00      	nop
  }

  return tmpreg;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3a      	ldr	r2, [pc, #232]	; (8003768 <TIM_Base_SetConfig+0xfc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00f      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d00b      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a37      	ldr	r2, [pc, #220]	; (800376c <TIM_Base_SetConfig+0x100>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d007      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a36      	ldr	r2, [pc, #216]	; (8003770 <TIM_Base_SetConfig+0x104>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_Base_SetConfig+0x38>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a35      	ldr	r2, [pc, #212]	; (8003774 <TIM_Base_SetConfig+0x108>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <TIM_Base_SetConfig+0xfc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01b      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c4:	d017      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a28      	ldr	r2, [pc, #160]	; (800376c <TIM_Base_SetConfig+0x100>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <TIM_Base_SetConfig+0x104>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00f      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <TIM_Base_SetConfig+0x108>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <TIM_Base_SetConfig+0x10c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a24      	ldr	r2, [pc, #144]	; (800377c <TIM_Base_SetConfig+0x110>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a23      	ldr	r2, [pc, #140]	; (8003780 <TIM_Base_SetConfig+0x114>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d108      	bne.n	8003708 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <TIM_Base_SetConfig+0xfc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d103      	bne.n	800373c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f023 0201 	bic.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]
  }
}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40010000 	.word	0x40010000
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800
 8003774:	40000c00 	.word	0x40000c00
 8003778:	40014000 	.word	0x40014000
 800377c:	40014400 	.word	0x40014400
 8003780:	40014800 	.word	0x40014800

08003784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f023 0201 	bic.w	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f023 0302 	bic.w	r3, r3, #2
 80037cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a1c      	ldr	r2, [pc, #112]	; (800384c <TIM_OC1_SetConfig+0xc8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d10c      	bne.n	80037fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0308 	bic.w	r3, r3, #8
 80037e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <TIM_OC1_SetConfig+0xc8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d111      	bne.n	8003826 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	621a      	str	r2, [r3, #32]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40010000 	.word	0x40010000

08003850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f023 0210 	bic.w	r2, r3, #16
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800387e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0320 	bic.w	r3, r3, #32
 800389a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <TIM_OC2_SetConfig+0xd4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10d      	bne.n	80038cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <TIM_OC2_SetConfig+0xd4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d113      	bne.n	80038fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40010000 	.word	0x40010000

08003928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0303 	bic.w	r3, r3, #3
 800395e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <TIM_OC3_SetConfig+0xd0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10d      	bne.n	80039a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800398c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <TIM_OC3_SetConfig+0xd0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d113      	bne.n	80039d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40010000 	.word	0x40010000

080039fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	031b      	lsls	r3, r3, #12
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <TIM_OC4_SetConfig+0x9c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d109      	bne.n	8003a70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	621a      	str	r2, [r3, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40010000 	.word	0x40010000

08003a9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f023 0201 	bic.w	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <TIM_TI1_SetConfig+0xbc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <TIM_TI1_SetConfig+0x56>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d00f      	beq.n	8003af2 <TIM_TI1_SetConfig+0x56>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a21      	ldr	r2, [pc, #132]	; (8003b5c <TIM_TI1_SetConfig+0xc0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00b      	beq.n	8003af2 <TIM_TI1_SetConfig+0x56>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <TIM_TI1_SetConfig+0xc4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <TIM_TI1_SetConfig+0x56>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <TIM_TI1_SetConfig+0xc8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <TIM_TI1_SetConfig+0x56>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <TIM_TI1_SetConfig+0xcc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <TIM_TI1_SetConfig+0x5a>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <TIM_TI1_SetConfig+0x5c>
 8003af6:	2300      	movs	r3, #0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e003      	b.n	8003b16 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f023 030a 	bic.w	r3, r3, #10
 8003b30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f003 030a 	and.w	r3, r3, #10
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	621a      	str	r2, [r3, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40014000 	.word	0x40014000

08003b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f023 0201 	bic.w	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f023 030a 	bic.w	r3, r3, #10
 8003ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	621a      	str	r2, [r3, #32]
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b087      	sub	sp, #28
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0210 	bic.w	r2, r3, #16
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f023 0210 	bic.w	r2, r3, #16
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	031b      	lsls	r3, r3, #12
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f023 0303 	bic.w	r3, r3, #3
 8003cd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	621a      	str	r2, [r3, #32]
}
 8003d10:	bf00      	nop
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d5a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	031b      	lsls	r3, r3, #12
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	031b      	lsls	r3, r3, #12
 8003d74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f043 0307 	orr.w	r3, r3, #7
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	2201      	movs	r2, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	401a      	ands	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e050      	b.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d013      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10c      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40014000 	.word	0x40014000

08003f34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e03d      	b.n	8003fcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e042      	b.n	8004098 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fa6e 	bl	8001508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fddb 	bl	8004c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d175      	bne.n	80041ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_UART_Transmit+0x2c>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e06e      	b.n	80041ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2221      	movs	r2, #33	; 0x21
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040de:	f7fd fc75 	bl	80019cc <HAL_GetTick>
 80040e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	88fa      	ldrh	r2, [r7, #6]
 80040e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d108      	bne.n	800410c <HAL_UART_Transmit+0x6c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d104      	bne.n	800410c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	e003      	b.n	8004114 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004114:	e02e      	b.n	8004174 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fb3d 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e03a      	b.n	80041ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800414c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3302      	adds	r3, #2
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e007      	b.n	8004166 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	3301      	adds	r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1cb      	bne.n	8004116 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2200      	movs	r2, #0
 8004186:	2140      	movs	r1, #64	; 0x40
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fb09 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e006      	b.n	80041ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	4613      	mov	r3, r2
 80041c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d112      	bne.n	80041f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_UART_Receive_IT+0x26>
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e00b      	b.n	80041f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	461a      	mov	r2, r3
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fb30 	bl	8004852 <UART_Start_Receive_IT>
 80041f2:	4603      	mov	r3, r0
 80041f4:	e000      	b.n	80041f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b0ba      	sub	sp, #232	; 0xe8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800423e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_UART_IRQHandler+0x66>
 8004252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fc10 	bl	8004a84 <UART_Receive_IT>
      return;
 8004264:	e25b      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80de 	beq.w	800442c <HAL_UART_IRQHandler+0x22c>
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80d1 	beq.w	800442c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_UART_IRQHandler+0xae>
 8004296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f043 0201 	orr.w	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_UART_IRQHandler+0xd2>
 80042ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_UART_IRQHandler+0xf6>
 80042de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d011      	beq.n	8004326 <HAL_UART_IRQHandler+0x126>
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f043 0208 	orr.w	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 81f2 	beq.w	8004714 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_UART_IRQHandler+0x14e>
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fb9b 	bl	8004a84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_UART_IRQHandler+0x17a>
 8004372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04f      	beq.n	800441a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 faa3 	bl	80048c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d141      	bne.n	8004412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3314      	adds	r3, #20
 80043b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1d9      	bne.n	800438e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d013      	beq.n	800440a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	4a7e      	ldr	r2, [pc, #504]	; (80045e0 <HAL_UART_IRQHandler+0x3e0>)
 80043e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd fc79 	bl	8001ce6 <HAL_DMA_Abort_IT>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	e00e      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f994 	bl	8004738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	e00a      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f990 	bl	8004738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	e006      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f98c 	bl	8004738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004426:	e175      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	bf00      	nop
    return;
 800442a:	e173      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	2b01      	cmp	r3, #1
 8004432:	f040 814f 	bne.w	80046d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8148 	beq.w	80046d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8141 	beq.w	80046d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	f040 80b6 	bne.w	80045e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8145 	beq.w	8004718 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004496:	429a      	cmp	r2, r3
 8004498:	f080 813e 	bcs.w	8004718 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ae:	f000 8088 	beq.w	80045c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1d9      	bne.n	80044b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3314      	adds	r3, #20
 8004504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800450e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800452a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e1      	bne.n	80044fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800454a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800455e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800456c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e3      	bne.n	800453a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004592:	f023 0310 	bic.w	r3, r3, #16
 8004596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80045a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e3      	bne.n	8004580 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fd fb22 	bl	8001c06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f8b7 	bl	800474c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045de:	e09b      	b.n	8004718 <HAL_UART_IRQHandler+0x518>
 80045e0:	0800498d 	.word	0x0800498d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 808e 	beq.w	800471c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8089 	beq.w	800471c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800462e:	647a      	str	r2, [r7, #68]	; 0x44
 8004630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e3      	bne.n	800460a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	623b      	str	r3, [r7, #32]
   return(result);
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3314      	adds	r3, #20
 8004662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004666:	633a      	str	r2, [r7, #48]	; 0x30
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800466c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e3      	bne.n	8004642 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	60fb      	str	r3, [r7, #12]
   return(result);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0310 	bic.w	r3, r3, #16
 800469e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046ac:	61fa      	str	r2, [r7, #28]
 80046ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e3      	bne.n	8004688 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f83d 	bl	800474c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046d2:	e023      	b.n	800471c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <HAL_UART_IRQHandler+0x4f4>
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f961 	bl	80049b4 <UART_Transmit_IT>
    return;
 80046f2:	e014      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <HAL_UART_IRQHandler+0x51e>
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f9a1 	bl	8004a54 <UART_EndTransmit_IT>
    return;
 8004712:	e004      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
    return;
 8004714:	bf00      	nop
 8004716:	e002      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
      return;
 8004718:	bf00      	nop
 800471a:	e000      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
      return;
 800471c:	bf00      	nop
  }
}
 800471e:	37e8      	adds	r7, #232	; 0xe8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477a:	b2db      	uxtb	r3, r3
 800477c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004784:	b2db      	uxtb	r3, r3
 8004786:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4313      	orrs	r3, r2
 8004792:	b2db      	uxtb	r3, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b0:	e03b      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d037      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fd f907 	bl	80019cc <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	6a3a      	ldr	r2, [r7, #32]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e03a      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d023      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d020      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d01d      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d116      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f857 	bl	80048c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2208      	movs	r2, #8
 800481c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e00f      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d0b4      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	4613      	mov	r3, r2
 800485e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2222      	movs	r2, #34	; 0x22
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004896:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0220 	orr.w	r2, r2, #32
 80048b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b095      	sub	sp, #84	; 0x54
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	330c      	adds	r3, #12
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ee:	643a      	str	r2, [r7, #64]	; 0x40
 80048f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e5      	bne.n	80048ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	61fb      	str	r3, [r7, #28]
   return(result);
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	64bb      	str	r3, [r7, #72]	; 0x48
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3314      	adds	r3, #20
 8004920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004922:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	2b01      	cmp	r3, #1
 800493c:	d119      	bne.n	8004972 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	60bb      	str	r3, [r7, #8]
   return(result);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f023 0310 	bic.w	r3, r3, #16
 8004954:	647b      	str	r3, [r7, #68]	; 0x44
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	330c      	adds	r3, #12
 800495c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800495e:	61ba      	str	r2, [r7, #24]
 8004960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6979      	ldr	r1, [r7, #20]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	613b      	str	r3, [r7, #16]
   return(result);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e5      	bne.n	800493e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004980:	bf00      	nop
 8004982:	3754      	adds	r7, #84	; 0x54
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff fec6 	bl	8004738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b21      	cmp	r3, #33	; 0x21
 80049c6:	d13e      	bne.n	8004a46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d0:	d114      	bne.n	80049fc <UART_Transmit_IT+0x48>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d110      	bne.n	80049fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	1c9a      	adds	r2, r3, #2
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]
 80049fa:	e008      	b.n	8004a0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	1c59      	adds	r1, r3, #1
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6211      	str	r1, [r2, #32]
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10f      	bne.n	8004a42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fe55 	bl	8004724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08c      	sub	sp, #48	; 0x30
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b22      	cmp	r3, #34	; 0x22
 8004a96:	f040 80ae 	bne.w	8004bf6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d117      	bne.n	8004ad4 <UART_Receive_IT+0x50>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d113      	bne.n	8004ad4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad2:	e026      	b.n	8004b22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae6:	d007      	beq.n	8004af8 <UART_Receive_IT+0x74>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <UART_Receive_IT+0x82>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e008      	b.n	8004b18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d15d      	bne.n	8004bf2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0220 	bic.w	r2, r2, #32
 8004b44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d135      	bne.n	8004be8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	330c      	adds	r3, #12
 8004b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	613b      	str	r3, [r7, #16]
   return(result);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f023 0310 	bic.w	r3, r3, #16
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	623a      	str	r2, [r7, #32]
 8004ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	69f9      	ldr	r1, [r7, #28]
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e5      	bne.n	8004b82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d10a      	bne.n	8004bda <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fdb3 	bl	800474c <HAL_UARTEx_RxEventCallback>
 8004be6:	e002      	b.n	8004bee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fc fd43 	bl	8001674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e002      	b.n	8004bf8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e000      	b.n	8004bf8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
  }
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3730      	adds	r7, #48	; 0x30
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c04:	b0c0      	sub	sp, #256	; 0x100
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1c:	68d9      	ldr	r1, [r3, #12]
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	ea40 0301 	orr.w	r3, r0, r1
 8004c28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c58:	f021 010c 	bic.w	r1, r1, #12
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c66:	430b      	orrs	r3, r1
 8004c68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	6999      	ldr	r1, [r3, #24]
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	ea40 0301 	orr.w	r3, r0, r1
 8004c86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b8f      	ldr	r3, [pc, #572]	; (8004ecc <UART_SetConfig+0x2cc>)
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d005      	beq.n	8004ca0 <UART_SetConfig+0xa0>
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b8d      	ldr	r3, [pc, #564]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d104      	bne.n	8004caa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ca0:	f7fd fe26 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8004ca4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ca8:	e003      	b.n	8004cb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004caa:	f7fd fe0d 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8004cae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbc:	f040 810c 	bne.w	8004ed8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	1891      	adds	r1, r2, r2
 8004cd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cda:	415b      	adcs	r3, r3
 8004cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	eb12 0801 	adds.w	r8, r2, r1
 8004ce8:	4629      	mov	r1, r5
 8004cea:	eb43 0901 	adc.w	r9, r3, r1
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d02:	4690      	mov	r8, r2
 8004d04:	4699      	mov	r9, r3
 8004d06:	4623      	mov	r3, r4
 8004d08:	eb18 0303 	adds.w	r3, r8, r3
 8004d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d10:	462b      	mov	r3, r5
 8004d12:	eb49 0303 	adc.w	r3, r9, r3
 8004d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d2e:	460b      	mov	r3, r1
 8004d30:	18db      	adds	r3, r3, r3
 8004d32:	653b      	str	r3, [r7, #80]	; 0x50
 8004d34:	4613      	mov	r3, r2
 8004d36:	eb42 0303 	adc.w	r3, r2, r3
 8004d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d44:	f7fb fe36 	bl	80009b4 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	011c      	lsls	r4, r3, #4
 8004d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d68:	4642      	mov	r2, r8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	1891      	adds	r1, r2, r2
 8004d6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d70:	415b      	adcs	r3, r3
 8004d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d78:	4641      	mov	r1, r8
 8004d7a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d7e:	4649      	mov	r1, r9
 8004d80:	eb43 0b01 	adc.w	fp, r3, r1
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d98:	4692      	mov	sl, r2
 8004d9a:	469b      	mov	fp, r3
 8004d9c:	4643      	mov	r3, r8
 8004d9e:	eb1a 0303 	adds.w	r3, sl, r3
 8004da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004da6:	464b      	mov	r3, r9
 8004da8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	18db      	adds	r3, r3, r3
 8004dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dca:	4613      	mov	r3, r2
 8004dcc:	eb42 0303 	adc.w	r3, r2, r3
 8004dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dda:	f7fb fdeb 	bl	80009b4 <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004de6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	2264      	movs	r2, #100	; 0x64
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	1acb      	subs	r3, r1, r3
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dfa:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004dfc:	fba3 2302 	umull	r2, r3, r3, r2
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e08:	441c      	add	r4, r3
 8004e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	1891      	adds	r1, r2, r2
 8004e22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e24:	415b      	adcs	r3, r3
 8004e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	1851      	adds	r1, r2, r1
 8004e30:	6339      	str	r1, [r7, #48]	; 0x30
 8004e32:	4649      	mov	r1, r9
 8004e34:	414b      	adcs	r3, r1
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e44:	4659      	mov	r1, fp
 8004e46:	00cb      	lsls	r3, r1, #3
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4e:	4651      	mov	r1, sl
 8004e50:	00ca      	lsls	r2, r1, #3
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	4642      	mov	r2, r8
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e60:	464b      	mov	r3, r9
 8004e62:	460a      	mov	r2, r1
 8004e64:	eb42 0303 	adc.w	r3, r2, r3
 8004e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e80:	460b      	mov	r3, r1
 8004e82:	18db      	adds	r3, r3, r3
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e86:	4613      	mov	r3, r2
 8004e88:	eb42 0303 	adc.w	r3, r2, r3
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e96:	f7fb fd8d 	bl	80009b4 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	2164      	movs	r1, #100	; 0x64
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	3332      	adds	r3, #50	; 0x32
 8004eb2:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	f003 0207 	and.w	r2, r3, #7
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4422      	add	r2, r4
 8004ec6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ec8:	e106      	b.n	80050d8 <UART_SetConfig+0x4d8>
 8004eca:	bf00      	nop
 8004ecc:	40011000 	.word	0x40011000
 8004ed0:	40011400 	.word	0x40011400
 8004ed4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ee2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ee6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eea:	4642      	mov	r2, r8
 8004eec:	464b      	mov	r3, r9
 8004eee:	1891      	adds	r1, r2, r2
 8004ef0:	6239      	str	r1, [r7, #32]
 8004ef2:	415b      	adcs	r3, r3
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004efa:	4641      	mov	r1, r8
 8004efc:	1854      	adds	r4, r2, r1
 8004efe:	4649      	mov	r1, r9
 8004f00:	eb43 0501 	adc.w	r5, r3, r1
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	00eb      	lsls	r3, r5, #3
 8004f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f12:	00e2      	lsls	r2, r4, #3
 8004f14:	4614      	mov	r4, r2
 8004f16:	461d      	mov	r5, r3
 8004f18:	4643      	mov	r3, r8
 8004f1a:	18e3      	adds	r3, r4, r3
 8004f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f20:	464b      	mov	r3, r9
 8004f22:	eb45 0303 	adc.w	r3, r5, r3
 8004f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f46:	4629      	mov	r1, r5
 8004f48:	008b      	lsls	r3, r1, #2
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f50:	4621      	mov	r1, r4
 8004f52:	008a      	lsls	r2, r1, #2
 8004f54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f58:	f7fb fd2c 	bl	80009b4 <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4b60      	ldr	r3, [pc, #384]	; (80050e4 <UART_SetConfig+0x4e4>)
 8004f62:	fba3 2302 	umull	r2, r3, r3, r2
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	011c      	lsls	r4, r3, #4
 8004f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	1891      	adds	r1, r2, r2
 8004f82:	61b9      	str	r1, [r7, #24]
 8004f84:	415b      	adcs	r3, r3
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	1851      	adds	r1, r2, r1
 8004f90:	6139      	str	r1, [r7, #16]
 8004f92:	4649      	mov	r1, r9
 8004f94:	414b      	adcs	r3, r1
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	00cb      	lsls	r3, r1, #3
 8004fa8:	4651      	mov	r1, sl
 8004faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fae:	4651      	mov	r1, sl
 8004fb0:	00ca      	lsls	r2, r1, #3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4642      	mov	r2, r8
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	eb42 0303 	adc.w	r3, r2, r3
 8004fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	008b      	lsls	r3, r1, #2
 8004fe8:	4641      	mov	r1, r8
 8004fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fee:	4641      	mov	r1, r8
 8004ff0:	008a      	lsls	r2, r1, #2
 8004ff2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ff6:	f7fb fcdd 	bl	80009b4 <__aeabi_uldivmod>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	4b38      	ldr	r3, [pc, #224]	; (80050e4 <UART_SetConfig+0x4e4>)
 8005002:	fba3 2301 	umull	r2, r3, r3, r1
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2264      	movs	r2, #100	; 0x64
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	1acb      	subs	r3, r1, r3
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	3332      	adds	r3, #50	; 0x32
 8005014:	4a33      	ldr	r2, [pc, #204]	; (80050e4 <UART_SetConfig+0x4e4>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005020:	441c      	add	r4, r3
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	673b      	str	r3, [r7, #112]	; 0x70
 800502a:	677a      	str	r2, [r7, #116]	; 0x74
 800502c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	1891      	adds	r1, r2, r2
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	415b      	adcs	r3, r3
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005040:	4641      	mov	r1, r8
 8005042:	1851      	adds	r1, r2, r1
 8005044:	6039      	str	r1, [r7, #0]
 8005046:	4649      	mov	r1, r9
 8005048:	414b      	adcs	r3, r1
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005058:	4659      	mov	r1, fp
 800505a:	00cb      	lsls	r3, r1, #3
 800505c:	4651      	mov	r1, sl
 800505e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005062:	4651      	mov	r1, sl
 8005064:	00ca      	lsls	r2, r1, #3
 8005066:	4610      	mov	r0, r2
 8005068:	4619      	mov	r1, r3
 800506a:	4603      	mov	r3, r0
 800506c:	4642      	mov	r2, r8
 800506e:	189b      	adds	r3, r3, r2
 8005070:	66bb      	str	r3, [r7, #104]	; 0x68
 8005072:	464b      	mov	r3, r9
 8005074:	460a      	mov	r2, r1
 8005076:	eb42 0303 	adc.w	r3, r2, r3
 800507a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	663b      	str	r3, [r7, #96]	; 0x60
 8005086:	667a      	str	r2, [r7, #100]	; 0x64
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005094:	4649      	mov	r1, r9
 8005096:	008b      	lsls	r3, r1, #2
 8005098:	4641      	mov	r1, r8
 800509a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800509e:	4641      	mov	r1, r8
 80050a0:	008a      	lsls	r2, r1, #2
 80050a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050a6:	f7fb fc85 	bl	80009b4 <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <UART_SetConfig+0x4e4>)
 80050b0:	fba3 1302 	umull	r1, r3, r3, r2
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	2164      	movs	r1, #100	; 0x64
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	3332      	adds	r3, #50	; 0x32
 80050c2:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <UART_SetConfig+0x4e4>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	f003 020f 	and.w	r2, r3, #15
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4422      	add	r2, r4
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	bf00      	nop
 80050da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050de:	46bd      	mov	sp, r7
 80050e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e4:	51eb851f 	.word	0x51eb851f

080050e8 <memset>:
 80050e8:	4402      	add	r2, r0
 80050ea:	4603      	mov	r3, r0
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d100      	bne.n	80050f2 <memset+0xa>
 80050f0:	4770      	bx	lr
 80050f2:	f803 1b01 	strb.w	r1, [r3], #1
 80050f6:	e7f9      	b.n	80050ec <memset+0x4>

080050f8 <__libc_init_array>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	4d0d      	ldr	r5, [pc, #52]	; (8005130 <__libc_init_array+0x38>)
 80050fc:	4c0d      	ldr	r4, [pc, #52]	; (8005134 <__libc_init_array+0x3c>)
 80050fe:	1b64      	subs	r4, r4, r5
 8005100:	10a4      	asrs	r4, r4, #2
 8005102:	2600      	movs	r6, #0
 8005104:	42a6      	cmp	r6, r4
 8005106:	d109      	bne.n	800511c <__libc_init_array+0x24>
 8005108:	4d0b      	ldr	r5, [pc, #44]	; (8005138 <__libc_init_array+0x40>)
 800510a:	4c0c      	ldr	r4, [pc, #48]	; (800513c <__libc_init_array+0x44>)
 800510c:	f000 f818 	bl	8005140 <_init>
 8005110:	1b64      	subs	r4, r4, r5
 8005112:	10a4      	asrs	r4, r4, #2
 8005114:	2600      	movs	r6, #0
 8005116:	42a6      	cmp	r6, r4
 8005118:	d105      	bne.n	8005126 <__libc_init_array+0x2e>
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005120:	4798      	blx	r3
 8005122:	3601      	adds	r6, #1
 8005124:	e7ee      	b.n	8005104 <__libc_init_array+0xc>
 8005126:	f855 3b04 	ldr.w	r3, [r5], #4
 800512a:	4798      	blx	r3
 800512c:	3601      	adds	r6, #1
 800512e:	e7f2      	b.n	8005116 <__libc_init_array+0x1e>
 8005130:	08005180 	.word	0x08005180
 8005134:	08005180 	.word	0x08005180
 8005138:	08005180 	.word	0x08005180
 800513c:	08005184 	.word	0x08005184

08005140 <_init>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr

0800514c <_fini>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr
