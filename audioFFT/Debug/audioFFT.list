
audioFFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005014  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013478  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018624  08018624  00030010  2**0
                  CONTENTS
  4 .ARM          00000008  08018624  08018624  00028624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801862c  0801862c  00030010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801862c  0801862c  0002862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018630  08018630  00028630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08018634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000556c  20000010  08018644  00030010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000557c  08018644  0003557c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001071d  00000000  00000000  000300f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026fb  00000000  00000000  0004080e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00042f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b81  00000000  00000000  00043e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017dd6  00000000  00000000  00044a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012911  00000000  00000000  0005c7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b465  00000000  00000000  0006f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040e0  00000000  00000000  0010a560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a9c  00000000  00000000  0010e6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  00111147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005194 	.word	0x08005194

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005194 	.word	0x08005194

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b970 	b.w	8000590 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9e08      	ldr	r6, [sp, #32]
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	460f      	mov	r7, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14a      	bne.n	800036e <__udivmoddi4+0xa6>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d965      	bls.n	80003aa <__udivmoddi4+0xe2>
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	b143      	cbz	r3, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa20 f202 	lsr.w	r2, r0, r2
 80002f2:	4317      	orrs	r7, r2
 80002f4:	409c      	lsls	r4, r3
 80002f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fa:	fa1f f58c 	uxth.w	r5, ip
 80002fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000302:	0c22      	lsrs	r2, r4, #16
 8000304:	fb0e 7711 	mls	r7, lr, r1, r7
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	fb01 f005 	mul.w	r0, r1, r5
 8000310:	4290      	cmp	r0, r2
 8000312:	d90a      	bls.n	800032a <__udivmoddi4+0x62>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	f080 811c 	bcs.w	8000558 <__udivmoddi4+0x290>
 8000320:	4290      	cmp	r0, r2
 8000322:	f240 8119 	bls.w	8000558 <__udivmoddi4+0x290>
 8000326:	3902      	subs	r1, #2
 8000328:	4462      	add	r2, ip
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	b2a4      	uxth	r4, r4
 800032e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000332:	fb0e 2210 	mls	r2, lr, r0, r2
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	fb00 f505 	mul.w	r5, r0, r5
 800033e:	42a5      	cmp	r5, r4
 8000340:	d90a      	bls.n	8000358 <__udivmoddi4+0x90>
 8000342:	eb1c 0404 	adds.w	r4, ip, r4
 8000346:	f100 32ff 	add.w	r2, r0, #4294967295
 800034a:	f080 8107 	bcs.w	800055c <__udivmoddi4+0x294>
 800034e:	42a5      	cmp	r5, r4
 8000350:	f240 8104 	bls.w	800055c <__udivmoddi4+0x294>
 8000354:	4464      	add	r4, ip
 8000356:	3802      	subs	r0, #2
 8000358:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	2100      	movs	r1, #0
 8000360:	b11e      	cbz	r6, 800036a <__udivmoddi4+0xa2>
 8000362:	40dc      	lsrs	r4, r3
 8000364:	2300      	movs	r3, #0
 8000366:	e9c6 4300 	strd	r4, r3, [r6]
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	428b      	cmp	r3, r1
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0xbc>
 8000372:	2e00      	cmp	r6, #0
 8000374:	f000 80ed 	beq.w	8000552 <__udivmoddi4+0x28a>
 8000378:	2100      	movs	r1, #0
 800037a:	e9c6 0500 	strd	r0, r5, [r6]
 800037e:	4608      	mov	r0, r1
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d149      	bne.n	8000420 <__udivmoddi4+0x158>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d302      	bcc.n	8000396 <__udivmoddi4+0xce>
 8000390:	4282      	cmp	r2, r0
 8000392:	f200 80f8 	bhi.w	8000586 <__udivmoddi4+0x2be>
 8000396:	1a84      	subs	r4, r0, r2
 8000398:	eb65 0203 	sbc.w	r2, r5, r3
 800039c:	2001      	movs	r0, #1
 800039e:	4617      	mov	r7, r2
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d0e2      	beq.n	800036a <__udivmoddi4+0xa2>
 80003a4:	e9c6 4700 	strd	r4, r7, [r6]
 80003a8:	e7df      	b.n	800036a <__udivmoddi4+0xa2>
 80003aa:	b902      	cbnz	r2, 80003ae <__udivmoddi4+0xe6>
 80003ac:	deff      	udf	#255	; 0xff
 80003ae:	fab2 f382 	clz	r3, r2
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x210>
 80003b8:	1a8a      	subs	r2, r1, r2
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2101      	movs	r1, #1
 80003c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c8:	fb07 2015 	mls	r0, r7, r5, r2
 80003cc:	0c22      	lsrs	r2, r4, #16
 80003ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d2:	fb0e f005 	mul.w	r0, lr, r5
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x124>
 80003da:	eb1c 0202 	adds.w	r2, ip, r2
 80003de:	f105 38ff 	add.w	r8, r5, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x122>
 80003e4:	4290      	cmp	r0, r2
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2b8>
 80003ea:	4645      	mov	r5, r8
 80003ec:	1a12      	subs	r2, r2, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f4:	fb07 2210 	mls	r2, r7, r0, r2
 80003f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x14e>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x14c>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2c2>
 8000414:	4610      	mov	r0, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800041e:	e79f      	b.n	8000360 <__udivmoddi4+0x98>
 8000420:	f1c1 0720 	rsb	r7, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa05 f401 	lsl.w	r4, r5, r1
 8000432:	fa20 f307 	lsr.w	r3, r0, r7
 8000436:	40fd      	lsrs	r5, r7
 8000438:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	fb09 5518 	mls	r5, r9, r8, r5
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000450:	fb08 f50e 	mul.w	r5, r8, lr
 8000454:	42a5      	cmp	r5, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	fa00 f001 	lsl.w	r0, r0, r1
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b0>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2b4>
 800046c:	42a5      	cmp	r5, r4
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2b4>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4464      	add	r4, ip
 8000478:	1b64      	subs	r4, r4, r5
 800047a:	b29d      	uxth	r5, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000488:	fb03 fe0e 	mul.w	lr, r3, lr
 800048c:	45a6      	cmp	lr, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1da>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f103 35ff 	add.w	r5, r3, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2ac>
 800049a:	45a6      	cmp	lr, r4
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2ac>
 800049e:	3b02      	subs	r3, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004a6:	fba3 9502 	umull	r9, r5, r3, r2
 80004aa:	eba4 040e 	sub.w	r4, r4, lr
 80004ae:	42ac      	cmp	r4, r5
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46ae      	mov	lr, r5
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x29c>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x298>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x208>
 80004ba:	ebb0 0208 	subs.w	r2, r0, r8
 80004be:	eb64 040e 	sbc.w	r4, r4, lr
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40ca      	lsrs	r2, r1
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	4317      	orrs	r7, r2
 80004cc:	e9c6 7400 	strd	r7, r4, [r6]
 80004d0:	4618      	mov	r0, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	f1c3 0120 	rsb	r1, r3, #32
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	fa20 f201 	lsr.w	r2, r0, r1
 80004e4:	fa25 f101 	lsr.w	r1, r5, r1
 80004e8:	409d      	lsls	r5, r3
 80004ea:	432a      	orrs	r2, r5
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f8:	fb07 1510 	mls	r5, r7, r0, r1
 80004fc:	0c11      	lsrs	r1, r2, #16
 80004fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000502:	fb00 f50e 	mul.w	r5, r0, lr
 8000506:	428d      	cmp	r5, r1
 8000508:	fa04 f403 	lsl.w	r4, r4, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x258>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b0>
 8000518:	428d      	cmp	r5, r1
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b0>
 800051c:	3802      	subs	r0, #2
 800051e:	4461      	add	r1, ip
 8000520:	1b49      	subs	r1, r1, r5
 8000522:	b292      	uxth	r2, r2
 8000524:	fbb1 f5f7 	udiv	r5, r1, r7
 8000528:	fb07 1115 	mls	r1, r7, r5, r1
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	fb05 f10e 	mul.w	r1, r5, lr
 8000534:	4291      	cmp	r1, r2
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x282>
 8000538:	eb1c 0202 	adds.w	r2, ip, r2
 800053c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2a8>
 8000542:	4291      	cmp	r1, r2
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2a8>
 8000546:	3d02      	subs	r5, #2
 8000548:	4462      	add	r2, ip
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0xfc>
 8000552:	4631      	mov	r1, r6
 8000554:	4630      	mov	r0, r6
 8000556:	e708      	b.n	800036a <__udivmoddi4+0xa2>
 8000558:	4639      	mov	r1, r7
 800055a:	e6e6      	b.n	800032a <__udivmoddi4+0x62>
 800055c:	4610      	mov	r0, r2
 800055e:	e6fb      	b.n	8000358 <__udivmoddi4+0x90>
 8000560:	4548      	cmp	r0, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f0>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb65 0e0c 	sbc.w	lr, r5, ip
 800056c:	3b01      	subs	r3, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f0>
 8000570:	4645      	mov	r5, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x282>
 8000574:	462b      	mov	r3, r5
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1da>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x258>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b0>
 8000580:	3d02      	subs	r5, #2
 8000582:	4462      	add	r2, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x124>
 8000586:	4608      	mov	r0, r1
 8000588:	e70a      	b.n	80003a0 <__udivmoddi4+0xd8>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x14e>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_TIM_PeriodElapsedCallback>:
#define SamplesFFT 2048
uint16_t adcValue[SamplesFFT];
float32_t input[SamplesFFT];
float32_t output[SamplesFFT];
uint32_t doConvert = SamplesFFT;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
   if(doConvert > 0) doConvert--;
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d004      	beq.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x1a>
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80005c6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fdf4 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f8e4 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fa2c 	bl	8000a2c <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 fa0a 	bl	80009ec <MX_DMA_Init>
  MX_ADC1_Init();
 80005d8:	f000 f93c 	bl	8000854 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005dc:	f000 f98c 	bl	80008f8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80005e0:	f000 f9b8 	bl	8000954 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  arm_rfft_fast_instance_f32 fftInstance;
  HAL_ADC_Start_DMA(&hadc1, adcValue, SamplesFFT);
 80005e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e8:	4965      	ldr	r1, [pc, #404]	; (8000780 <main+0x1c0>)
 80005ea:	4866      	ldr	r0, [pc, #408]	; (8000784 <main+0x1c4>)
 80005ec:	f000 febc 	bl	8001368 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 80005f0:	4865      	ldr	r0, [pc, #404]	; (8000788 <main+0x1c8>)
 80005f2:	f003 f9d9 	bl	80039a8 <HAL_TIM_Base_Start_IT>
  ssd1306_Init();
 80005f6:	f000 faab 	bl	8000b50 <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     //2048개의 ADC가 완료되면
     if(doConvert == 0){
 80005fa:	4b64      	ldr	r3, [pc, #400]	; (800078c <main+0x1cc>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1fb      	bne.n	80005fa <main+0x3a>
        //FFT준비
        for(int i=0; i<SamplesFFT; i+=2){
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000608:	e021      	b.n	800064e <main+0x8e>
           input[i] = (float32_t)adcValue[i/2];
 800060a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800060e:	0fda      	lsrs	r2, r3, #31
 8000610:	4413      	add	r3, r2
 8000612:	105b      	asrs	r3, r3, #1
 8000614:	461a      	mov	r2, r3
 8000616:	4b5a      	ldr	r3, [pc, #360]	; (8000780 <main+0x1c0>)
 8000618:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800061c:	ee07 3a90 	vmov	s15, r3
 8000620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000624:	4a5a      	ldr	r2, [pc, #360]	; (8000790 <main+0x1d0>)
 8000626:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	edc3 7a00 	vstr	s15, [r3]
           input[i+1]=0;
 8000632:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000636:	3301      	adds	r3, #1
 8000638:	4a55      	ldr	r2, [pc, #340]	; (8000790 <main+0x1d0>)
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	f04f 0200 	mov.w	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
        for(int i=0; i<SamplesFFT; i+=2){
 8000644:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000648:	3302      	adds	r3, #2
 800064a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800064e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000656:	dbd8      	blt.n	800060a <main+0x4a>
        }

        arm_rfft_fast_init_f32(&fftInstance, SamplesFFT);
 8000658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800065c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fd8b 	bl	800417c <arm_rfft_fast_init_f32>
        arm_rfft_fast_f32(&fftInstance, input, output, 0);
 8000666:	f507 7000 	add.w	r0, r7, #512	; 0x200
 800066a:	2300      	movs	r3, #0
 800066c:	4a49      	ldr	r2, [pc, #292]	; (8000794 <main+0x1d4>)
 800066e:	4948      	ldr	r1, [pc, #288]	; (8000790 <main+0x1d0>)
 8000670:	f003 fe06 	bl	8004280 <arm_rfft_fast_f32>
        //출력 결과를 128개로 분할
        uint32_t showData[128]={0, };
 8000674:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000678:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800067c:	4618      	mov	r0, r3
 800067e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000682:	461a      	mov	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f004 fd59 	bl	800513c <memset>
        for(int i=0; i<128; i++){
 800068a:	2300      	movs	r3, #0
 800068c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000690:	e047      	b.n	8000722 <main+0x162>
           for(int j=0; j<8; j++){
 8000692:	2300      	movs	r3, #0
 8000694:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000698:	e029      	b.n	80006ee <main+0x12e>
              showData[i]+=output[i*8+j];
 800069a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800069e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80006a2:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80006a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006aa:	ee07 3a90 	vmov	s15, r3
 80006ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80006b6:	00da      	lsls	r2, r3, #3
 80006b8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80006bc:	4413      	add	r3, r2
 80006be:	4a35      	ldr	r2, [pc, #212]	; (8000794 <main+0x1d4>)
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	edd3 7a00 	vldr	s15, [r3]
 80006c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d0:	ee17 1a90 	vmov	r1, s15
 80006d4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006d8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80006dc:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80006e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
           for(int j=0; j<8; j++){
 80006e4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80006e8:	3301      	adds	r3, #1
 80006ea:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80006ee:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	ddd1      	ble.n	800069a <main+0xda>
           }
           showData[i]/=32;
 80006f6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006fa:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80006fe:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8000702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000706:	0959      	lsrs	r1, r3, #5
 8000708:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800070c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000710:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8000714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(int i=0; i<128; i++){
 8000718:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800071c:	3301      	adds	r3, #1
 800071e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8000722:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000726:	2b7f      	cmp	r3, #127	; 0x7f
 8000728:	ddb3      	ble.n	8000692 <main+0xd2>
        }
        //OLED표시
        ssd1306_Fill(0);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fa7a 	bl	8000c24 <ssd1306_Fill>
        for(int i=2; i<128; i++){
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000736:	e01c      	b.n	8000772 <main+0x1b2>
           ssd1306_Line(i, 63, i, 64-showData[i],1);
 8000738:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800073c:	b2d8      	uxtb	r0, r3
 800073e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000742:	b2d9      	uxtb	r1, r3
 8000744:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000748:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800074c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2201      	movs	r2, #1
 800075e:	9200      	str	r2, [sp, #0]
 8000760:	460a      	mov	r2, r1
 8000762:	213f      	movs	r1, #63	; 0x3f
 8000764:	f000 fafe 	bl	8000d64 <ssd1306_Line>
        for(int i=2; i<128; i++){
 8000768:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800076c:	3301      	adds	r3, #1
 800076e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000772:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000776:	2b7f      	cmp	r3, #127	; 0x7f
 8000778:	ddde      	ble.n	8000738 <main+0x178>
        }
        ssd1306_UpdateScreen();
 800077a:	f000 fa77 	bl	8000c6c <ssd1306_UpdateScreen>
     if(doConvert == 0){
 800077e:	e73c      	b.n	80005fa <main+0x3a>
 8000780:	20000170 	.word	0x20000170
 8000784:	2000002c 	.word	0x2000002c
 8000788:	20000128 	.word	0x20000128
 800078c:	20000000 	.word	0x20000000
 8000790:	20001170 	.word	0x20001170
 8000794:	20003170 	.word	0x20003170

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 fcc8 	bl	800513c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <SystemClock_Config+0xb4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <SystemClock_Config+0xb4>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <SystemClock_Config+0xb4>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <SystemClock_Config+0xb8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <SystemClock_Config+0xb8>)
 80007e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <SystemClock_Config+0xb8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2310      	movs	r3, #16
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000800:	2300      	movs	r3, #0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fc39 	bl	8003080 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000814:	f000 f94e 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fe9c 	bl	8003570 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800083e:	f000 f939 	bl	8000ab4 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <MX_ADC1_Init+0xa0>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000880:	2201      	movs	r2, #1
 8000882:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800088e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_ADC1_Init+0x9c>)
 8000896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b6:	480e      	ldr	r0, [pc, #56]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008b8:	f000 fd12 	bl	80012e0 <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80008c2:	f000 f8f7 	bl	8000ab4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <MX_ADC1_Init+0x9c>)
 80008d8:	f000 fe54 	bl	8001584 <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008e2:	f000 f8e7 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000002c 	.word	0x2000002c
 80008f4:	40012000 	.word	0x40012000

080008f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C1_Init+0x50>)
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <MX_I2C1_Init+0x54>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C1_Init+0x50>)
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_I2C1_Init+0x58>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_I2C1_Init+0x50>)
 8000916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_I2C1_Init+0x50>)
 8000936:	f001 fef5 	bl	8002724 <HAL_I2C_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000940:	f000 f8b8 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000d4 	.word	0x200000d4
 800094c:	40005400 	.word	0x40005400
 8000950:	00061a80 	.word	0x00061a80

08000954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_TIM3_Init+0x90>)
 8000972:	4a1d      	ldr	r2, [pc, #116]	; (80009e8 <MX_TIM3_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM3_Init+0x90>)
 8000978:	2263      	movs	r2, #99	; 0x63
 800097a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_TIM3_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25-1;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_TIM3_Init+0x90>)
 8000984:	2218      	movs	r2, #24
 8000986:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_TIM3_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_TIM3_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_TIM3_Init+0x90>)
 8000996:	f002 ffb7 	bl	8003908 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80009a0:	f000 f888 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_TIM3_Init+0x90>)
 80009b2:	f003 f94b 	bl	8003c4c <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80009bc:	f000 f87a 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009c0:	2320      	movs	r3, #32
 80009c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_TIM3_Init+0x90>)
 80009ce:	f003 fb53 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80009d8:	f000 f86c 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000128 	.word	0x20000128
 80009e8:	40000400 	.word	0x40000400

080009ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_DMA_Init+0x3c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <MX_DMA_Init+0x3c>)
 80009fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_DMA_Init+0x3c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2038      	movs	r0, #56	; 0x38
 8000a14:	f001 f941 	bl	8001c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a18:	2038      	movs	r0, #56	; 0x38
 8000a1a:	f001 f95a 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_GPIO_Init+0x80>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a18      	ldr	r2, [pc, #96]	; (8000aac <MX_GPIO_Init+0x80>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_GPIO_Init+0x80>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_GPIO_Init+0x80>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <MX_GPIO_Init+0x80>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_GPIO_Init+0x80>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a80:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <MX_GPIO_Init+0x84>)
 8000a82:	f001 fe35 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OledReset_Pin */
  GPIO_InitStruct.Pin = OledReset_Pin;
 8000a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OledReset_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_GPIO_Init+0x84>)
 8000aa0:	f001 fca2 	bl	80023e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <ssd1306_Reset>:
#include <string.h>  // For memcpy
#include "main.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <ssd1306_Reset+0x28>)
 8000acc:	f001 fe10 	bl	80026f0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f000 fbe1 	bl	8001298 <HAL_Delay>
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <ssd1306_Reset+0x28>)
 8000ade:	f001 fe07 	bl	80026f0 <HAL_GPIO_WritePin>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40020000 	.word	0x40020000

08000aec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af04      	add	r7, sp, #16
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2301      	movs	r3, #1
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2301      	movs	r3, #1
 8000b06:	2200      	movs	r2, #0
 8000b08:	2178      	movs	r1, #120	; 0x78
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <ssd1306_WriteCommand+0x2c>)
 8000b0c:	f001 ff4e 	bl	80029ac <HAL_I2C_Mem_Write>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000d4 	.word	0x200000d4

08000b1c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af04      	add	r7, sp, #16
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2e:	9202      	str	r2, [sp, #8]
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2301      	movs	r3, #1
 8000b38:	2240      	movs	r2, #64	; 0x40
 8000b3a:	2178      	movs	r1, #120	; 0x78
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <ssd1306_WriteData+0x30>)
 8000b3e:	f001 ff35 	bl	80029ac <HAL_I2C_Mem_Write>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000d4 	.word	0x200000d4

08000b50 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b54:	f7ff ffb4 	bl	8000ac0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b58:	2064      	movs	r0, #100	; 0x64
 8000b5a:	f000 fb9d 	bl	8001298 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f980 	bl	8000e64 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b64:	2020      	movs	r0, #32
 8000b66:	f7ff ffc1 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ffbe 	bl	8000aec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b70:	20b0      	movs	r0, #176	; 0xb0
 8000b72:	f7ff ffbb 	bl	8000aec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b76:	20c8      	movs	r0, #200	; 0xc8
 8000b78:	f7ff ffb8 	bl	8000aec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff ffb5 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b82:	2010      	movs	r0, #16
 8000b84:	f7ff ffb2 	bl	8000aec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000b88:	2040      	movs	r0, #64	; 0x40
 8000b8a:	f7ff ffaf 	bl	8000aec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000b8e:	20ff      	movs	r0, #255	; 0xff
 8000b90:	f000 f954 	bl	8000e3c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000b94:	20a1      	movs	r0, #161	; 0xa1
 8000b96:	f7ff ffa9 	bl	8000aec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000b9a:	20a6      	movs	r0, #166	; 0xa6
 8000b9c:	f7ff ffa6 	bl	8000aec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ba0:	20a8      	movs	r0, #168	; 0xa8
 8000ba2:	f7ff ffa3 	bl	8000aec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000ba6:	203f      	movs	r0, #63	; 0x3f
 8000ba8:	f7ff ffa0 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bac:	20a4      	movs	r0, #164	; 0xa4
 8000bae:	f7ff ff9d 	bl	8000aec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bb2:	20d3      	movs	r0, #211	; 0xd3
 8000bb4:	f7ff ff9a 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff ff97 	bl	8000aec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bbe:	20d5      	movs	r0, #213	; 0xd5
 8000bc0:	f7ff ff94 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bc4:	20f0      	movs	r0, #240	; 0xf0
 8000bc6:	f7ff ff91 	bl	8000aec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bca:	20d9      	movs	r0, #217	; 0xd9
 8000bcc:	f7ff ff8e 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000bd0:	2022      	movs	r0, #34	; 0x22
 8000bd2:	f7ff ff8b 	bl	8000aec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bd6:	20da      	movs	r0, #218	; 0xda
 8000bd8:	f7ff ff88 	bl	8000aec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bdc:	2012      	movs	r0, #18
 8000bde:	f7ff ff85 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000be2:	20db      	movs	r0, #219	; 0xdb
 8000be4:	f7ff ff82 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000be8:	2020      	movs	r0, #32
 8000bea:	f7ff ff7f 	bl	8000aec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000bee:	208d      	movs	r0, #141	; 0x8d
 8000bf0:	f7ff ff7c 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000bf4:	2014      	movs	r0, #20
 8000bf6:	f7ff ff79 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 f932 	bl	8000e64 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 f80f 	bl	8000c24 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c06:	f000 f831 	bl	8000c6c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <ssd1306_Init+0xd0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <ssd1306_Init+0xd0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c16:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <ssd1306_Init+0xd0>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	711a      	strb	r2, [r3, #4]
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20005570 	.word	0x20005570

08000c24 <ssd1306_Fill>:
{
	ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	e00d      	b.n	8000c50 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <ssd1306_Fill+0x1a>
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	e000      	b.n	8000c40 <ssd1306_Fill+0x1c>
 8000c3e:	21ff      	movs	r1, #255	; 0xff
 8000c40:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <ssd1306_Fill+0x44>)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4413      	add	r3, r2
 8000c46:	460a      	mov	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c56:	d3ed      	bcc.n	8000c34 <ssd1306_Fill+0x10>
    }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20005170 	.word	0x20005170

08000c6c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	e016      	b.n	8000ca6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3b50      	subs	r3, #80	; 0x50
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff34 	bl	8000aec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x02);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff ff31 	bl	8000aec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000c8a:	2010      	movs	r0, #16
 8000c8c:	f7ff ff2e 	bl	8000aec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	01db      	lsls	r3, r3, #7
 8000c94:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <ssd1306_UpdateScreen+0x4c>)
 8000c96:	4413      	add	r3, r2
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff3e 	bl	8000b1c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d9e5      	bls.n	8000c78 <ssd1306_UpdateScreen+0xc>
    }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20005170 	.word	0x20005170

08000cbc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	71bb      	strb	r3, [r7, #6]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db3d      	blt.n	8000d52 <ssd1306_DrawPixel+0x96>
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	2b3f      	cmp	r3, #63	; 0x3f
 8000cda:	d83a      	bhi.n	8000d52 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cdc:	797b      	ldrb	r3, [r7, #5]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d11a      	bne.n	8000d18 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	01db      	lsls	r3, r3, #7
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <ssd1306_DrawPixel+0xa4>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	b25a      	sxtb	r2, r3
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b259      	sxtb	r1, r3
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	01db      	lsls	r3, r3, #7
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2c9      	uxtb	r1, r1
 8000d12:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <ssd1306_DrawPixel+0xa4>)
 8000d14:	54d1      	strb	r1, [r2, r3]
 8000d16:	e01d      	b.n	8000d54 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	08db      	lsrs	r3, r3, #3
 8000d1e:	b2d8      	uxtb	r0, r3
 8000d20:	4603      	mov	r3, r0
 8000d22:	01db      	lsls	r3, r3, #7
 8000d24:	4413      	add	r3, r2
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <ssd1306_DrawPixel+0xa4>)
 8000d28:	5cd3      	ldrb	r3, [r2, r3]
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	4013      	ands	r3, r2
 8000d40:	b259      	sxtb	r1, r3
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	4603      	mov	r3, r0
 8000d46:	01db      	lsls	r3, r3, #7
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2c9      	uxtb	r1, r1
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <ssd1306_DrawPixel+0xa4>)
 8000d4e:	54d1      	strb	r1, [r2, r3]
 8000d50:	e000      	b.n	8000d54 <ssd1306_DrawPixel+0x98>
        return;
 8000d52:	bf00      	nop
    }
}
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20005170 	.word	0x20005170

08000d64 <ssd1306_Line>:
    SSD1306.CurrentX = x;
    SSD1306.CurrentY = y;
}

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	4611      	mov	r1, r2
 8000d70:	461a      	mov	r2, r3
 8000d72:	4623      	mov	r3, r4
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	4603      	mov	r3, r0
 8000d78:	71bb      	strb	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	717b      	strb	r3, [r7, #5]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8000d82:	797a      	ldrb	r2, [r7, #5]
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bfb8      	it	lt
 8000d8c:	425b      	neglt	r3, r3
 8000d8e:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8000d90:	793a      	ldrb	r2, [r7, #4]
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bfb8      	it	lt
 8000d9a:	425b      	neglt	r3, r3
 8000d9c:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8000d9e:	79fa      	ldrb	r2, [r7, #7]
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d201      	bcs.n	8000daa <ssd1306_Line+0x46>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e001      	b.n	8000dae <ssd1306_Line+0x4a>
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8000db0:	79ba      	ldrb	r2, [r7, #6]
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d201      	bcs.n	8000dbc <ssd1306_Line+0x58>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e001      	b.n	8000dc0 <ssd1306_Line+0x5c>
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8000dca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000dce:	7939      	ldrb	r1, [r7, #4]
 8000dd0:	797b      	ldrb	r3, [r7, #5]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff72 	bl	8000cbc <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8000dd8:	e024      	b.n	8000e24 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8000dda:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000dde:	79b9      	ldrb	r1, [r7, #6]
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff6a 	bl	8000cbc <ssd1306_DrawPixel>
    error2 = error * 2;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	425b      	negs	r3, r3
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dd08      	ble.n	8000e0a <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8000df8:	69fa      	ldr	r2, [r7, #28]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4413      	add	r3, r2
 8000e08:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	da08      	bge.n	8000e24 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	4413      	add	r3, r2
 8000e18:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	4413      	add	r3, r2
 8000e22:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8000e24:	79fa      	ldrb	r2, [r7, #7]
 8000e26:	797b      	ldrb	r3, [r7, #5]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d1d6      	bne.n	8000dda <ssd1306_Line+0x76>
 8000e2c:	79ba      	ldrb	r2, [r7, #6]
 8000e2e:	793b      	ldrb	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d1d2      	bne.n	8000dda <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8000e34:	bf00      	nop
}
 8000e36:	3724      	adds	r7, #36	; 0x24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}

08000e3c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000e46:	2381      	movs	r3, #129	; 0x81
 8000e48:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe4d 	bl	8000aec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fe49 	bl	8000aec <ssd1306_WriteCommand>
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000e74:	23af      	movs	r3, #175	; 0xaf
 8000e76:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <ssd1306_SetDisplayOn+0x38>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	715a      	strb	r2, [r3, #5]
 8000e7e:	e004      	b.n	8000e8a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000e80:	23ae      	movs	r3, #174	; 0xae
 8000e82:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <ssd1306_SetDisplayOn+0x38>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe2d 	bl	8000aec <ssd1306_WriteCommand>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20005570 	.word	0x20005570

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a2f      	ldr	r2, [pc, #188]	; (8000fcc <HAL_ADC_MspInit+0xdc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d157      	bne.n	8000fc2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <HAL_ADC_MspInit+0xe0>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a2d      	ldr	r2, [pc, #180]	; (8000fd0 <HAL_ADC_MspInit+0xe0>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <HAL_ADC_MspInit+0xe0>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <HAL_ADC_MspInit+0xe0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <HAL_ADC_MspInit+0xe0>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_ADC_MspInit+0xe0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <HAL_ADC_MspInit+0xe4>)
 8000f5e:	f001 fa43 	bl	80023e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000f64:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_ADC_MspInit+0xec>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000fa8:	f000 feae 	bl	8001d08 <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fb2:	f7ff fd7f 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_ADC_MspInit+0xe8>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	20000074 	.word	0x20000074
 8000fdc:	40026410 	.word	0x40026410

08000fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_I2C_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12b      	bne.n	800105a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_I2C_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_I2C_MspInit+0x88>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_I2C_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800101e:	23c0      	movs	r3, #192	; 0xc0
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001022:	2312      	movs	r3, #18
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001026:	2301      	movs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102e:	2304      	movs	r3, #4
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <HAL_I2C_MspInit+0x8c>)
 800103a:	f001 f9d5 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_I2C_MspInit+0x88>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_I2C_MspInit+0x88>)
 8001048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_I2C_MspInit+0x88>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40005400 	.word	0x40005400
 8001068:	40023800 	.word	0x40023800
 800106c:	40020400 	.word	0x40020400

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_TIM_Base_MspInit+0x48>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d115      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_TIM_Base_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_TIM_Base_MspInit+0x4c>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_TIM_Base_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	201d      	movs	r0, #29
 80010a4:	f000 fdf9 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010a8:	201d      	movs	r0, #29
 80010aa:	f000 fe12 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40000400 	.word	0x40000400
 80010bc:	40023800 	.word	0x40023800

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f8a4 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM3_IRQHandler+0x10>)
 800111a:	f002 fca7 	bl	8003a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000128 	.word	0x20000128

08001128 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <DMA2_Stream0_IRQHandler+0x10>)
 800112e:	f000 fef1 	bl	8001f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000074 	.word	0x20000074

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001164:	f7ff ffea 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f003 ffdd 	bl	800514c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fa15 	bl	80005c0 <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001198:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011a4:	08018634 	.word	0x08018634
  ldr r2, =_sbss
 80011a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011ac:	2000557c 	.word	0x2000557c

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <HAL_Init+0x40>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_Init+0x40>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_Init+0x40>)
 80011d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 fd51 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fe5a 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fd69 	bl	8001cee <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 fd31 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000004 	.word	0x20000004
 8001250:	2000000c 	.word	0x2000000c
 8001254:	20000008 	.word	0x20000008

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20005578 	.word	0x20005578

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20005578 	.word	0x20005578

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000000c 	.word	0x2000000c

080012e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e033      	b.n	800135e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fdf6 	bl	8000ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	d118      	bne.n	8001350 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001326:	f023 0302 	bic.w	r3, r3, #2
 800132a:	f043 0202 	orr.w	r2, r3, #2
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa58 	bl	80017e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f023 0303 	bic.w	r3, r3, #3
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
 800134e:	e001      	b.n	8001354 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_ADC_Start_DMA+0x1e>
 8001382:	2302      	movs	r3, #2
 8001384:	e0ce      	b.n	8001524 <HAL_ADC_Start_DMA+0x1bc>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b01      	cmp	r3, #1
 800139a:	d018      	beq.n	80013ce <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013ac:	4b5f      	ldr	r3, [pc, #380]	; (800152c <HAL_ADC_Start_DMA+0x1c4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a5f      	ldr	r2, [pc, #380]	; (8001530 <HAL_ADC_Start_DMA+0x1c8>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9a      	lsrs	r2, r3, #18
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80013c0:	e002      	b.n	80013c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f9      	bne.n	80013c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013dc:	d107      	bne.n	80013ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 8086 	bne.w	800150a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d007      	beq.n	8001430 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001428:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800143c:	d106      	bne.n	800144c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f023 0206 	bic.w	r2, r3, #6
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	645a      	str	r2, [r3, #68]	; 0x44
 800144a:	e002      	b.n	8001452 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145a:	4b36      	ldr	r3, [pc, #216]	; (8001534 <HAL_ADC_Start_DMA+0x1cc>)
 800145c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	4a35      	ldr	r2, [pc, #212]	; (8001538 <HAL_ADC_Start_DMA+0x1d0>)
 8001464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	4a34      	ldr	r2, [pc, #208]	; (800153c <HAL_ADC_Start_DMA+0x1d4>)
 800146c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001472:	4a33      	ldr	r2, [pc, #204]	; (8001540 <HAL_ADC_Start_DMA+0x1d8>)
 8001474:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800147e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800148e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800149e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	334c      	adds	r3, #76	; 0x4c
 80014aa:	4619      	mov	r1, r3
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f000 fcd8 	bl	8001e64 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10f      	bne.n	80014e0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d129      	bne.n	8001522 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	e020      	b.n	8001522 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_ADC_Start_DMA+0x1dc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d11b      	bne.n	8001522 <HAL_ADC_Start_DMA+0x1ba>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d114      	bne.n	8001522 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e00b      	b.n	8001522 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f043 0210 	orr.w	r2, r3, #16
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000004 	.word	0x20000004
 8001530:	431bde83 	.word	0x431bde83
 8001534:	40012300 	.word	0x40012300
 8001538:	080019e1 	.word	0x080019e1
 800153c:	08001a9b 	.word	0x08001a9b
 8001540:	08001ab7 	.word	0x08001ab7
 8001544:	40012000 	.word	0x40012000

08001548 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1c>
 800159c:	2302      	movs	r3, #2
 800159e:	e113      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x244>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d925      	bls.n	80015fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68d9      	ldr	r1, [r3, #12]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	3b1e      	subs	r3, #30
 80015c6:	2207      	movs	r2, #7
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43da      	mvns	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	400a      	ands	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68d9      	ldr	r1, [r3, #12]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4403      	add	r3, r0
 80015ee:	3b1e      	subs	r3, #30
 80015f0:	409a      	lsls	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	e022      	b.n	8001642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6919      	ldr	r1, [r3, #16]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	2207      	movs	r2, #7
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	400a      	ands	r2, r1
 800161e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	4603      	mov	r3, r0
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4403      	add	r3, r0
 8001638:	409a      	lsls	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b06      	cmp	r3, #6
 8001648:	d824      	bhi.n	8001694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	3b05      	subs	r3, #5
 800165c:	221f      	movs	r2, #31
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b05      	subs	r3, #5
 8001686:	fa00 f203 	lsl.w	r2, r0, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
 8001692:	e04c      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d824      	bhi.n	80016e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b23      	subs	r3, #35	; 0x23
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43da      	mvns	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3b23      	subs	r3, #35	; 0x23
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
 80016e4:	e023      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b41      	subs	r3, #65	; 0x41
 80016f8:	221f      	movs	r2, #31
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	400a      	ands	r2, r1
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b41      	subs	r3, #65	; 0x41
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_ADC_ConfigChannel+0x250>)
 8001730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <HAL_ADC_ConfigChannel+0x254>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10f      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1d8>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b12      	cmp	r3, #18
 8001742:	d10b      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_ADC_ConfigChannel+0x254>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12b      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_ADC_ConfigChannel+0x258>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d003      	beq.n	8001778 <HAL_ADC_ConfigChannel+0x1f4>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b11      	cmp	r3, #17
 8001776:	d122      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a11      	ldr	r2, [pc, #68]	; (80017dc <HAL_ADC_ConfigChannel+0x258>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d111      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_ADC_ConfigChannel+0x25c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <HAL_ADC_ConfigChannel+0x260>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	0c9a      	lsrs	r2, r3, #18
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017b0:	e002      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f9      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	40012000 	.word	0x40012000
 80017dc:	10000012 	.word	0x10000012
 80017e0:	20000004 	.word	0x20000004
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f0:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <ADC_Init+0x1f0>)
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	431a      	orrs	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800181c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	021a      	lsls	r2, r3, #8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6899      	ldr	r1, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	4a58      	ldr	r2, [pc, #352]	; (80019dc <ADC_Init+0x1f4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d022      	beq.n	80018c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800188e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6899      	ldr	r1, [r3, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6899      	ldr	r1, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e00f      	b.n	80018e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0202 	bic.w	r2, r2, #2
 80018f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6899      	ldr	r1, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
 8001900:	005a      	lsls	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01b      	beq.n	800194c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001922:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001932:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	3b01      	subs	r3, #1
 8001940:	035a      	lsls	r2, r3, #13
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	e007      	b.n	800195c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	3b01      	subs	r3, #1
 8001978:	051a      	lsls	r2, r3, #20
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6899      	ldr	r1, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800199e:	025a      	lsls	r2, r3, #9
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	029a      	lsls	r2, r3, #10
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40012300 	.word	0x40012300
 80019dc:	0f000001 	.word	0x0f000001

080019e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d13c      	bne.n	8001a74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d12b      	bne.n	8001a6c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d127      	bne.n	8001a6c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d119      	bne.n	8001a6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0220 	bic.w	r2, r2, #32
 8001a46:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7ff fd6b 	bl	8001548 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a72:	e00e      	b.n	8001a92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7ff fd75 	bl	8001570 <HAL_ADC_ErrorCallback>
}
 8001a86:	e004      	b.n	8001a92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff fd57 	bl	800155c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f043 0204 	orr.w	r2, r3, #4
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7ff fd4a 	bl	8001570 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	; (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff29 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff3e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff31 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff fab4 	bl	8001280 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e099      	b.n	8001e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d44:	e00f      	b.n	8001d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d46:	f7ff fa9b 	bl	8001280 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d908      	bls.n	8001d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e078      	b.n	8001e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e8      	bne.n	8001d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_DMA_Init+0x158>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d107      	bne.n	8001dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f023 0307 	bic.w	r3, r3, #7
 8001de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d117      	bne.n	8001e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00e      	beq.n	8001e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fa6f 	bl	80022f0 <DMA_CheckFifoParam>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e26:	2301      	movs	r3, #1
 8001e28:	e016      	b.n	8001e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fa26 	bl	8002284 <DMA_CalcBaseAndBitshift>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	223f      	movs	r2, #63	; 0x3f
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	f010803f 	.word	0xf010803f

08001e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_DMA_Start_IT+0x26>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e040      	b.n	8001f0c <HAL_DMA_Start_IT+0xa8>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d12f      	bne.n	8001efe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f9b8 	bl	8002228 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	223f      	movs	r2, #63	; 0x3f
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0216 	orr.w	r2, r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0208 	orr.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e005      	b.n	8001f0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
 8001f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f20:	4b8e      	ldr	r3, [pc, #568]	; (800215c <HAL_DMA_IRQHandler+0x248>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a8e      	ldr	r2, [pc, #568]	; (8002160 <HAL_DMA_IRQHandler+0x24c>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0a9b      	lsrs	r3, r3, #10
 8001f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3e:	2208      	movs	r2, #8
 8001f40:	409a      	lsls	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01a      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	2201      	movs	r2, #1
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	f043 0202 	orr.w	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	2204      	movs	r2, #4
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	2204      	movs	r2, #4
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d043      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03c      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2210      	movs	r2, #16
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d018      	beq.n	8002056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d108      	bne.n	8002044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d024      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
 8002042:	e01f      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e016      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0208 	bic.w	r2, r2, #8
 8002072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2220      	movs	r2, #32
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 808f 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8087 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2220      	movs	r2, #32
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d136      	bne.n	800212c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0216 	bic.w	r2, r2, #22
 80020cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_DMA_IRQHandler+0x1da>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	223f      	movs	r2, #63	; 0x3f
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211e:	2b00      	cmp	r3, #0
 8002120:	d07e      	beq.n	8002220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
        }
        return;
 800212a:	e079      	b.n	8002220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	2b00      	cmp	r3, #0
 800214e:	d031      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e02c      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
 800215a:	bf00      	nop
 800215c:	20000004 	.word	0x20000004
 8002160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d023      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e01e      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0210 	bic.w	r2, r2, #16
 8002192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d032      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d022      	beq.n	800220e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2205      	movs	r2, #5
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d307      	bcc.n	80021fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f2      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x2cc>
 80021fa:	e000      	b.n	80021fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
 800221e:	e000      	b.n	8002222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002220:	bf00      	nop
    }
  }
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002244:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	d108      	bne.n	8002268 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002266:	e007      	b.n	8002278 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	3b10      	subs	r3, #16
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800229e:	4a13      	ldr	r2, [pc, #76]	; (80022ec <DMA_CalcBaseAndBitshift+0x68>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d909      	bls.n	80022c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	1d1a      	adds	r2, r3, #4
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	; 0x58
 80022c4:	e007      	b.n	80022d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	aaaaaaab 	.word	0xaaaaaaab
 80022ec:	080051c4 	.word	0x080051c4

080022f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11f      	bne.n	800234a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d856      	bhi.n	80023be <DMA_CheckFifoParam+0xce>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <DMA_CheckFifoParam+0x28>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002329 	.word	0x08002329
 800231c:	0800233b 	.word	0x0800233b
 8002320:	08002329 	.word	0x08002329
 8002324:	080023bf 	.word	0x080023bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d046      	beq.n	80023c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002338:	e043      	b.n	80023c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002342:	d140      	bne.n	80023c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002348:	e03d      	b.n	80023c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002352:	d121      	bne.n	8002398 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d837      	bhi.n	80023ca <DMA_CheckFifoParam+0xda>
 800235a:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <DMA_CheckFifoParam+0x70>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002371 	.word	0x08002371
 8002364:	08002377 	.word	0x08002377
 8002368:	08002371 	.word	0x08002371
 800236c:	08002389 	.word	0x08002389
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	e030      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d025      	beq.n	80023ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002386:	e022      	b.n	80023ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002390:	d11f      	bne.n	80023d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002396:	e01c      	b.n	80023d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d903      	bls.n	80023a6 <DMA_CheckFifoParam+0xb6>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d003      	beq.n	80023ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023a4:	e018      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
      break;
 80023aa:	e015      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e00b      	b.n	80023d6 <DMA_CheckFifoParam+0xe6>
      break;
 80023be:	bf00      	nop
 80023c0:	e00a      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c2:	bf00      	nop
 80023c4:	e008      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
 80023c8:	e006      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e004      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e002      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023d2:	bf00      	nop
 80023d4:	e000      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
    }
  } 
  
  return status; 
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e159      	b.n	80026b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 8148 	bne.w	80026b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	2b02      	cmp	r3, #2
 8002438:	d130      	bne.n	800249c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a2 	beq.w	80026b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <HAL_GPIO_Init+0x2e8>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a56      	ldr	r2, [pc, #344]	; (80026d0 <HAL_GPIO_Init+0x2e8>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <HAL_GPIO_Init+0x2e8>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258a:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_GPIO_Init+0x2ec>)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a49      	ldr	r2, [pc, #292]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x202>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a48      	ldr	r2, [pc, #288]	; (80026dc <HAL_GPIO_Init+0x2f4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x1fe>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <HAL_GPIO_Init+0x2f8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x1fa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a46      	ldr	r2, [pc, #280]	; (80026e4 <HAL_GPIO_Init+0x2fc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x1f6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a45      	ldr	r2, [pc, #276]	; (80026e8 <HAL_GPIO_Init+0x300>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x1f2>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025da:	2307      	movs	r3, #7
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	; (80026d4 <HAL_GPIO_Init+0x2ec>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_GPIO_Init+0x304>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a2f      	ldr	r2, [pc, #188]	; (80026ec <HAL_GPIO_Init+0x304>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_GPIO_Init+0x304>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a24      	ldr	r2, [pc, #144]	; (80026ec <HAL_GPIO_Init+0x304>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_GPIO_Init+0x304>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_GPIO_Init+0x304>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_GPIO_Init+0x304>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <HAL_GPIO_Init+0x304>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f aea2 	bls.w	8002404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40013c00 	.word	0x40013c00

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e12b      	b.n	800298e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fc48 	bl	8000fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002788:	f001 f8aa 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a81      	ldr	r2, [pc, #516]	; (8002998 <HAL_I2C_Init+0x274>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d807      	bhi.n	80027a8 <HAL_I2C_Init+0x84>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a80      	ldr	r2, [pc, #512]	; (800299c <HAL_I2C_Init+0x278>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e006      	b.n	80027b6 <HAL_I2C_Init+0x92>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a7d      	ldr	r2, [pc, #500]	; (80029a0 <HAL_I2C_Init+0x27c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0e7      	b.n	800298e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a78      	ldr	r2, [pc, #480]	; (80029a4 <HAL_I2C_Init+0x280>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9b      	lsrs	r3, r3, #18
 80027c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a6a      	ldr	r2, [pc, #424]	; (8002998 <HAL_I2C_Init+0x274>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d802      	bhi.n	80027f8 <HAL_I2C_Init+0xd4>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3301      	adds	r3, #1
 80027f6:	e009      	b.n	800280c <HAL_I2C_Init+0xe8>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	4a69      	ldr	r2, [pc, #420]	; (80029a8 <HAL_I2C_Init+0x284>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	3301      	adds	r3, #1
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800281e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	495c      	ldr	r1, [pc, #368]	; (8002998 <HAL_I2C_Init+0x274>)
 8002828:	428b      	cmp	r3, r1
 800282a:	d819      	bhi.n	8002860 <HAL_I2C_Init+0x13c>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e59      	subs	r1, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fbb1 f3f3 	udiv	r3, r1, r3
 800283a:	1c59      	adds	r1, r3, #1
 800283c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002840:	400b      	ands	r3, r1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_I2C_Init+0x138>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e59      	subs	r1, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fbb1 f3f3 	udiv	r3, r1, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285a:	e051      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 800285c:	2304      	movs	r3, #4
 800285e:	e04f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d111      	bne.n	800288c <HAL_I2C_Init+0x168>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e012      	b.n	80028b2 <HAL_I2C_Init+0x18e>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	0099      	lsls	r1, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Init+0x196>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e022      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10e      	bne.n	80028e0 <HAL_I2C_Init+0x1bc>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e58      	subs	r0, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	440b      	add	r3, r1
 80028d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028de:	e00f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	0099      	lsls	r1, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	6809      	ldr	r1, [r1, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800292e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6911      	ldr	r1, [r2, #16]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68d2      	ldr	r2, [r2, #12]
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	430b      	orrs	r3, r1
 8002942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	000186a0 	.word	0x000186a0
 800299c:	001e847f 	.word	0x001e847f
 80029a0:	003d08ff 	.word	0x003d08ff
 80029a4:	431bde83 	.word	0x431bde83
 80029a8:	10624dd3 	.word	0x10624dd3

080029ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	817b      	strh	r3, [r7, #10]
 80029be:	460b      	mov	r3, r1
 80029c0:	813b      	strh	r3, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029c6:	f7fe fc5b 	bl	8001280 <HAL_GetTick>
 80029ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	f040 80d9 	bne.w	8002b8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2319      	movs	r3, #25
 80029e0:	2201      	movs	r2, #1
 80029e2:	496d      	ldr	r1, [pc, #436]	; (8002b98 <HAL_I2C_Mem_Write+0x1ec>)
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f971 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0cc      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_I2C_Mem_Write+0x56>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e0c5      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d007      	beq.n	8002a28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2221      	movs	r2, #33	; 0x21
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2240      	movs	r2, #64	; 0x40
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a3a      	ldr	r2, [r7, #32]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a4d      	ldr	r2, [pc, #308]	; (8002b9c <HAL_I2C_Mem_Write+0x1f0>)
 8002a68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a6a:	88f8      	ldrh	r0, [r7, #6]
 8002a6c:	893a      	ldrh	r2, [r7, #8]
 8002a6e:	8979      	ldrh	r1, [r7, #10]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4603      	mov	r3, r0
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f890 	bl	8002ba0 <I2C_RequestMemoryWrite>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d052      	beq.n	8002b2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e081      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fa36 	bl	8002f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d107      	bne.n	8002ab2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06b      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d11b      	bne.n	8002b2c <HAL_I2C_Mem_Write+0x180>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d017      	beq.n	8002b2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1aa      	bne.n	8002a8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fa29 	bl	8002f90 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d107      	bne.n	8002b5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e016      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	00100002 	.word	0x00100002
 8002b9c:	ffff0000 	.word	0xffff0000

08002ba0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	817b      	strh	r3, [r7, #10]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	813b      	strh	r3, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f878 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf0:	d103      	bne.n	8002bfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e05f      	b.n	8002cbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bfe:	897b      	ldrh	r3, [r7, #10]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	6a3a      	ldr	r2, [r7, #32]
 8002c12:	492d      	ldr	r1, [pc, #180]	; (8002cc8 <I2C_RequestMemoryWrite+0x128>)
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f8d3 	bl	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e04c      	b.n	8002cbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f95e 	bl	8002f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d107      	bne.n	8002c62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e02b      	b.n	8002cbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6c:	893b      	ldrh	r3, [r7, #8]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]
 8002c76:	e021      	b.n	8002cbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c78:	893b      	ldrh	r3, [r7, #8]
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	6a39      	ldr	r1, [r7, #32]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f938 	bl	8002f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00d      	beq.n	8002cb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d107      	bne.n	8002cae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e005      	b.n	8002cbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb2:	893b      	ldrh	r3, [r7, #8]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	00010002 	.word	0x00010002

08002ccc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	e048      	b.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d044      	beq.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe facb 	bl	8001280 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d139      	bne.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	0c1b      	lsrs	r3, r3, #16
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10d      	bne.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4013      	ands	r3, r2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	e00c      	b.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d116      	bne.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e023      	b.n	8002db8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10d      	bne.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	e00c      	b.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4013      	ands	r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d093      	beq.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dce:	e071      	b.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d123      	bne.n	8002e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e067      	b.n	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2e:	d041      	beq.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e30:	f7fe fa26 	bl	8001280 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d302      	bcc.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d136      	bne.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d10c      	bne.n	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	e00b      	b.n	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	43da      	mvns	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4013      	ands	r3, r2
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	f043 0220 	orr.w	r2, r3, #32
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e021      	b.n	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d10c      	bne.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e00b      	b.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f af6d 	bne.w	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0c:	e034      	b.n	8002f78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f886 	bl	8003020 <I2C_IsAcknowledgeFailed>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e034      	b.n	8002f88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d028      	beq.n	8002f78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	f7fe f9ab 	bl	8001280 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d11d      	bne.n	8002f78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b80      	cmp	r3, #128	; 0x80
 8002f48:	d016      	beq.n	8002f78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e007      	b.n	8002f88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b80      	cmp	r3, #128	; 0x80
 8002f84:	d1c3      	bne.n	8002f0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f9c:	e034      	b.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f83e 	bl	8003020 <I2C_IsAcknowledgeFailed>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e034      	b.n	8003018 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d028      	beq.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7fe f963 	bl	8001280 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d11d      	bne.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d016      	beq.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e007      	b.n	8003018 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b04      	cmp	r3, #4
 8003014:	d1c3      	bne.n	8002f9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d11b      	bne.n	8003070 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003040:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f043 0204 	orr.w	r2, r3, #4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e267      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d075      	beq.n	800318a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309e:	4b88      	ldr	r3, [pc, #544]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d00c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030aa:	4b85      	ldr	r3, [pc, #532]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d112      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b6:	4b82      	ldr	r3, [pc, #520]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c2:	d10b      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	4b7e      	ldr	r3, [pc, #504]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05b      	beq.n	8003188 <HAL_RCC_OscConfig+0x108>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d157      	bne.n	8003188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e242      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x74>
 80030e6:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a75      	ldr	r2, [pc, #468]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b70      	ldr	r3, [pc, #448]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6f      	ldr	r2, [pc, #444]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b6d      	ldr	r3, [pc, #436]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6c      	ldr	r2, [pc, #432]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 8003118:	4b69      	ldr	r3, [pc, #420]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a68      	ldr	r2, [pc, #416]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe f8a2 	bl	8001280 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe f89e 	bl	8001280 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e207      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b5b      	ldr	r3, [pc, #364]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xc0>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fe f88e 	bl	8001280 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe f88a 	bl	8001280 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1f3      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0xe8>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d063      	beq.n	800325e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003196:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d11c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ae:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x152>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1c7      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4937      	ldr	r1, [pc, #220]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	e03a      	b.n	800325e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <HAL_RCC_OscConfig+0x244>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fe f843 	bl	8001280 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031fe:	f7fe f83f 	bl	8001280 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e1a8      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4925      	ldr	r1, [pc, #148]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_OscConfig+0x244>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe f822 	bl	8001280 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003240:	f7fe f81e 	bl	8001280 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e187      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d036      	beq.n	80032d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_RCC_OscConfig+0x248>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe f802 	bl	8001280 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003280:	f7fd fffe 	bl	8001280 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e167      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x200>
 800329e:	e01b      	b.n	80032d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_RCC_OscConfig+0x248>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7fd ffeb 	bl	8001280 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	e00e      	b.n	80032cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ae:	f7fd ffe7 	bl	8001280 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d907      	bls.n	80032cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e150      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
 80032c0:	40023800 	.word	0x40023800
 80032c4:	42470000 	.word	0x42470000
 80032c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	4b88      	ldr	r3, [pc, #544]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ea      	bne.n	80032ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8097 	beq.w	8003414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b81      	ldr	r3, [pc, #516]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10f      	bne.n	8003316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	4b7d      	ldr	r3, [pc, #500]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	4a7c      	ldr	r2, [pc, #496]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003304:	6413      	str	r3, [r2, #64]	; 0x40
 8003306:	4b7a      	ldr	r3, [pc, #488]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b77      	ldr	r3, [pc, #476]	; (80034f4 <HAL_RCC_OscConfig+0x474>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003322:	4b74      	ldr	r3, [pc, #464]	; (80034f4 <HAL_RCC_OscConfig+0x474>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a73      	ldr	r2, [pc, #460]	; (80034f4 <HAL_RCC_OscConfig+0x474>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fd ffa7 	bl	8001280 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fd ffa3 	bl	8001280 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e10c      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCC_OscConfig+0x474>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x2ea>
 800335c:	4b64      	ldr	r3, [pc, #400]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a63      	ldr	r2, [pc, #396]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
 8003368:	e01c      	b.n	80033a4 <HAL_RCC_OscConfig+0x324>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x30c>
 8003372:	4b5f      	ldr	r3, [pc, #380]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a5e      	ldr	r2, [pc, #376]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	4b5c      	ldr	r3, [pc, #368]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a5b      	ldr	r2, [pc, #364]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x324>
 800338c:	4b58      	ldr	r3, [pc, #352]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a57      	ldr	r2, [pc, #348]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	4b55      	ldr	r3, [pc, #340]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a54      	ldr	r2, [pc, #336]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fd ff68 	bl	8001280 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b4:	f7fd ff64 	bl	8001280 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e0cb      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ee      	beq.n	80033b4 <HAL_RCC_OscConfig+0x334>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d8:	f7fd ff52 	bl	8001280 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fd ff4e 	bl	8001280 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0b5      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ee      	bne.n	80033e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003408:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	4a38      	ldr	r2, [pc, #224]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 800340e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a1 	beq.w	8003560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800341e:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d05c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d141      	bne.n	80034b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <HAL_RCC_OscConfig+0x478>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fd ff22 	bl	8001280 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003440:	f7fd ff1e 	bl	8001280 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e087      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	019b      	lsls	r3, r3, #6
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	3b01      	subs	r3, #1
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	491b      	ldr	r1, [pc, #108]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x478>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd fef7 	bl	8001280 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003496:	f7fd fef3 	bl	8001280 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e05c      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x416>
 80034b4:	e054      	b.n	8003560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_RCC_OscConfig+0x478>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fd fee0 	bl	8001280 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd fedc 	bl	8001280 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e045      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_OscConfig+0x470>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x444>
 80034e2:	e03d      	b.n	8003560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e038      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40007000 	.word	0x40007000
 80034f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x4ec>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d028      	beq.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d121      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d11a      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800352c:	4013      	ands	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	4293      	cmp	r3, r2
 8003536:	d111      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	3b01      	subs	r3, #1
 8003546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800

08003570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0cc      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b68      	ldr	r3, [pc, #416]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d90c      	bls.n	80035ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b65      	ldr	r3, [pc, #404]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b63      	ldr	r3, [pc, #396]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0b8      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c4:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035dc:	4b53      	ldr	r3, [pc, #332]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a52      	ldr	r2, [pc, #328]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	494d      	ldr	r1, [pc, #308]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d044      	beq.n	8003690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b47      	ldr	r3, [pc, #284]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d119      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e07f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d003      	beq.n	800362e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362a:	2b03      	cmp	r3, #3
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e06f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b3b      	ldr	r3, [pc, #236]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e067      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b37      	ldr	r3, [pc, #220]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4934      	ldr	r1, [pc, #208]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003660:	f7fd fe0e 	bl	8001280 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fd fe0a 	bl	8001280 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e04f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d20c      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e032      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4916      	ldr	r1, [pc, #88]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	490e      	ldr	r1, [pc, #56]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036f6:	f000 f821 	bl	800373c <HAL_RCC_GetSysClockFreq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	490a      	ldr	r1, [pc, #40]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	5ccb      	ldrb	r3, [r1, r3]
 800370a:	fa22 f303 	lsr.w	r3, r2, r3
 800370e:	4a09      	ldr	r2, [pc, #36]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd fd6e 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023c00 	.word	0x40023c00
 800372c:	40023800 	.word	0x40023800
 8003730:	080051ac 	.word	0x080051ac
 8003734:	20000004 	.word	0x20000004
 8003738:	20000008 	.word	0x20000008

0800373c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b090      	sub	sp, #64	; 0x40
 8003742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	637b      	str	r3, [r7, #52]	; 0x34
 8003748:	2300      	movs	r3, #0
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374c:	2300      	movs	r3, #0
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003754:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d00d      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x40>
 8003760:	2b08      	cmp	r3, #8
 8003762:	f200 80a1 	bhi.w	80038a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x34>
 800376a:	2b04      	cmp	r3, #4
 800376c:	d003      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x3a>
 800376e:	e09b      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003774:	e09b      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003776:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800377a:	e098      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800377c:	4b4f      	ldr	r3, [pc, #316]	; (80038bc <HAL_RCC_GetSysClockFreq+0x180>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003786:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d028      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003792:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	2200      	movs	r2, #0
 800379a:	623b      	str	r3, [r7, #32]
 800379c:	627a      	str	r2, [r7, #36]	; 0x24
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037a4:	2100      	movs	r1, #0
 80037a6:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037a8:	fb03 f201 	mul.w	r2, r3, r1
 80037ac:	2300      	movs	r3, #0
 80037ae:	fb00 f303 	mul.w	r3, r0, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	4a43      	ldr	r2, [pc, #268]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037b6:	fba0 1202 	umull	r1, r2, r0, r2
 80037ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037bc:	460a      	mov	r2, r1
 80037be:	62ba      	str	r2, [r7, #40]	; 0x28
 80037c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c2:	4413      	add	r3, r2
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	2200      	movs	r2, #0
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	61fa      	str	r2, [r7, #28]
 80037ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037d6:	f7fc fd5f 	bl	8000298 <__aeabi_uldivmod>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4613      	mov	r3, r2
 80037e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e2:	e053      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e4:	4b35      	ldr	r3, [pc, #212]	; (80038bc <HAL_RCC_GetSysClockFreq+0x180>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	2200      	movs	r2, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	617a      	str	r2, [r7, #20]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037f6:	f04f 0b00 	mov.w	fp, #0
 80037fa:	4652      	mov	r2, sl
 80037fc:	465b      	mov	r3, fp
 80037fe:	f04f 0000 	mov.w	r0, #0
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	0159      	lsls	r1, r3, #5
 8003808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800380c:	0150      	lsls	r0, r2, #5
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	ebb2 080a 	subs.w	r8, r2, sl
 8003816:	eb63 090b 	sbc.w	r9, r3, fp
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003826:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800382a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800382e:	ebb2 0408 	subs.w	r4, r2, r8
 8003832:	eb63 0509 	sbc.w	r5, r3, r9
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	00eb      	lsls	r3, r5, #3
 8003840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003844:	00e2      	lsls	r2, r4, #3
 8003846:	4614      	mov	r4, r2
 8003848:	461d      	mov	r5, r3
 800384a:	eb14 030a 	adds.w	r3, r4, sl
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	eb45 030b 	adc.w	r3, r5, fp
 8003854:	607b      	str	r3, [r7, #4]
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003862:	4629      	mov	r1, r5
 8003864:	028b      	lsls	r3, r1, #10
 8003866:	4621      	mov	r1, r4
 8003868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800386c:	4621      	mov	r1, r4
 800386e:	028a      	lsls	r2, r1, #10
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	2200      	movs	r2, #0
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	60fa      	str	r2, [r7, #12]
 800387c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003880:	f7fc fd0a 	bl	8000298 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCC_GetSysClockFreq+0x180>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	3301      	adds	r3, #1
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800389c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038a6:	e002      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80038aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3740      	adds	r7, #64	; 0x40
 80038b4:	46bd      	mov	sp, r7
 80038b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	017d7840 	.word	0x017d7840

080038c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000004 	.word	0x20000004

080038e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038e4:	f7ff fff0 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	080051bc 	.word	0x080051bc

08003908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e041      	b.n	800399e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fb9e 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f000 fa70 	bl	8003e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e044      	b.n	8003a4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <HAL_TIM_Base_Start_IT+0xb0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ea:	d013      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <HAL_TIM_Base_Start_IT+0xb4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <HAL_TIM_Base_Start_IT+0xb8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d010      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a36:	e007      	b.n	8003a48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40014000 	.word	0x40014000

08003a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d020      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0202 	mvn.w	r2, #2
 8003aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f999 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f98b 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f99c 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0204 	mvn.w	r2, #4
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f973 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f965 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f976 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d020      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01b      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0208 	mvn.w	r2, #8
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f94d 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f93f 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f950 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d020      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01b      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0210 	mvn.w	r2, #16
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f927 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f919 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f92a 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0201 	mvn.w	r2, #1
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fc fcde 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00c      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fab6 	bl	8004168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8fb 	bl	8003e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0220 	mvn.w	r2, #32
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa88 	bl	8004154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_TIM_ConfigClockSource+0x1c>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e0b4      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x186>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca0:	d03e      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0xd4>
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca6:	f200 8087 	bhi.w	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cae:	f000 8086 	beq.w	8003dbe <HAL_TIM_ConfigClockSource+0x172>
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d87f      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b70      	cmp	r3, #112	; 0x70
 8003cba:	d01a      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8003cbc:	2b70      	cmp	r3, #112	; 0x70
 8003cbe:	d87b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b60      	cmp	r3, #96	; 0x60
 8003cc2:	d050      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x11a>
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d877      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b50      	cmp	r3, #80	; 0x50
 8003cca:	d03c      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0xfa>
 8003ccc:	2b50      	cmp	r3, #80	; 0x50
 8003cce:	d873      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d058      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x13a>
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d86f      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b30      	cmp	r3, #48	; 0x30
 8003cda:	d064      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	2b30      	cmp	r3, #48	; 0x30
 8003cde:	d86b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d060      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d867      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d05c      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d05a      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	e062      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d02:	f000 f999 	bl	8004038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	609a      	str	r2, [r3, #8]
      break;
 8003d1e:	e04f      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d30:	f000 f982 	bl	8004038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d42:	609a      	str	r2, [r3, #8]
      break;
 8003d44:	e03c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d52:	461a      	mov	r2, r3
 8003d54:	f000 f8f6 	bl	8003f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2150      	movs	r1, #80	; 0x50
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f94f 	bl	8004002 <TIM_ITRx_SetConfig>
      break;
 8003d64:	e02c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d72:	461a      	mov	r2, r3
 8003d74:	f000 f915 	bl	8003fa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2160      	movs	r1, #96	; 0x60
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f93f 	bl	8004002 <TIM_ITRx_SetConfig>
      break;
 8003d84:	e01c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d92:	461a      	mov	r2, r3
 8003d94:	f000 f8d6 	bl	8003f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2140      	movs	r1, #64	; 0x40
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f92f 	bl	8004002 <TIM_ITRx_SetConfig>
      break;
 8003da4:	e00c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f000 f926 	bl	8004002 <TIM_ITRx_SetConfig>
      break;
 8003db6:	e003      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbc:	e000      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <TIM_Base_SetConfig+0xfc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00f      	beq.n	8003e64 <TIM_Base_SetConfig+0x38>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d00b      	beq.n	8003e64 <TIM_Base_SetConfig+0x38>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a37      	ldr	r2, [pc, #220]	; (8003f2c <TIM_Base_SetConfig+0x100>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d007      	beq.n	8003e64 <TIM_Base_SetConfig+0x38>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a36      	ldr	r2, [pc, #216]	; (8003f30 <TIM_Base_SetConfig+0x104>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_Base_SetConfig+0x38>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a35      	ldr	r2, [pc, #212]	; (8003f34 <TIM_Base_SetConfig+0x108>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d108      	bne.n	8003e76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <TIM_Base_SetConfig+0xfc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e84:	d017      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a28      	ldr	r2, [pc, #160]	; (8003f2c <TIM_Base_SetConfig+0x100>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a27      	ldr	r2, [pc, #156]	; (8003f30 <TIM_Base_SetConfig+0x104>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00f      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <TIM_Base_SetConfig+0x108>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <TIM_Base_SetConfig+0x10c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a24      	ldr	r2, [pc, #144]	; (8003f3c <TIM_Base_SetConfig+0x110>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a0e      	ldr	r2, [pc, #56]	; (8003f28 <TIM_Base_SetConfig+0xfc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d103      	bne.n	8003efc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d105      	bne.n	8003f1a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f023 0201 	bic.w	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	611a      	str	r2, [r3, #16]
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800
 8003f34:	40000c00 	.word	0x40000c00
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800

08003f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0201 	bic.w	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 030a 	bic.w	r3, r3, #10
 8003f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	621a      	str	r2, [r3, #32]
}
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b087      	sub	sp, #28
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f023 0210 	bic.w	r2, r3, #16
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	f043 0307 	orr.w	r3, r3, #7
 8004024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	021a      	lsls	r2, r3, #8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	431a      	orrs	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800408c:	2302      	movs	r3, #2
 800408e:	e050      	b.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d013      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a18      	ldr	r2, [pc, #96]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a15      	ldr	r2, [pc, #84]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a13      	ldr	r2, [pc, #76]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10c      	bne.n	8004120 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40014000 	.word	0x40014000

08004154 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <arm_rfft_fast_init_f32>:
 800417c:	084b      	lsrs	r3, r1, #1
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	b410      	push	{r4}
 8004182:	8201      	strh	r1, [r0, #16]
 8004184:	8003      	strh	r3, [r0, #0]
 8004186:	d046      	beq.n	8004216 <arm_rfft_fast_init_f32+0x9a>
 8004188:	d916      	bls.n	80041b8 <arm_rfft_fast_init_f32+0x3c>
 800418a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418e:	d03c      	beq.n	800420a <arm_rfft_fast_init_f32+0x8e>
 8004190:	d928      	bls.n	80041e4 <arm_rfft_fast_init_f32+0x68>
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d01f      	beq.n	80041d8 <arm_rfft_fast_init_f32+0x5c>
 8004198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419c:	d112      	bne.n	80041c4 <arm_rfft_fast_init_f32+0x48>
 800419e:	4920      	ldr	r1, [pc, #128]	; (8004220 <arm_rfft_fast_init_f32+0xa4>)
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <arm_rfft_fast_init_f32+0xa8>)
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <arm_rfft_fast_init_f32+0xac>)
 80041a4:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80041a8:	8184      	strh	r4, [r0, #12]
 80041aa:	6081      	str	r1, [r0, #8]
 80041ac:	6042      	str	r2, [r0, #4]
 80041ae:	6143      	str	r3, [r0, #20]
 80041b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041b4:	2000      	movs	r0, #0
 80041b6:	4770      	bx	lr
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d01c      	beq.n	80041f6 <arm_rfft_fast_init_f32+0x7a>
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d006      	beq.n	80041ce <arm_rfft_fast_init_f32+0x52>
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d01d      	beq.n	8004200 <arm_rfft_fast_init_f32+0x84>
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	2438      	movs	r4, #56	; 0x38
 80041d0:	4916      	ldr	r1, [pc, #88]	; (800422c <arm_rfft_fast_init_f32+0xb0>)
 80041d2:	4a17      	ldr	r2, [pc, #92]	; (8004230 <arm_rfft_fast_init_f32+0xb4>)
 80041d4:	4b17      	ldr	r3, [pc, #92]	; (8004234 <arm_rfft_fast_init_f32+0xb8>)
 80041d6:	e7e7      	b.n	80041a8 <arm_rfft_fast_init_f32+0x2c>
 80041d8:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80041dc:	4916      	ldr	r1, [pc, #88]	; (8004238 <arm_rfft_fast_init_f32+0xbc>)
 80041de:	4a17      	ldr	r2, [pc, #92]	; (800423c <arm_rfft_fast_init_f32+0xc0>)
 80041e0:	4b17      	ldr	r3, [pc, #92]	; (8004240 <arm_rfft_fast_init_f32+0xc4>)
 80041e2:	e7e1      	b.n	80041a8 <arm_rfft_fast_init_f32+0x2c>
 80041e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e8:	d1ec      	bne.n	80041c4 <arm_rfft_fast_init_f32+0x48>
 80041ea:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80041ee:	4915      	ldr	r1, [pc, #84]	; (8004244 <arm_rfft_fast_init_f32+0xc8>)
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <arm_rfft_fast_init_f32+0xcc>)
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <arm_rfft_fast_init_f32+0xd0>)
 80041f4:	e7d8      	b.n	80041a8 <arm_rfft_fast_init_f32+0x2c>
 80041f6:	2430      	movs	r4, #48	; 0x30
 80041f8:	4915      	ldr	r1, [pc, #84]	; (8004250 <arm_rfft_fast_init_f32+0xd4>)
 80041fa:	4a16      	ldr	r2, [pc, #88]	; (8004254 <arm_rfft_fast_init_f32+0xd8>)
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <arm_rfft_fast_init_f32+0xdc>)
 80041fe:	e7d3      	b.n	80041a8 <arm_rfft_fast_init_f32+0x2c>
 8004200:	2414      	movs	r4, #20
 8004202:	4916      	ldr	r1, [pc, #88]	; (800425c <arm_rfft_fast_init_f32+0xe0>)
 8004204:	4a16      	ldr	r2, [pc, #88]	; (8004260 <arm_rfft_fast_init_f32+0xe4>)
 8004206:	4b17      	ldr	r3, [pc, #92]	; (8004264 <arm_rfft_fast_init_f32+0xe8>)
 8004208:	e7ce      	b.n	80041a8 <arm_rfft_fast_init_f32+0x2c>
 800420a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800420e:	4916      	ldr	r1, [pc, #88]	; (8004268 <arm_rfft_fast_init_f32+0xec>)
 8004210:	4a16      	ldr	r2, [pc, #88]	; (800426c <arm_rfft_fast_init_f32+0xf0>)
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <arm_rfft_fast_init_f32+0xf4>)
 8004214:	e7c8      	b.n	80041a8 <arm_rfft_fast_init_f32+0x2c>
 8004216:	24d0      	movs	r4, #208	; 0xd0
 8004218:	4916      	ldr	r1, [pc, #88]	; (8004274 <arm_rfft_fast_init_f32+0xf8>)
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <arm_rfft_fast_init_f32+0xfc>)
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <arm_rfft_fast_init_f32+0x100>)
 800421e:	e7c3      	b.n	80041a8 <arm_rfft_fast_init_f32+0x2c>
 8004220:	08013fd4 	.word	0x08013fd4
 8004224:	080051cc 	.word	0x080051cc
 8004228:	0800b33c 	.word	0x0800b33c
 800422c:	080092cc 	.word	0x080092cc
 8004230:	08015d94 	.word	0x08015d94
 8004234:	08018284 	.word	0x08018284
 8004238:	08011cbc 	.word	0x08011cbc
 800423c:	0800fbbc 	.word	0x0800fbbc
 8004240:	0800933c 	.word	0x0800933c
 8004244:	08017f14 	.word	0x08017f14
 8004248:	0800f33c 	.word	0x0800f33c
 800424c:	08015f94 	.word	0x08015f94
 8004250:	08012b74 	.word	0x08012b74
 8004254:	08011bbc 	.word	0x08011bbc
 8004258:	080091cc 	.word	0x080091cc
 800425c:	08012acc 	.word	0x08012acc
 8004260:	0800fb3c 	.word	0x0800fb3c
 8004264:	08012af4 	.word	0x08012af4
 8004268:	08016794 	.word	0x08016794
 800426c:	08012fd4 	.word	0x08012fd4
 8004270:	08016b14 	.word	0x08016b14
 8004274:	08018484 	.word	0x08018484
 8004278:	08012bd4 	.word	0x08012bd4
 800427c:	08017b14 	.word	0x08017b14

08004280 <arm_rfft_fast_f32>:
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004284:	8a06      	ldrh	r6, [r0, #16]
 8004286:	0876      	lsrs	r6, r6, #1
 8004288:	4607      	mov	r7, r0
 800428a:	4615      	mov	r5, r2
 800428c:	8006      	strh	r6, [r0, #0]
 800428e:	460c      	mov	r4, r1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d15c      	bne.n	800434e <arm_rfft_fast_f32+0xce>
 8004294:	461a      	mov	r2, r3
 8004296:	2301      	movs	r3, #1
 8004298:	f000 fbe4 	bl	8004a64 <arm_cfft_f32>
 800429c:	edd4 7a00 	vldr	s15, [r4]
 80042a0:	ed94 7a01 	vldr	s14, [r4, #4]
 80042a4:	883e      	ldrh	r6, [r7, #0]
 80042a6:	6978      	ldr	r0, [r7, #20]
 80042a8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80042ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042b0:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 80042b4:	ee77 6a87 	vadd.f32	s13, s15, s14
 80042b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042bc:	3e01      	subs	r6, #1
 80042be:	ee26 7a83 	vmul.f32	s14, s13, s6
 80042c2:	ee67 7a83 	vmul.f32	s15, s15, s6
 80042c6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80042ca:	ed85 7a00 	vstr	s14, [r5]
 80042ce:	edc5 7a01 	vstr	s15, [r5, #4]
 80042d2:	3010      	adds	r0, #16
 80042d4:	f105 0210 	add.w	r2, r5, #16
 80042d8:	3b08      	subs	r3, #8
 80042da:	f104 0110 	add.w	r1, r4, #16
 80042de:	ed93 7a02 	vldr	s14, [r3, #8]
 80042e2:	ed51 6a02 	vldr	s13, [r1, #-8]
 80042e6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80042ea:	edd3 3a03 	vldr	s7, [r3, #12]
 80042ee:	ed11 5a01 	vldr	s10, [r1, #-4]
 80042f2:	ed50 5a01 	vldr	s11, [r0, #-4]
 80042f6:	ee77 7a66 	vsub.f32	s15, s14, s13
 80042fa:	ee77 4a26 	vadd.f32	s9, s14, s13
 80042fe:	ee33 4a85 	vadd.f32	s8, s7, s10
 8004302:	ee66 6a27 	vmul.f32	s13, s12, s15
 8004306:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800430a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800430e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004312:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004316:	ee26 6a04 	vmul.f32	s12, s12, s8
 800431a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800431e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004322:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004326:	ee67 7a83 	vmul.f32	s15, s15, s6
 800432a:	ee27 7a03 	vmul.f32	s14, s14, s6
 800432e:	3e01      	subs	r6, #1
 8004330:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004334:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004338:	f1a3 0308 	sub.w	r3, r3, #8
 800433c:	f101 0108 	add.w	r1, r1, #8
 8004340:	f100 0008 	add.w	r0, r0, #8
 8004344:	f102 0208 	add.w	r2, r2, #8
 8004348:	d1c9      	bne.n	80042de <arm_rfft_fast_f32+0x5e>
 800434a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800434e:	edd1 7a00 	vldr	s15, [r1]
 8004352:	edd1 6a01 	vldr	s13, [r1, #4]
 8004356:	6941      	ldr	r1, [r0, #20]
 8004358:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800435c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004360:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004364:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004368:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800436c:	3e01      	subs	r6, #1
 800436e:	ed82 7a00 	vstr	s14, [r2]
 8004372:	edc2 7a01 	vstr	s15, [r2, #4]
 8004376:	00f0      	lsls	r0, r6, #3
 8004378:	b3ee      	cbz	r6, 80043f6 <arm_rfft_fast_f32+0x176>
 800437a:	3808      	subs	r0, #8
 800437c:	f101 0e10 	add.w	lr, r1, #16
 8004380:	4420      	add	r0, r4
 8004382:	f104 0110 	add.w	r1, r4, #16
 8004386:	f102 0c10 	add.w	ip, r2, #16
 800438a:	ed90 7a02 	vldr	s14, [r0, #8]
 800438e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004392:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8004396:	ed90 4a03 	vldr	s8, [r0, #12]
 800439a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800439e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80043a2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80043a6:	ee74 4a05 	vadd.f32	s9, s8, s10
 80043aa:	ee26 3a27 	vmul.f32	s6, s12, s15
 80043ae:	ee77 6a26 	vadd.f32	s13, s14, s13
 80043b2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80043b6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80043ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80043be:	ee77 7a05 	vadd.f32	s15, s14, s10
 80043c2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80043c6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80043ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80043ce:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80043d2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80043d6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80043da:	3e01      	subs	r6, #1
 80043dc:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80043e0:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80043e4:	f1a0 0008 	sub.w	r0, r0, #8
 80043e8:	f101 0108 	add.w	r1, r1, #8
 80043ec:	f10e 0e08 	add.w	lr, lr, #8
 80043f0:	f10c 0c08 	add.w	ip, ip, #8
 80043f4:	d1c9      	bne.n	800438a <arm_rfft_fast_f32+0x10a>
 80043f6:	461a      	mov	r2, r3
 80043f8:	4629      	mov	r1, r5
 80043fa:	4638      	mov	r0, r7
 80043fc:	2301      	movs	r3, #1
 80043fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004402:	f000 bb2f 	b.w	8004a64 <arm_cfft_f32>
 8004406:	bf00      	nop

08004408 <arm_cfft_radix8by2_f32>:
 8004408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800440c:	ed2d 8b08 	vpush	{d8-d11}
 8004410:	4607      	mov	r7, r0
 8004412:	4608      	mov	r0, r1
 8004414:	f8b7 e000 	ldrh.w	lr, [r7]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800441e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8004422:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004426:	f000 80b0 	beq.w	800458a <arm_cfft_radix8by2_f32+0x182>
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	3310      	adds	r3, #16
 800442e:	18c6      	adds	r6, r0, r3
 8004430:	3210      	adds	r2, #16
 8004432:	4443      	add	r3, r8
 8004434:	f100 0510 	add.w	r5, r0, #16
 8004438:	f108 0410 	add.w	r4, r8, #16
 800443c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004440:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004444:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004448:	ed53 3a03 	vldr	s7, [r3, #-12]
 800444c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004450:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004454:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004458:	ed54 7a01 	vldr	s15, [r4, #-4]
 800445c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004460:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004464:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004468:	ed15 7a01 	vldr	s14, [r5, #-4]
 800446c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004470:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004474:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004478:	ed55 4a02 	vldr	s9, [r5, #-8]
 800447c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004480:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004484:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004488:	ee72 9a04 	vadd.f32	s19, s4, s8
 800448c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004490:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004494:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004498:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800449c:	ed45 ba04 	vstr	s23, [r5, #-16]
 80044a0:	ed05 ba03 	vstr	s22, [r5, #-12]
 80044a4:	ed45 aa02 	vstr	s21, [r5, #-8]
 80044a8:	ed05 aa01 	vstr	s20, [r5, #-4]
 80044ac:	ed06 8a01 	vstr	s16, [r6, #-4]
 80044b0:	ed46 9a04 	vstr	s19, [r6, #-16]
 80044b4:	ed06 9a03 	vstr	s18, [r6, #-12]
 80044b8:	ed46 8a02 	vstr	s17, [r6, #-8]
 80044bc:	ee76 6a66 	vsub.f32	s13, s12, s13
 80044c0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80044c4:	ed12 6a03 	vldr	s12, [r2, #-12]
 80044c8:	ed52 2a04 	vldr	s5, [r2, #-16]
 80044cc:	ee33 3a61 	vsub.f32	s6, s6, s3
 80044d0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80044d4:	ee26 8a86 	vmul.f32	s16, s13, s12
 80044d8:	ee24 2a06 	vmul.f32	s4, s8, s12
 80044dc:	ee63 1a22 	vmul.f32	s3, s6, s5
 80044e0:	ee24 4a22 	vmul.f32	s8, s8, s5
 80044e4:	ee23 3a06 	vmul.f32	s6, s6, s12
 80044e8:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80044ec:	ee23 6a86 	vmul.f32	s12, s7, s12
 80044f0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80044f4:	ee36 6a04 	vadd.f32	s12, s12, s8
 80044f8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80044fc:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004500:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004504:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004508:	ed44 2a04 	vstr	s5, [r4, #-16]
 800450c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004510:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004518:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800451c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004520:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004524:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004528:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800452c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004530:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004534:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004538:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800453c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004540:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004544:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004548:	ee26 6a25 	vmul.f32	s12, s12, s11
 800454c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004550:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004554:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004558:	ee37 7a26 	vadd.f32	s14, s14, s13
 800455c:	f1be 0e01 	subs.w	lr, lr, #1
 8004560:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004564:	f105 0510 	add.w	r5, r5, #16
 8004568:	ed44 7a01 	vstr	s15, [r4, #-4]
 800456c:	f106 0610 	add.w	r6, r6, #16
 8004570:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004574:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004578:	f102 0210 	add.w	r2, r2, #16
 800457c:	f104 0410 	add.w	r4, r4, #16
 8004580:	f103 0310 	add.w	r3, r3, #16
 8004584:	f47f af5a 	bne.w	800443c <arm_cfft_radix8by2_f32+0x34>
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	b28c      	uxth	r4, r1
 800458c:	4621      	mov	r1, r4
 800458e:	2302      	movs	r3, #2
 8004590:	f000 fae2 	bl	8004b58 <arm_radix8_butterfly_f32>
 8004594:	ecbd 8b08 	vpop	{d8-d11}
 8004598:	4621      	mov	r1, r4
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	4640      	mov	r0, r8
 800459e:	2302      	movs	r3, #2
 80045a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	f000 bad8 	b.w	8004b58 <arm_radix8_butterfly_f32>

080045a8 <arm_cfft_radix8by4_f32>:
 80045a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ac:	ed2d 8b0a 	vpush	{d8-d12}
 80045b0:	8802      	ldrh	r2, [r0, #0]
 80045b2:	ed91 6a00 	vldr	s12, [r1]
 80045b6:	b08f      	sub	sp, #60	; 0x3c
 80045b8:	460f      	mov	r7, r1
 80045ba:	0852      	lsrs	r2, r2, #1
 80045bc:	6841      	ldr	r1, [r0, #4]
 80045be:	900c      	str	r0, [sp, #48]	; 0x30
 80045c0:	0093      	lsls	r3, r2, #2
 80045c2:	4638      	mov	r0, r7
 80045c4:	4418      	add	r0, r3
 80045c6:	4606      	mov	r6, r0
 80045c8:	9009      	str	r0, [sp, #36]	; 0x24
 80045ca:	4418      	add	r0, r3
 80045cc:	edd0 6a00 	vldr	s13, [r0]
 80045d0:	ed96 4a00 	vldr	s8, [r6]
 80045d4:	edd6 2a01 	vldr	s5, [r6, #4]
 80045d8:	edd0 7a01 	vldr	s15, [r0, #4]
 80045dc:	900a      	str	r0, [sp, #40]	; 0x28
 80045de:	ee76 5a26 	vadd.f32	s11, s12, s13
 80045e2:	4604      	mov	r4, r0
 80045e4:	4625      	mov	r5, r4
 80045e6:	441c      	add	r4, r3
 80045e8:	edd4 4a00 	vldr	s9, [r4]
 80045ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80045f0:	ed94 3a01 	vldr	s6, [r4, #4]
 80045f4:	9401      	str	r4, [sp, #4]
 80045f6:	ee35 5a84 	vadd.f32	s10, s11, s8
 80045fa:	4630      	mov	r0, r6
 80045fc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004600:	463e      	mov	r6, r7
 8004602:	ee15 ea10 	vmov	lr, s10
 8004606:	ee76 6a66 	vsub.f32	s13, s12, s13
 800460a:	f846 eb08 	str.w	lr, [r6], #8
 800460e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004612:	ed90 5a01 	vldr	s10, [r0, #4]
 8004616:	9605      	str	r6, [sp, #20]
 8004618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800461c:	9e01      	ldr	r6, [sp, #4]
 800461e:	9707      	str	r7, [sp, #28]
 8004620:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8004624:	ed96 2a01 	vldr	s4, [r6, #4]
 8004628:	ee36 7a05 	vadd.f32	s14, s12, s10
 800462c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004630:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8004634:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004638:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800463c:	4604      	mov	r4, r0
 800463e:	46a3      	mov	fp, r4
 8004640:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004644:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004648:	ee14 8a10 	vmov	r8, s8
 800464c:	46a4      	mov	ip, r4
 800464e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8004652:	ed87 7a01 	vstr	s14, [r7, #4]
 8004656:	f84b 8b08 	str.w	r8, [fp], #8
 800465a:	f1ac 0704 	sub.w	r7, ip, #4
 800465e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8004662:	f101 0c08 	add.w	ip, r1, #8
 8004666:	462c      	mov	r4, r5
 8004668:	f8cd c010 	str.w	ip, [sp, #16]
 800466c:	ee15 ca90 	vmov	ip, s11
 8004670:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004674:	f844 cb08 	str.w	ip, [r4], #8
 8004678:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800467c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004680:	9406      	str	r4, [sp, #24]
 8004682:	ee76 6a83 	vadd.f32	s13, s13, s6
 8004686:	f101 0410 	add.w	r4, r1, #16
 800468a:	0852      	lsrs	r2, r2, #1
 800468c:	9402      	str	r4, [sp, #8]
 800468e:	ed85 6a01 	vstr	s12, [r5, #4]
 8004692:	462c      	mov	r4, r5
 8004694:	f101 0518 	add.w	r5, r1, #24
 8004698:	920b      	str	r2, [sp, #44]	; 0x2c
 800469a:	46b2      	mov	sl, r6
 800469c:	9503      	str	r5, [sp, #12]
 800469e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80046a2:	3a02      	subs	r2, #2
 80046a4:	ee16 5a90 	vmov	r5, s13
 80046a8:	46b6      	mov	lr, r6
 80046aa:	4630      	mov	r0, r6
 80046ac:	0852      	lsrs	r2, r2, #1
 80046ae:	f84a 5b08 	str.w	r5, [sl], #8
 80046b2:	f1a0 0604 	sub.w	r6, r0, #4
 80046b6:	edce 7a01 	vstr	s15, [lr, #4]
 80046ba:	9208      	str	r2, [sp, #32]
 80046bc:	f000 8130 	beq.w	8004920 <arm_cfft_radix8by4_f32+0x378>
 80046c0:	4691      	mov	r9, r2
 80046c2:	9a07      	ldr	r2, [sp, #28]
 80046c4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80046c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80046cc:	3b08      	subs	r3, #8
 80046ce:	f102 0510 	add.w	r5, r2, #16
 80046d2:	f101 0c20 	add.w	ip, r1, #32
 80046d6:	f1a4 020c 	sub.w	r2, r4, #12
 80046da:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80046de:	4433      	add	r3, r6
 80046e0:	3410      	adds	r4, #16
 80046e2:	4650      	mov	r0, sl
 80046e4:	4659      	mov	r1, fp
 80046e6:	ed55 3a02 	vldr	s7, [r5, #-8]
 80046ea:	ed14 5a02 	vldr	s10, [r4, #-8]
 80046ee:	ed91 7a00 	vldr	s14, [r1]
 80046f2:	edd0 7a00 	vldr	s15, [r0]
 80046f6:	ed54 5a01 	vldr	s11, [r4, #-4]
 80046fa:	ed15 4a01 	vldr	s8, [r5, #-4]
 80046fe:	edd0 6a01 	vldr	s13, [r0, #4]
 8004702:	ed91 6a01 	vldr	s12, [r1, #4]
 8004706:	ee33 8a85 	vadd.f32	s16, s7, s10
 800470a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800470e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8004712:	ee74 5a65 	vsub.f32	s11, s8, s11
 8004716:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800471a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800471e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8004722:	edd1 4a01 	vldr	s9, [r1, #4]
 8004726:	ed90 4a01 	vldr	s8, [r0, #4]
 800472a:	ee70 4a24 	vadd.f32	s9, s0, s9
 800472e:	ee75 aa06 	vadd.f32	s21, s10, s12
 8004732:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004736:	ee35 aac7 	vsub.f32	s20, s11, s14
 800473a:	ed45 4a01 	vstr	s9, [r5, #-4]
 800473e:	edd6 1a00 	vldr	s3, [r6]
 8004742:	edd7 0a00 	vldr	s1, [r7]
 8004746:	ed92 4a02 	vldr	s8, [r2, #8]
 800474a:	edd3 3a02 	vldr	s7, [r3, #8]
 800474e:	ed93 2a01 	vldr	s4, [r3, #4]
 8004752:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004756:	edd2 2a01 	vldr	s5, [r2, #4]
 800475a:	ed57 9a01 	vldr	s19, [r7, #-4]
 800475e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8004762:	ee39 3a81 	vadd.f32	s6, s19, s2
 8004766:	ee74 8a84 	vadd.f32	s17, s9, s8
 800476a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800476e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8004772:	ee7a aae6 	vsub.f32	s21, s21, s13
 8004776:	ee18 aa90 	vmov	sl, s17
 800477a:	f847 a908 	str.w	sl, [r7], #-8
 800477e:	edd2 8a01 	vldr	s17, [r2, #4]
 8004782:	ed93 9a01 	vldr	s18, [r3, #4]
 8004786:	ee73 8a28 	vadd.f32	s17, s6, s17
 800478a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800478e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004792:	ee74 0a63 	vsub.f32	s1, s8, s7
 8004796:	edc7 8a01 	vstr	s17, [r7, #4]
 800479a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800479e:	ed58 8a01 	vldr	s17, [r8, #-4]
 80047a2:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80047a6:	ee6a ba28 	vmul.f32	s23, s20, s17
 80047aa:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80047ae:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80047b2:	ee31 9a20 	vadd.f32	s18, s2, s1
 80047b6:	ee79 9a82 	vadd.f32	s19, s19, s4
 80047ba:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80047be:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80047c2:	ee69 baa8 	vmul.f32	s23, s19, s17
 80047c6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80047ca:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80047ce:	ee69 8a28 	vmul.f32	s17, s18, s17
 80047d2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80047d6:	ee1c aa10 	vmov	sl, s24
 80047da:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80047de:	f841 ab08 	str.w	sl, [r1], #8
 80047e2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80047e6:	ee3b bacb 	vsub.f32	s22, s23, s22
 80047ea:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80047ee:	ee33 3a62 	vsub.f32	s6, s6, s5
 80047f2:	ed01 aa01 	vstr	s20, [r1, #-4]
 80047f6:	edc2 8a01 	vstr	s17, [r2, #4]
 80047fa:	ed82 ba02 	vstr	s22, [r2, #8]
 80047fe:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8004802:	ee74 3a63 	vsub.f32	s7, s8, s7
 8004806:	ee38 8a47 	vsub.f32	s16, s16, s14
 800480a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800480e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8004812:	ee33 3a42 	vsub.f32	s6, s6, s4
 8004816:	ee38 8a67 	vsub.f32	s16, s16, s15
 800481a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800481e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8004822:	ee63 8a04 	vmul.f32	s17, s6, s8
 8004826:	ee28 aa24 	vmul.f32	s20, s16, s9
 800482a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800482e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8004832:	ee20 0a24 	vmul.f32	s0, s0, s9
 8004836:	ee63 3a84 	vmul.f32	s7, s7, s8
 800483a:	ee39 4a68 	vsub.f32	s8, s18, s17
 800483e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8004842:	ee14 aa10 	vmov	sl, s8
 8004846:	ee30 0a48 	vsub.f32	s0, s0, s16
 800484a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800484e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8004852:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004856:	ed04 0a01 	vstr	s0, [r4, #-4]
 800485a:	f846 a908 	str.w	sl, [r6], #-8
 800485e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004862:	ee35 7a87 	vadd.f32	s14, s11, s14
 8004866:	edc6 3a01 	vstr	s7, [r6, #4]
 800486a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800486e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004872:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8004876:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800487a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800487e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004882:	ee72 2a62 	vsub.f32	s5, s4, s5
 8004886:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800488a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800488e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8004892:	ee62 0a86 	vmul.f32	s1, s5, s12
 8004896:	ee66 6a86 	vmul.f32	s13, s13, s12
 800489a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489e:	ee21 6a06 	vmul.f32	s12, s2, s12
 80048a2:	ee62 2a87 	vmul.f32	s5, s5, s14
 80048a6:	ee21 1a07 	vmul.f32	s2, s2, s14
 80048aa:	ee15 aa90 	vmov	sl, s11
 80048ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80048b2:	f840 ab08 	str.w	sl, [r0], #8
 80048b6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80048ba:	ee76 2a22 	vadd.f32	s5, s12, s5
 80048be:	f1b9 0901 	subs.w	r9, r9, #1
 80048c2:	ed40 7a01 	vstr	s15, [r0, #-4]
 80048c6:	f105 0508 	add.w	r5, r5, #8
 80048ca:	ed83 1a02 	vstr	s2, [r3, #8]
 80048ce:	edc3 2a01 	vstr	s5, [r3, #4]
 80048d2:	f108 0808 	add.w	r8, r8, #8
 80048d6:	f1a2 0208 	sub.w	r2, r2, #8
 80048da:	f10c 0c10 	add.w	ip, ip, #16
 80048de:	f104 0408 	add.w	r4, r4, #8
 80048e2:	f10e 0e18 	add.w	lr, lr, #24
 80048e6:	f1a3 0308 	sub.w	r3, r3, #8
 80048ea:	f47f aefc 	bne.w	80046e6 <arm_cfft_radix8by4_f32+0x13e>
 80048ee:	9908      	ldr	r1, [sp, #32]
 80048f0:	9802      	ldr	r0, [sp, #8]
 80048f2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80048f6:	00cb      	lsls	r3, r1, #3
 80048f8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80048fc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004900:	9102      	str	r1, [sp, #8]
 8004902:	9905      	ldr	r1, [sp, #20]
 8004904:	4419      	add	r1, r3
 8004906:	9105      	str	r1, [sp, #20]
 8004908:	9904      	ldr	r1, [sp, #16]
 800490a:	4419      	add	r1, r3
 800490c:	9104      	str	r1, [sp, #16]
 800490e:	9906      	ldr	r1, [sp, #24]
 8004910:	449b      	add	fp, r3
 8004912:	4419      	add	r1, r3
 8004914:	449a      	add	sl, r3
 8004916:	9b03      	ldr	r3, [sp, #12]
 8004918:	9106      	str	r1, [sp, #24]
 800491a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800491e:	9303      	str	r3, [sp, #12]
 8004920:	9a05      	ldr	r2, [sp, #20]
 8004922:	9806      	ldr	r0, [sp, #24]
 8004924:	ed92 4a00 	vldr	s8, [r2]
 8004928:	ed90 7a00 	vldr	s14, [r0]
 800492c:	ed9b 3a00 	vldr	s6, [fp]
 8004930:	edda 3a00 	vldr	s7, [sl]
 8004934:	edd2 4a01 	vldr	s9, [r2, #4]
 8004938:	edd0 6a01 	vldr	s13, [r0, #4]
 800493c:	ed9a 2a01 	vldr	s4, [sl, #4]
 8004940:	eddb 7a01 	vldr	s15, [fp, #4]
 8004944:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8004948:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800494a:	ee34 6a07 	vadd.f32	s12, s8, s14
 800494e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8004952:	ee36 5a03 	vadd.f32	s10, s12, s6
 8004956:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800495a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800495e:	ee34 7a47 	vsub.f32	s14, s8, s14
 8004962:	ed82 5a00 	vstr	s10, [r2]
 8004966:	ed9b 5a01 	vldr	s10, [fp, #4]
 800496a:	edda 4a01 	vldr	s9, [sl, #4]
 800496e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004972:	ee37 4a27 	vadd.f32	s8, s14, s15
 8004976:	ee35 5a24 	vadd.f32	s10, s10, s9
 800497a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800497e:	ed82 5a01 	vstr	s10, [r2, #4]
 8004982:	9a04      	ldr	r2, [sp, #16]
 8004984:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8004988:	edd2 1a00 	vldr	s3, [r2]
 800498c:	edd2 2a01 	vldr	s5, [r2, #4]
 8004990:	9a02      	ldr	r2, [sp, #8]
 8004992:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004996:	ee36 6a43 	vsub.f32	s12, s12, s6
 800499a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800499e:	ee24 4a22 	vmul.f32	s8, s8, s5
 80049a2:	ee65 2a22 	vmul.f32	s5, s10, s5
 80049a6:	ee25 5a21 	vmul.f32	s10, s10, s3
 80049aa:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80049ae:	ee35 5a44 	vsub.f32	s10, s10, s8
 80049b2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80049b6:	edcb 2a00 	vstr	s5, [fp]
 80049ba:	ed8b 5a01 	vstr	s10, [fp, #4]
 80049be:	ed92 4a01 	vldr	s8, [r2, #4]
 80049c2:	ed92 5a00 	vldr	s10, [r2]
 80049c6:	9a03      	ldr	r2, [sp, #12]
 80049c8:	ee36 6a63 	vsub.f32	s12, s12, s7
 80049cc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80049d0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80049d4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80049d8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80049dc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80049e0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80049e4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80049e8:	ee76 6a83 	vadd.f32	s13, s13, s6
 80049ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049f0:	ed80 6a01 	vstr	s12, [r0, #4]
 80049f4:	edc0 5a00 	vstr	s11, [r0]
 80049f8:	edd2 5a01 	vldr	s11, [r2, #4]
 80049fc:	9807      	ldr	r0, [sp, #28]
 80049fe:	ee77 7a02 	vadd.f32	s15, s14, s4
 8004a02:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8004a06:	edd2 6a00 	vldr	s13, [r2]
 8004a0a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8004a0e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8004a12:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004a16:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004a1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a1e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8004a22:	edca 7a01 	vstr	s15, [sl, #4]
 8004a26:	ed8a 7a00 	vstr	s14, [sl]
 8004a2a:	6872      	ldr	r2, [r6, #4]
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	2304      	movs	r3, #4
 8004a30:	f000 f892 	bl	8004b58 <arm_radix8_butterfly_f32>
 8004a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a36:	6872      	ldr	r2, [r6, #4]
 8004a38:	4621      	mov	r1, r4
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	f000 f88c 	bl	8004b58 <arm_radix8_butterfly_f32>
 8004a40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a42:	6872      	ldr	r2, [r6, #4]
 8004a44:	4621      	mov	r1, r4
 8004a46:	2304      	movs	r3, #4
 8004a48:	f000 f886 	bl	8004b58 <arm_radix8_butterfly_f32>
 8004a4c:	6872      	ldr	r2, [r6, #4]
 8004a4e:	9801      	ldr	r0, [sp, #4]
 8004a50:	4621      	mov	r1, r4
 8004a52:	2304      	movs	r3, #4
 8004a54:	b00f      	add	sp, #60	; 0x3c
 8004a56:	ecbd 8b0a 	vpop	{d8-d12}
 8004a5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5e:	f000 b87b 	b.w	8004b58 <arm_radix8_butterfly_f32>
 8004a62:	bf00      	nop

08004a64 <arm_cfft_f32>:
 8004a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a68:	2a01      	cmp	r2, #1
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	4617      	mov	r7, r2
 8004a6e:	460c      	mov	r4, r1
 8004a70:	4698      	mov	r8, r3
 8004a72:	8805      	ldrh	r5, [r0, #0]
 8004a74:	d054      	beq.n	8004b20 <arm_cfft_f32+0xbc>
 8004a76:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004a7a:	d04c      	beq.n	8004b16 <arm_cfft_f32+0xb2>
 8004a7c:	d916      	bls.n	8004aac <arm_cfft_f32+0x48>
 8004a7e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004a82:	d01a      	beq.n	8004aba <arm_cfft_f32+0x56>
 8004a84:	d95c      	bls.n	8004b40 <arm_cfft_f32+0xdc>
 8004a86:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004a8a:	d044      	beq.n	8004b16 <arm_cfft_f32+0xb2>
 8004a8c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004a90:	d105      	bne.n	8004a9e <arm_cfft_f32+0x3a>
 8004a92:	2301      	movs	r3, #1
 8004a94:	6872      	ldr	r2, [r6, #4]
 8004a96:	4629      	mov	r1, r5
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 f85d 	bl	8004b58 <arm_radix8_butterfly_f32>
 8004a9e:	f1b8 0f00 	cmp.w	r8, #0
 8004aa2:	d111      	bne.n	8004ac8 <arm_cfft_f32+0x64>
 8004aa4:	2f01      	cmp	r7, #1
 8004aa6:	d016      	beq.n	8004ad6 <arm_cfft_f32+0x72>
 8004aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aac:	2d20      	cmp	r5, #32
 8004aae:	d032      	beq.n	8004b16 <arm_cfft_f32+0xb2>
 8004ab0:	d94a      	bls.n	8004b48 <arm_cfft_f32+0xe4>
 8004ab2:	2d40      	cmp	r5, #64	; 0x40
 8004ab4:	d0ed      	beq.n	8004a92 <arm_cfft_f32+0x2e>
 8004ab6:	2d80      	cmp	r5, #128	; 0x80
 8004ab8:	d1f1      	bne.n	8004a9e <arm_cfft_f32+0x3a>
 8004aba:	4621      	mov	r1, r4
 8004abc:	4630      	mov	r0, r6
 8004abe:	f7ff fca3 	bl	8004408 <arm_cfft_radix8by2_f32>
 8004ac2:	f1b8 0f00 	cmp.w	r8, #0
 8004ac6:	d0ed      	beq.n	8004aa4 <arm_cfft_f32+0x40>
 8004ac8:	68b2      	ldr	r2, [r6, #8]
 8004aca:	89b1      	ldrh	r1, [r6, #12]
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7fb fb83 	bl	80001d8 <arm_bitreversal_32>
 8004ad2:	2f01      	cmp	r7, #1
 8004ad4:	d1e8      	bne.n	8004aa8 <arm_cfft_f32+0x44>
 8004ad6:	ee07 5a90 	vmov	s15, r5
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ae2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ae6:	2d00      	cmp	r5, #0
 8004ae8:	d0de      	beq.n	8004aa8 <arm_cfft_f32+0x44>
 8004aea:	f104 0108 	add.w	r1, r4, #8
 8004aee:	2300      	movs	r3, #0
 8004af0:	3301      	adds	r3, #1
 8004af2:	429d      	cmp	r5, r3
 8004af4:	f101 0108 	add.w	r1, r1, #8
 8004af8:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004afc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004b00:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004b04:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004b08:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004b0c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004b10:	d1ee      	bne.n	8004af0 <arm_cfft_f32+0x8c>
 8004b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b16:	4621      	mov	r1, r4
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f7ff fd45 	bl	80045a8 <arm_cfft_radix8by4_f32>
 8004b1e:	e7be      	b.n	8004a9e <arm_cfft_f32+0x3a>
 8004b20:	b1ad      	cbz	r5, 8004b4e <arm_cfft_f32+0xea>
 8004b22:	f101 030c 	add.w	r3, r1, #12
 8004b26:	2200      	movs	r2, #0
 8004b28:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004b2c:	3201      	adds	r2, #1
 8004b2e:	eef1 7a67 	vneg.f32	s15, s15
 8004b32:	4295      	cmp	r5, r2
 8004b34:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004b38:	f103 0308 	add.w	r3, r3, #8
 8004b3c:	d1f4      	bne.n	8004b28 <arm_cfft_f32+0xc4>
 8004b3e:	e79a      	b.n	8004a76 <arm_cfft_f32+0x12>
 8004b40:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004b44:	d0a5      	beq.n	8004a92 <arm_cfft_f32+0x2e>
 8004b46:	e7aa      	b.n	8004a9e <arm_cfft_f32+0x3a>
 8004b48:	2d10      	cmp	r5, #16
 8004b4a:	d0b6      	beq.n	8004aba <arm_cfft_f32+0x56>
 8004b4c:	e7a7      	b.n	8004a9e <arm_cfft_f32+0x3a>
 8004b4e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004b52:	d894      	bhi.n	8004a7e <arm_cfft_f32+0x1a>
 8004b54:	e7aa      	b.n	8004aac <arm_cfft_f32+0x48>
 8004b56:	bf00      	nop

08004b58 <arm_radix8_butterfly_f32>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	ed2d 8b10 	vpush	{d8-d15}
 8004b60:	461c      	mov	r4, r3
 8004b62:	b09d      	sub	sp, #116	; 0x74
 8004b64:	4603      	mov	r3, r0
 8004b66:	3304      	adds	r3, #4
 8004b68:	ed9f bac4 	vldr	s22, [pc, #784]	; 8004e7c <arm_radix8_butterfly_f32+0x324>
 8004b6c:	9019      	str	r0, [sp, #100]	; 0x64
 8004b6e:	921a      	str	r2, [sp, #104]	; 0x68
 8004b70:	468b      	mov	fp, r1
 8004b72:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b74:	468a      	mov	sl, r1
 8004b76:	46a1      	mov	r9, r4
 8004b78:	4607      	mov	r7, r0
 8004b7a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004b7e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004b82:	eb03 0508 	add.w	r5, r3, r8
 8004b86:	195c      	adds	r4, r3, r5
 8004b88:	00de      	lsls	r6, r3, #3
 8004b8a:	191a      	adds	r2, r3, r4
 8004b8c:	9600      	str	r6, [sp, #0]
 8004b8e:	1898      	adds	r0, r3, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	9e00      	ldr	r6, [sp, #0]
 8004b94:	9311      	str	r3, [sp, #68]	; 0x44
 8004b96:	4401      	add	r1, r0
 8004b98:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8004b9c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8004ba0:	19be      	adds	r6, r7, r6
 8004ba2:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8004ba6:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8004baa:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8004bae:	9f00      	ldr	r7, [sp, #0]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	eb06 0e07 	add.w	lr, r6, r7
 8004bb6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004bb8:	9302      	str	r3, [sp, #8]
 8004bba:	3204      	adds	r2, #4
 8004bbc:	3104      	adds	r1, #4
 8004bbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bc2:	f04f 0c00 	mov.w	ip, #0
 8004bc6:	edde 7a00 	vldr	s15, [lr]
 8004bca:	edd6 6a00 	vldr	s13, [r6]
 8004bce:	ed95 2a00 	vldr	s4, [r5]
 8004bd2:	ed17 aa01 	vldr	s20, [r7, #-4]
 8004bd6:	edd4 4a00 	vldr	s9, [r4]
 8004bda:	ed90 5a00 	vldr	s10, [r0]
 8004bde:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004be2:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004be6:	ee77 8a85 	vadd.f32	s17, s15, s10
 8004bea:	ee76 3a87 	vadd.f32	s7, s13, s14
 8004bee:	ee32 4a20 	vadd.f32	s8, s4, s1
 8004bf2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8004bf6:	ee33 6a84 	vadd.f32	s12, s7, s8
 8004bfa:	ee73 5a28 	vadd.f32	s11, s6, s17
 8004bfe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004c02:	ee75 6a86 	vadd.f32	s13, s11, s12
 8004c06:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8004c0a:	ed47 6a01 	vstr	s13, [r7, #-4]
 8004c0e:	edc4 5a00 	vstr	s11, [r4]
 8004c12:	ed92 9a00 	vldr	s18, [r2]
 8004c16:	ed95 1a01 	vldr	s2, [r5, #4]
 8004c1a:	edd6 5a01 	vldr	s11, [r6, #4]
 8004c1e:	ed91 6a00 	vldr	s12, [r1]
 8004c22:	edd7 2a00 	vldr	s5, [r7]
 8004c26:	edd4 1a01 	vldr	s3, [r4, #4]
 8004c2a:	edde 6a01 	vldr	s13, [lr, #4]
 8004c2e:	edd0 9a01 	vldr	s19, [r0, #4]
 8004c32:	ee72 0a60 	vsub.f32	s1, s4, s1
 8004c36:	ee71 aa46 	vsub.f32	s21, s2, s12
 8004c3a:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8004c3e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004c42:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8004c46:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004c4a:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8004c4e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8004c52:	ee75 5a89 	vadd.f32	s11, s11, s18
 8004c56:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004c5a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8004c5e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004c62:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004c66:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8004c6a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004c6e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8004c72:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004c76:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8004c7a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004c7e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004c82:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004c86:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004c8a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004c8e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004c92:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8004c96:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004c9a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004c9e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8004ca2:	ee71 5a49 	vsub.f32	s11, s2, s18
 8004ca6:	ee31 2a09 	vadd.f32	s4, s2, s18
 8004caa:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004cae:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8004cb2:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8004cb6:	ee73 0a06 	vadd.f32	s1, s6, s12
 8004cba:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8004cbe:	ee36 5a87 	vadd.f32	s10, s13, s14
 8004cc2:	ee32 8a28 	vadd.f32	s16, s4, s17
 8004cc6:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004cca:	ee34 4a25 	vadd.f32	s8, s8, s11
 8004cce:	ee33 3a80 	vadd.f32	s6, s7, s0
 8004cd2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004cd6:	ee71 5a64 	vsub.f32	s11, s2, s9
 8004cda:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8004cde:	ee32 2a68 	vsub.f32	s4, s4, s17
 8004ce2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004ce6:	ee74 4a81 	vadd.f32	s9, s9, s2
 8004cea:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8004cee:	44dc      	add	ip, fp
 8004cf0:	45e2      	cmp	sl, ip
 8004cf2:	ed87 8a00 	vstr	s16, [r7]
 8004cf6:	ed84 2a01 	vstr	s4, [r4, #4]
 8004cfa:	441f      	add	r7, r3
 8004cfc:	edce 0a00 	vstr	s1, [lr]
 8004d00:	441c      	add	r4, r3
 8004d02:	ed80 6a00 	vstr	s12, [r0]
 8004d06:	edce 1a01 	vstr	s3, [lr, #4]
 8004d0a:	ed80 4a01 	vstr	s8, [r0, #4]
 8004d0e:	449e      	add	lr, r3
 8004d10:	ed86 3a00 	vstr	s6, [r6]
 8004d14:	4418      	add	r0, r3
 8004d16:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004d1a:	ed02 5a01 	vstr	s10, [r2, #-4]
 8004d1e:	ed85 7a00 	vstr	s14, [r5]
 8004d22:	edc6 5a01 	vstr	s11, [r6, #4]
 8004d26:	edc1 4a00 	vstr	s9, [r1]
 8004d2a:	441e      	add	r6, r3
 8004d2c:	edc2 6a00 	vstr	s13, [r2]
 8004d30:	4419      	add	r1, r3
 8004d32:	edc5 7a01 	vstr	s15, [r5, #4]
 8004d36:	441a      	add	r2, r3
 8004d38:	441d      	add	r5, r3
 8004d3a:	f63f af44 	bhi.w	8004bc6 <arm_radix8_butterfly_f32+0x6e>
 8004d3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004d40:	2a07      	cmp	r2, #7
 8004d42:	f240 81f5 	bls.w	8005130 <arm_radix8_butterfly_f32+0x5d8>
 8004d46:	f108 0101 	add.w	r1, r8, #1
 8004d4a:	188f      	adds	r7, r1, r2
 8004d4c:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8004d50:	19d6      	adds	r6, r2, r7
 8004d52:	eb08 0c09 	add.w	ip, r8, r9
 8004d56:	1994      	adds	r4, r2, r6
 8004d58:	eb0c 0e09 	add.w	lr, ip, r9
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	9701      	str	r7, [sp, #4]
 8004d60:	4420      	add	r0, r4
 8004d62:	eb0e 0709 	add.w	r7, lr, r9
 8004d66:	1815      	adds	r5, r2, r0
 8004d68:	eb07 0209 	add.w	r2, r7, r9
 8004d6c:	9203      	str	r2, [sp, #12]
 8004d6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d74:	9117      	str	r1, [sp, #92]	; 0x5c
 8004d76:	440a      	add	r2, r1
 8004d78:	9900      	ldr	r1, [sp, #0]
 8004d7a:	3108      	adds	r1, #8
 8004d7c:	9100      	str	r1, [sp, #0]
 8004d7e:	9902      	ldr	r1, [sp, #8]
 8004d80:	3108      	adds	r1, #8
 8004d82:	9102      	str	r1, [sp, #8]
 8004d84:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004d86:	00ff      	lsls	r7, r7, #3
 8004d88:	9715      	str	r7, [sp, #84]	; 0x54
 8004d8a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8004d8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004d92:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8004d96:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004d98:	9903      	ldr	r1, [sp, #12]
 8004d9a:	19d7      	adds	r7, r2, r7
 8004d9c:	00c9      	lsls	r1, r1, #3
 8004d9e:	9114      	str	r1, [sp, #80]	; 0x50
 8004da0:	9710      	str	r7, [sp, #64]	; 0x40
 8004da2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004da4:	9f00      	ldr	r7, [sp, #0]
 8004da6:	19cf      	adds	r7, r1, r7
 8004da8:	970d      	str	r7, [sp, #52]	; 0x34
 8004daa:	9f02      	ldr	r7, [sp, #8]
 8004dac:	19cf      	adds	r7, r1, r7
 8004dae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8004db2:	970c      	str	r7, [sp, #48]	; 0x30
 8004db4:	9f01      	ldr	r7, [sp, #4]
 8004db6:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8004dba:	3504      	adds	r5, #4
 8004dbc:	3004      	adds	r0, #4
 8004dbe:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8004dc2:	9508      	str	r5, [sp, #32]
 8004dc4:	9009      	str	r0, [sp, #36]	; 0x24
 8004dc6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8004dc8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004dca:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8004dce:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004dd2:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8004dd6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004dd8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8004ddc:	1945      	adds	r5, r0, r5
 8004dde:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004de2:	460f      	mov	r7, r1
 8004de4:	3404      	adds	r4, #4
 8004de6:	4641      	mov	r1, r8
 8004de8:	1841      	adds	r1, r0, r1
 8004dea:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8004dee:	940a      	str	r4, [sp, #40]	; 0x28
 8004df0:	eb00 0c06 	add.w	ip, r0, r6
 8004df4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004df8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004dfa:	9506      	str	r5, [sp, #24]
 8004dfc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004dfe:	9105      	str	r1, [sp, #20]
 8004e00:	4639      	mov	r1, r7
 8004e02:	1905      	adds	r5, r0, r4
 8004e04:	3108      	adds	r1, #8
 8004e06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004e08:	9507      	str	r5, [sp, #28]
 8004e0a:	910f      	str	r1, [sp, #60]	; 0x3c
 8004e0c:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8004e10:	2101      	movs	r1, #1
 8004e12:	eb00 0e06 	add.w	lr, r0, r6
 8004e16:	9518      	str	r5, [sp, #96]	; 0x60
 8004e18:	9404      	str	r4, [sp, #16]
 8004e1a:	9103      	str	r1, [sp, #12]
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4689      	mov	r9, r1
 8004e20:	9e06      	ldr	r6, [sp, #24]
 8004e22:	ed90 fa00 	vldr	s30, [r0]
 8004e26:	edd6 7a01 	vldr	s15, [r6, #4]
 8004e2a:	edd0 ba01 	vldr	s23, [r0, #4]
 8004e2e:	edcd 7a00 	vstr	s15, [sp]
 8004e32:	a80d      	add	r0, sp, #52	; 0x34
 8004e34:	edde 7a01 	vldr	s15, [lr, #4]
 8004e38:	9c05      	ldr	r4, [sp, #20]
 8004e3a:	9d07      	ldr	r5, [sp, #28]
 8004e3c:	edd2 fa00 	vldr	s31, [r2]
 8004e40:	ed92 ca01 	vldr	s24, [r2, #4]
 8004e44:	edcd 7a01 	vstr	s15, [sp, #4]
 8004e48:	c807      	ldmia	r0, {r0, r1, r2}
 8004e4a:	eddc 7a01 	vldr	s15, [ip, #4]
 8004e4e:	edd4 ea00 	vldr	s29, [r4]
 8004e52:	ed95 ea00 	vldr	s28, [r5]
 8004e56:	edd6 da00 	vldr	s27, [r6]
 8004e5a:	edd4 aa01 	vldr	s21, [r4, #4]
 8004e5e:	ed95 aa01 	vldr	s20, [r5, #4]
 8004e62:	ed9e da00 	vldr	s26, [lr]
 8004e66:	eddc ca00 	vldr	s25, [ip]
 8004e6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e70:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004e72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004e74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004e76:	edcd 7a02 	vstr	s15, [sp, #8]
 8004e7a:	e001      	b.n	8004e80 <arm_radix8_butterfly_f32+0x328>
 8004e7c:	3f3504f3 	.word	0x3f3504f3
 8004e80:	ed16 6a01 	vldr	s12, [r6, #-4]
 8004e84:	ed91 5a00 	vldr	s10, [r1]
 8004e88:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004e8c:	edd5 7a00 	vldr	s15, [r5]
 8004e90:	ed18 7a01 	vldr	s14, [r8, #-4]
 8004e94:	edd2 3a00 	vldr	s7, [r2]
 8004e98:	ed94 3a00 	vldr	s6, [r4]
 8004e9c:	ed90 2a00 	vldr	s4, [r0]
 8004ea0:	ed92 0a01 	vldr	s0, [r2, #4]
 8004ea4:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004ea8:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004eac:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004eb0:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004eb4:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004eb8:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004ebc:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004ec0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ec8:	ed82 6a00 	vstr	s12, [r2]
 8004ecc:	edd5 8a01 	vldr	s17, [r5, #4]
 8004ed0:	ed90 9a01 	vldr	s18, [r0, #4]
 8004ed4:	edd6 2a00 	vldr	s5, [r6]
 8004ed8:	ed98 7a00 	vldr	s14, [r8]
 8004edc:	edd4 0a01 	vldr	s1, [r4, #4]
 8004ee0:	ed91 6a01 	vldr	s12, [r1, #4]
 8004ee4:	edd7 5a00 	vldr	s11, [r7]
 8004ee8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004eec:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004ef0:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004ef4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004ef8:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004efc:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004f00:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004f04:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004f08:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004f0c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004f10:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004f14:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004f18:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004f1c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004f20:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004f24:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004f28:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004f2c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004f30:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004f34:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004f38:	ee32 1a87 	vadd.f32	s2, s5, s14
 8004f3c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004f40:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004f44:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004f48:	ee73 0a29 	vadd.f32	s1, s6, s19
 8004f4c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004f50:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004f54:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004f58:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8004f5c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004f60:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004f64:	ee75 8a85 	vadd.f32	s17, s11, s10
 8004f68:	ee74 3a22 	vadd.f32	s7, s8, s5
 8004f6c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004f70:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004f74:	ee79 1a41 	vsub.f32	s3, s18, s2
 8004f78:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8004f7c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004f80:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004f84:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004f88:	ee30 4a60 	vsub.f32	s8, s0, s1
 8004f8c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004f90:	ee30 0a80 	vadd.f32	s0, s1, s0
 8004f94:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004f98:	ee33 6a06 	vadd.f32	s12, s6, s12
 8004f9c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004fa0:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004fa4:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004fa8:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8004fac:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004fb0:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004fb4:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004fb8:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8004fbc:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004fc0:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004fc4:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004fc8:	ee35 3a03 	vadd.f32	s6, s10, s6
 8004fcc:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004fd0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004fd4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004fd8:	ed9d 4a02 	vldr	s8, [sp, #8]
 8004fdc:	ed82 1a01 	vstr	s2, [r2, #4]
 8004fe0:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004fe4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004fe8:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004fec:	ed81 3a00 	vstr	s6, [r1]
 8004ff0:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004ff4:	ee32 2a05 	vadd.f32	s4, s4, s10
 8004ff8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8004ffc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005000:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005004:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005008:	ee27 7a24 	vmul.f32	s14, s14, s9
 800500c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005010:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005014:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005018:	ed9d 4a00 	vldr	s8, [sp]
 800501c:	edc1 6a01 	vstr	s13, [r1, #4]
 8005020:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005024:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005028:	ee64 9a29 	vmul.f32	s19, s8, s19
 800502c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005030:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005034:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005038:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800503c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005040:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005044:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8005048:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800504c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005050:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005054:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005058:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800505c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005060:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005064:	44d9      	add	r9, fp
 8005066:	45ca      	cmp	sl, r9
 8005068:	ed84 9a00 	vstr	s18, [r4]
 800506c:	edc4 3a01 	vstr	s7, [r4, #4]
 8005070:	441a      	add	r2, r3
 8005072:	ed07 7a01 	vstr	s14, [r7, #-4]
 8005076:	edc7 2a00 	vstr	s5, [r7]
 800507a:	4419      	add	r1, r3
 800507c:	ed80 2a00 	vstr	s4, [r0]
 8005080:	ed80 8a01 	vstr	s16, [r0, #4]
 8005084:	441c      	add	r4, r3
 8005086:	ed48 1a01 	vstr	s3, [r8, #-4]
 800508a:	ed88 0a00 	vstr	s0, [r8]
 800508e:	441f      	add	r7, r3
 8005090:	ed46 4a01 	vstr	s9, [r6, #-4]
 8005094:	4418      	add	r0, r3
 8005096:	edc6 9a00 	vstr	s19, [r6]
 800509a:	4498      	add	r8, r3
 800509c:	edc5 0a00 	vstr	s1, [r5]
 80050a0:	ed85 6a01 	vstr	s12, [r5, #4]
 80050a4:	441e      	add	r6, r3
 80050a6:	441d      	add	r5, r3
 80050a8:	f63f aeea 	bhi.w	8004e80 <arm_radix8_butterfly_f32+0x328>
 80050ac:	9a03      	ldr	r2, [sp, #12]
 80050ae:	9818      	ldr	r0, [sp, #96]	; 0x60
 80050b0:	3201      	adds	r2, #1
 80050b2:	4611      	mov	r1, r2
 80050b4:	9203      	str	r2, [sp, #12]
 80050b6:	9a04      	ldr	r2, [sp, #16]
 80050b8:	4402      	add	r2, r0
 80050ba:	9204      	str	r2, [sp, #16]
 80050bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80050be:	9a05      	ldr	r2, [sp, #20]
 80050c0:	4402      	add	r2, r0
 80050c2:	9205      	str	r2, [sp, #20]
 80050c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80050c6:	9a07      	ldr	r2, [sp, #28]
 80050c8:	4402      	add	r2, r0
 80050ca:	9207      	str	r2, [sp, #28]
 80050cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80050ce:	9a06      	ldr	r2, [sp, #24]
 80050d0:	4402      	add	r2, r0
 80050d2:	9206      	str	r2, [sp, #24]
 80050d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80050d6:	4496      	add	lr, r2
 80050d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050da:	4494      	add	ip, r2
 80050dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050de:	3208      	adds	r2, #8
 80050e0:	920f      	str	r2, [sp, #60]	; 0x3c
 80050e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050e4:	3208      	adds	r2, #8
 80050e6:	920e      	str	r2, [sp, #56]	; 0x38
 80050e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050ea:	3208      	adds	r2, #8
 80050ec:	920d      	str	r2, [sp, #52]	; 0x34
 80050ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050f0:	3208      	adds	r2, #8
 80050f2:	920c      	str	r2, [sp, #48]	; 0x30
 80050f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050f6:	3208      	adds	r2, #8
 80050f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80050fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050fc:	3208      	adds	r2, #8
 80050fe:	920a      	str	r2, [sp, #40]	; 0x28
 8005100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005102:	3208      	adds	r2, #8
 8005104:	9209      	str	r2, [sp, #36]	; 0x24
 8005106:	9a08      	ldr	r2, [sp, #32]
 8005108:	3208      	adds	r2, #8
 800510a:	9208      	str	r2, [sp, #32]
 800510c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800510e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005110:	4288      	cmp	r0, r1
 8005112:	4622      	mov	r2, r4
 8005114:	d007      	beq.n	8005126 <arm_radix8_butterfly_f32+0x5ce>
 8005116:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005118:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800511c:	4621      	mov	r1, r4
 800511e:	4401      	add	r1, r0
 8005120:	9110      	str	r1, [sp, #64]	; 0x40
 8005122:	9804      	ldr	r0, [sp, #16]
 8005124:	e67c      	b.n	8004e20 <arm_radix8_butterfly_f32+0x2c8>
 8005126:	4683      	mov	fp, r0
 8005128:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 800512c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800512e:	e524      	b.n	8004b7a <arm_radix8_butterfly_f32+0x22>
 8005130:	b01d      	add	sp, #116	; 0x74
 8005132:	ecbd 8b10 	vpop	{d8-d15}
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	bf00      	nop

0800513c <memset>:
 800513c:	4402      	add	r2, r0
 800513e:	4603      	mov	r3, r0
 8005140:	4293      	cmp	r3, r2
 8005142:	d100      	bne.n	8005146 <memset+0xa>
 8005144:	4770      	bx	lr
 8005146:	f803 1b01 	strb.w	r1, [r3], #1
 800514a:	e7f9      	b.n	8005140 <memset+0x4>

0800514c <__libc_init_array>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4d0d      	ldr	r5, [pc, #52]	; (8005184 <__libc_init_array+0x38>)
 8005150:	4c0d      	ldr	r4, [pc, #52]	; (8005188 <__libc_init_array+0x3c>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	2600      	movs	r6, #0
 8005158:	42a6      	cmp	r6, r4
 800515a:	d109      	bne.n	8005170 <__libc_init_array+0x24>
 800515c:	4d0b      	ldr	r5, [pc, #44]	; (800518c <__libc_init_array+0x40>)
 800515e:	4c0c      	ldr	r4, [pc, #48]	; (8005190 <__libc_init_array+0x44>)
 8005160:	f000 f818 	bl	8005194 <_init>
 8005164:	1b64      	subs	r4, r4, r5
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	2600      	movs	r6, #0
 800516a:	42a6      	cmp	r6, r4
 800516c:	d105      	bne.n	800517a <__libc_init_array+0x2e>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	f855 3b04 	ldr.w	r3, [r5], #4
 8005174:	4798      	blx	r3
 8005176:	3601      	adds	r6, #1
 8005178:	e7ee      	b.n	8005158 <__libc_init_array+0xc>
 800517a:	f855 3b04 	ldr.w	r3, [r5], #4
 800517e:	4798      	blx	r3
 8005180:	3601      	adds	r6, #1
 8005182:	e7f2      	b.n	800516a <__libc_init_array+0x1e>
 8005184:	0801862c 	.word	0x0801862c
 8005188:	0801862c 	.word	0x0801862c
 800518c:	0801862c 	.word	0x0801862c
 8005190:	08018630 	.word	0x08018630

08005194 <_init>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr

080051a0 <_fini>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr
